{-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

				AND THE ACTUAL USER DEFINED FINDERS (OR AUTO GENERATED FINDERS)

 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --}

{loop tableOrView.finders as finder}

{-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

	THE NON-SELECT CLAUSE FINDERS

 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --}

	{if fn:null[finder.selectClause]}

		{\t}/**{\n}
				{\t} * {finder.name}{\n}

				{loop finder.comments as comment}
					{\t} * {comment}{\n}
					{if commentStatus.last}
						{\t} * {\n}
					{endif}
				{endloop}

	{if finder.hasWhereFieldAliases}
		{loop finder.whereFields as whereField}
			{\t} * @param {whereField.javaName}{if whereField.isInField}List{endif}{\n}
		{endloop}
	{else}
		{loop finder.uniqueWhereFields as whereField}
			{\t} * @param {whereField.javaName}{if whereField.isInField}List{endif}{\n}
		{endloop}
	{endif}

		{\t} * {\n}
			{if finder.unique}
		{\t} * @return the unique result of {tableOrView.javaClassName} found{\n}
			{else}
		{\t} * @return the list of {tableOrView.javaClassName} results found{\n}
			{endif}
		{\t} * {\n}
		{\t} * @throws H2ZeroFinderException if no results could be found{\n}
		{\t} * @throws SQLException if there was an error in the SQL statement{\n}
		{\t} */{\n}

{--

	START OF DEFAULT FINDER - NOT SELECT CLAUSE

	CONNECTION, PARAMS..., LIMIT, OFFSET

}

		{\t}public static 
		{if finder.unique}{tableOrView.javaClassName} {else}List<{tableOrView.javaClassName}> {endif}
		{finder.name}(Connection connection
			{import classpath:/snippet/finder/method-parameters-with-connection-limit-offset.templar}
		) throws H2ZeroFinderException, SQLException {{{\n}

		{\t}{\t}boolean hasConnection = (null != connection);{\n}
		{\t}{\t}String statement = null;{\n}
		{\n}
		{\t}{\t}// first find the statement that we want{\n}
		{\n}

		{-- 
			need to add in the correct cache keys for infields.... 

			this is a little more complex...  the cacheKey now becomes the values of:
			<limit>:<offset>:<num_args in list>:...
		}
		{\t}{\t}String cacheKey = limit + ":" + offset{if finder.hasInFields} + ":" + 
			{loop finder.inWhereFields as whereField}
				{whereField.javaName}List.size() + ":" {if !whereFieldStatus.last} + {endif}
			{endloop}{endif};{\n}

		{\t}{\t}if(!{finder.name}_limit_statement_cache.containsKey(cacheKey)) {{{\n}

		{\t}{\t}{\t}// place the cacheKey in the cache for later use{\n}
		{\n}

		{if finder.hasInFields}
			{\t}{\t}{\t}String preparedStatementTemp = SQL_{finder.staticName};{\n}
			{\t}{\t}{\t}StringBuilder whereFieldStringBuilder = null;{\n}
			{loop finder.whereFields as whereField}
				{if whereField.isInField}
					{\t}{\t}{\t}whereFieldStringBuilder = new StringBuilder();{\n}
					{\t}{\t}{\t}for(int i = 0; i < {whereField.javaName}List.size(); i++) {{{\n}
					{\t}{\t}{\t}{\t}if(i > 0) {{{\n}
					{\t}{\t}{\t}{\t}{\t}whereFieldStringBuilder.append(", ");{\n}
					{\t}{\t}{\t}{\t}}{\n}
					{\t}{\t}{\t}{\t}whereFieldStringBuilder.append("?");{\n}
					{\t}{\t}{\t}}{\n}

					{\t}{\t}{\t}preparedStatementTemp = SQL_{finder.staticName}.replaceFirst("\\.\\.\\.", whereFieldStringBuilder.toString());{\n}
				{endif}
			{endloop}
			{\t}{\t}{\t}StringBuilder stringBuilder = new StringBuilder(preparedStatementTemp);{\n}
		{else}
			{\t}{\t}{\t}StringBuilder stringBuilder = new StringBuilder(SQL_{finder.staticName});{\n}
		{endif}


		{\n}
		{\t}{\t}{\t}if(null != limit) {{{\n}
		{\t}{\t}{\t}{\t}stringBuilder.append(" limit ");{\n}
		{\t}{\t}{\t}{\t}stringBuilder.append(limit);{\n}
		{\t}{\t}{\t}}{\n}
		{\n}
		{\t}{\t}{\t}if(null != offset) {{{\n}
		{\t}{\t}{\t}{\t}stringBuilder.append(" offset ");{\n}
		{\t}{\t}{\t}{\t}stringBuilder.append(offset);{\n}
		{\t}{\t}{\t}}{\n}
		{\n}
		{\t}{\t}{\t}statement = stringBuilder.toString();{\n}
		{\t}{\t}{\t}{finder.name}_limit_statement_cache.put(cacheKey, statement);{\n}
		{\t}{\t}} else {{{\n}
		{\t}{\t}{\t}statement = {finder.name}_limit_statement_cache.get(cacheKey);{\n}
		{\t}{\t}}{\n}
		{\n}

		{\t}{\t}PreparedStatement preparedStatement = null;{\n}
		{\t}{\t}ResultSet resultSet = null;{\n}

		{if finder.unique}
			{\t}{\t}{tableOrView.javaClassName} result = null;{\n}
		{else}
			{\t}{\t}List<{tableOrView.javaClassName}> results = null;{\n}
		{endif}
		{\t}{\t}try {{{\n}

		{\t}{\t}{\t}if(!hasConnection) {{{\n}
		{\t}{\t}{\t}{\t}connection = ConnectionManager.getConnection();{\n}
		{\t}{\t}{\t}}{\n}

		{\t}{\t}{\t}preparedStatement = connection.prepareStatement(statement);{\n}


			{if finder.hasInFields}
				{\t}{\t}{\t}int i = 1;{\n}
				{loop finder.whereFields as whereField}
					{if whereField.isInField}
						{\t}{\t}{\t}for ({whereField.javaType} {whereField.javaName}In : {whereField.javaName}List) {{{\n}
						{\t}{\t}{\t}{\t}ConnectionManager.set{whereField.upperType}(preparedStatement, i, {whereField.javaName}In);{\n}
						{\t}{\t}{\t}{\t}i++;{\n}
						{\t}{\t}{\t}}{\n}

					{else}
						{\t}{\t}{\t}ConnectionManager.set{whereField.upperType}(preparedStatement, i, {whereField.javaName});{\n}
						{\t}{\t}{\t}i++;{\n}
					{endif}
				{endloop}
			{else}
				{loop finder.whereFields as whereField}
					{\t}{\t}{\t}ConnectionManager.set{whereField.upperType}(preparedStatement, {whereFieldStatus.index}, {whereField.javaName});{\n}
				{endloop}
			{endif}
			{\n}

			{if finder.unique}
				{\t}{\t}{\t}resultSet = preparedStatement.executeQuery();{\n}
				{\t}{\t}{\t}result = uniqueResult(resultSet);{\n}
				{\t}{\t}{\t}ConnectionManager.closeAll(resultSet, preparedStatement);{\n}
			{else}

				{\t}{\t}{\t}resultSet = preparedStatement.executeQuery();{\n}
				{\t}{\t}{\t}results = list(resultSet);{\n}

			{endif}
		{\t}{\t}} catch (SQLException sqlex) {{{\n}
		{\t}{\t}{\t}throw sqlex;{\n}

		{if finder.unique}
			{\t}{\t}} catch (H2ZeroFinderException h2zfex) {{{\n}
			{\t}{\t}{\t}throw new H2ZeroFinderException(h2zfex.getMessage() + "  Additionally, the parameters were " 
				{import classpath:/snippet/finder/h2zero-exception-output.templar}
			);{\n}
		{endif}

		{\t}{\t}} finally {{{\n}
		{\t}{\t}{\t}if(hasConnection) {{{\n}
		{\t}{\t}{\t}{\t}ConnectionManager.closeAll(resultSet, preparedStatement, null);{\n}
		{\t}{\t}{\t}} else {{{\n}
		{\t}{\t}{\t}{\t}ConnectionManager.closeAll(resultSet, preparedStatement, connection);{\n}
		{\t}{\t}{\t}}{\n}
		{\t}{\t}}{\n}
		{\n}
		{\n}
		{\t}{\t}if(null == result{if !finder.unique}s{endif}) {{{\n}
		{\t}{\t}{\t}throw new H2ZeroFinderException("Could not find result.");{\n}
		{\t}{\t}}{\n}
		{\t}{\t}return(result{if !finder.unique}s{endif});{\n}
		{\t}}{\n}
	{\n}

{--

	END OF DEFAULT FINDER - NOT SELECT CLAUSE

}

{--

	START OF DEFAULT FINDER - NOT SELECT CLAUSE WITHOUT LIMIT/OFFSET

	CONNECTION, PARAMS...

}

		{\t}public static 
		{if finder.unique}{tableOrView.javaClassName} {else}List<{tableOrView.javaClassName}> {endif}
		{finder.name}(Connection connection

			{import classpath:/snippet/finder/method-parameters-with-connection.templar}

		) throws H2ZeroFinderException, SQLException {{{\n}

{\t}{\t}return({finder.name}(connection
								{import classpath:/snippet/finder/method-parameters-call-with-connection.templar}
			, null, null));{\n}
{\t}}{\n}{\n}

{--

	END OF DEFAULT FINDER - NOT SELECT CLAUSE WITHOUT LIMIT/OFFSET

}

{--

		PARAMS..., LIMIT, OFFSET

}
		{\t}public static 
		{if finder.unique}{tableOrView.javaClassName} {else}List<{tableOrView.javaClassName}> {endif}
			{finder.name}(
				{import classpath:/snippet/finder/method-parameters-limit-offset.templar}
			) throws H2ZeroFinderException, SQLException {{{\n}

		{\t}{\t}return({finder.name}(null
								{import classpath:/snippet/finder/method-parameters-call-with-connection-limit-offset.templar}
		));{\n}

		{\t}}{\n}
	{\n}

{--

		PARAMS...

}

		{\t}public static 
		{if finder.unique}{tableOrView.javaClassName} {else}List<{tableOrView.javaClassName}> {endif}
			{finder.name}(
				{import classpath:/snippet/finder/method-parameters.templar}
			) throws H2ZeroFinderException, SQLException {{{\n}

		{\t}{\t}return({finder.name}(null
								{import classpath:/snippet/finder/method-parameters-call-with-connection.templar}
								, null, null
		));{\n}

		{\t}}{\n}
	{\n}



{--
		SILENT CONNECTION, PARAMS..., LIMIT, OFFSET
}

		{--
			Generate the silent finder for the above finder with a connection being 
			passed in for any transactional lookups
		}


// silent connection, params..., limit, offset{\n}
		{\t}public static 
		{if finder.unique}{tableOrView.javaClassName} {else}List<{tableOrView.javaClassName}> {endif}
		{finder.name}Silent(Connection connection
			{import classpath:/snippet/finder/method-parameters-with-connection-limit-offset.templar}
		) {{{\n}

		{\t}{\t}try {{{\n}
		{\t}{\t}{\t}return({finder.name}(connection
			{import classpath:/snippet/finder/method-parameters-call-with-connection-limit-offset.templar}
		));{\n}
		{\t}{\t}} catch(H2ZeroFinderException h2zfex) {{{\n}

		{\t}{\t}{\t}if(LOGGER.isWarnEnabled()) {{{\n}
		{\t}{\t}{\t}{\t}LOGGER.warn("H2ZeroFinderException {finder.name}Silent(

			{import classpath:/snippet/finder/h2zero-exception-output-silent-limit-offset.templar}

			): " + h2zfex.getMessage());{\n}

		{\t}{\t}{\t}{\t}if(LOGGER.isDebugEnabled()) {{{\n}
		{\t}{\t}{\t}{\t}{\t}h2zfex.printStackTrace();{\n}
		{\t}{\t}{\t}{\t}}{\n}

		{\t}{\t}{\t}}{\n}

		{if finder.unique}
			{\t}{\t}{\t}return(null);{\n}
		{else}
			{\t}{\t}{\t}return(new ArrayList<{tableOrView.javaClassName}>());{\n}
		{endif}

		{\t}{\t}} catch(SQLException sqlex) {{{\n}

		{\t}{\t}{\t}if(LOGGER.isWarnEnabled()) {{{\n}
		{\t}{\t}{\t}{\t}LOGGER.warn("SQLException {finder.name}Silent(

			{import classpath:/snippet/finder/h2zero-exception-output-silent-limit-offset.templar}

		): " + sqlex.getMessage());{\n}

		{\t}{\t}{\t}{\t}if(LOGGER.isDebugEnabled()) {{{\n}
		{\t}{\t}{\t}{\t}{\t}sqlex.printStackTrace();{\n}
		{\t}{\t}{\t}{\t}}{\n}

		{\t}{\t}{\t}}{\n}

		{if finder.unique}
			{\t}{\t}{\t}return(null);{\n}
		{else}
			{\t}{\t}{\t}return(new ArrayList<{tableOrView.javaClassName}>());{\n}
		{endif}

		{\t}{\t}}{\n}
		{\t}}{\n}
	{\n}

// silent connection, params...{\n}

		{\t}public static 
		{if finder.unique}{tableOrView.javaClassName} {else}List<{tableOrView.javaClassName}> {endif}
		{finder.name}Silent(Connection connection
			{import classpath:/snippet/finder/method-parameters-with-connection.templar}
		) {{{\n}

		{\t}{\t}return({finder.name}Silent(connection
			{import classpath:/snippet/finder/method-parameters-call-with-connection.templar}
			, null, null
		));{\n}

		{\t}}{\n}
	{\n}

// silent params..., limit, offset{\n}

		{\t}public static 
		{if finder.unique}{tableOrView.javaClassName} {else}List<{tableOrView.javaClassName}> {endif}
		{finder.name}Silent(
			{import classpath:/snippet/finder/method-parameters-limit-offset.templar}
		) {{{\n}

		{\t}{\t}return({finder.name}Silent(null 
			{import classpath:/snippet/finder/method-parameters-call-with-connection-limit-offset.templar}
		));{\n}


		{\t}}{\n}
	{\n}

		{\t}public static 
		{if finder.unique}{tableOrView.javaClassName} {else}List<{tableOrView.javaClassName}> {endif}
		{finder.name}Silent(
			{import classpath:/snippet/finder/method-parameters.templar}
		) {{{\n}

		{\t}{\t}return({finder.name}Silent(null
			{import classpath:/snippet/finder/method-parameters-call-with-connection.templar}
			, null, null
		));{\n}

		{\t}}{\n}
	{\n}

	{endif}
{endloop}

{-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

				THE BEAN CREATORS

 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --}

{\t}/**{\n}
{\t} * Return a unique result for the query - in effect just the first result of{\n}
{\t} * query.{\n}
{\t} * {\n}
{\t} * @param resultSet The result set of the query{\n}
{\t} * {\n}
{\t} * @return The {tableOrView.javaClassName} that represents this result{\n}
{\t} * {\n}
{\t} * @throws H2ZeroFinderException if no results were found{\n}
{\t} * @throws SQLException if there was a problem retrieving the results{\n}
{\t} */{\n}

{\t}private static {tableOrView.javaClassName} uniqueResult(ResultSet resultSet) throws H2ZeroFinderException, SQLException {{{\n}
{\t}{\t}if(resultSet.next()) {{{\n}
{\t}{\t}{\t}// we have a result{\n}
{loop tableOrView.populateFields as field}
	{\t}{\t}{\t}{field.javaType} {field.javaName} = ConnectionManager.getNullableResult{field.sqlJavaType}(resultSet, {fieldStatus.index});{\n}
{endloop}
{loop tableOrView.nonPopulateFields as field}
	{\t}{\t}{\t}{field.javaType} {field.javaName} = null;{\n}
{endloop}
{\n}
{\t}{\t}{\t}{tableOrView.javaClassName} {tableOrView.javaFieldName} = new {tableOrView.javaClassName}({loop tableOrView.fields as field}
{field.javaName}{if !fieldStatus.last}, {endif}
{endloop});{\n}
{\n}
{\t}{\t}{\t}if(resultSet.next()) {{{\n}
{\t}{\t}{\t}{\t}throw new H2ZeroFinderException("More than one result in resultset for unique finder.");{\n}
{\t}{\t}{\t}} else {{{\n}
{\t}{\t}{\t}{\t}return({tableOrView.javaFieldName});{\n}
{\t}{\t}{\t}}{\n}
{\t}{\t}} else {{{\n}
{\t}{\t}{\t}// could not get a result{\n}
{\t}{\t}{\t}return(null);{\n}
{\t}{\t}}{\n}
{\t}}{\n}
{\n}

{\t}/**{\n}
{\t} * Return the results as a list of {tableOrView.javaClassName}, this will be empty if{\n}
{\t} * none are found.{\n}
{\t} * {\n}
{\t} * @param resultSet the results as a list of {tableOrView.javaClassName}{\n}
{\t} * {\n}
{\t} * @return the list of results{\n}
{\t} * {\n}
{\t} * @throws SQLException if there was a problem retrieving the results{\n}
{\t} */{\n}

{\t}private static List<{tableOrView.javaClassName}> list(ResultSet resultSet) throws SQLException {{{\n}
{\t}{\t}List<{tableOrView.javaClassName}> arrayList = new ArrayList<{tableOrView.javaClassName}>();{\n}
{\t}{\t}while(resultSet.next()) {{{\n}

{set fn:length[table.nonPopulateFields] as nonPopulateFieldsLength}
{if fn:=[nonPopulateFieldsLength, '0']}
	{-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
		At this point we are looking at just a normal table that gets hydrated fully
	}

	{\t}{\t}{\t}arrayList.add(new {tableOrView.javaClassName}({\n}

	{loop tableOrView.fields as field}
			{\t}{\t}{\t}{\t}{\t}ConnectionManager.getNullableResult{field.sqlJavaType}(resultSet, {fieldStatus.index})
		{if !fieldStatus.last},{\n}{endif}
	{endloop}
	));{\n}
{else}
	{-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
		we have some fields that won't be hydrated

	}

	{loop tableOrView.populateFields as field}
			{\t}{\t}{\t}{field.javaType} {field.javaName} = ConnectionManager.getNullableResult{field.sqlJavaType}(resultSet, {fieldStatus.index});{\n}
	{endloop}
	{loop tableOrView.nonPopulateFields as field}
			{\t}{\t}{\t}{field.javaType} {field.javaName} = null;{\n}
	{endloop}
	{\t}{\t}{\t}{\t}{\t}arrayList.add(new {tableOrView.javaClassName}({\n}

	{loop tableOrView.fields as field}
		{\t}{\t}{\t}{\t}{\t}{field.javaName}{if !fieldStatus.last},{endif}{\n}
	{endloop}
	{\t}{\t}{\t}{\t}{\t}));{\n}

{endif}


{\t}{\t}}{\n}
{\t}{\t}return(arrayList);{\n}
{\t}}{\n}
{\n}

