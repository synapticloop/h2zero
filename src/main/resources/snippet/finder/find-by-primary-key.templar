{-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
				FIND BY PRIMARY KEY
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --}

{\t}/**{\n}
{\t} * <p>Create a UniqueFinder that can find a {tableOrView.javaClassName} by its primary key</p>{\n}
{\t} * {\n}
{\t} * <p>This will return a UniqueFinder, to execute the finder, either call</p>{\n}
{\t} * {\n}
{\t} * <ul>{\n}
{\t} *   <li><code>finder.execute();</code> to execute the finder with exceptions thrown</li>{\n}
{\t} *   <li><code>finder.executeSilent();</code> to execute the finder no exceptions (i.e. they are caught, swallowed and logged)</li>{\n}
{\t} * </ul>{\n}
{\t} * {\n}
{\t} * <p>You may also want to pass in a connection, in which case use the following:</p>{\n}
{\t} * {\n}
{\t} * <pre>{tableOrView.javaClassName}.findByPrimaryKey(primaryKey){\n}
{\t} *     .withConnection(connection){\n}
{\t} *     .execute();</pre>{\n}
{\t} * {\n}
{\t} * <p>You may also want to pass in a connection without exceptions being thrown,{\n}
{\t} * in which case use the following:</p>{\n}
{\t} * {\n}
{\t} * <pre>{tableOrView.javaClassName}.findByPrimaryKey(primaryKey){\n}
{\t} *     .withConnection(connection){\n}
{\t} *     .executeSilent();</pre>{\n}
{\t} * {\n}
{\t} * @param {primaryFieldJavaName} the primary key{\n}
{\t} * {\n}
{\t} * @return the parameterised UniqueFinder{\n}
{\t} */{\n}

{\t}public static UniqueFinder<{tableOrView.javaClassName}> findByPrimaryKey(Long {primaryFieldJavaName}) {{{\n}
{\t}{\t}return(new UniqueFinder<{tableOrView.javaClassName}>({\n}
{\t}{\t}{\t}{\t}LOGGER,{\n}
{\t}{\t}{\t}{\t}SQL_BUILTIN_FIND_BY_PRIMARY_KEY,{\n}
{\t}{\t}{\t}{\t}resultSet -> {{ try {{ return list(resultSet); } catch (SQLException e) {{ return(null); }},{\n}
{\t}{\t}{\t}{\t}{primaryFieldJavaName}{\n}
{\t}{\t}));{\n}
{\t}}{\n}
{\n}