{-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

				AND THE SELECT CLAUSE FINDERS

 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --}

{loop tableOrView.finders as finder}
	{if fn:notNull[finder.selectClause]}

		{--
			CONNECTION, PARAMS..., LIMIT, OFFSET
		}
		// SELECTBEAN - CONNECTION, PARAMS..., LIMIT, OFFSET{\n}
		{\t}public static 
		{if finder.unique}{table.javaClassName}{finder.tagName}Bean {else}List<{table.javaClassName}{finder.tagName}Bean> {endif}
		{finder.name}(Connection connection

			{import classpath:/snippet/finder/method-parameters-with-connection-limit-offset.templar}

		) throws H2ZeroFinderException, SQLException {{{\n}

		{\t}{\t}boolean hasConnection = (null != connection);{\n}
		{\t}{\t}if(!hasConnection) {{{\n}
		{\t}{\t}{\t}connection = ConnectionManager.getConnection();{\n}
		{\t}{\t}}{\n}
		{\n}
		{\t}{\t}String statement = null;{\n}
		{\n}
		{\t}{\t}// first find the statement that we want{\n}
		{\n}

		{-- 
			need to add in the correct cache keys for infields.... 

			this is a little more complex...  the cacheKey now becomes the values of:
			<limit>:<offset>:<num_args in list>:...
		}
		{\t}{\t}String cacheKey = limit + ":" + offset{if finder.hasInFields} + ":" + 
			{loop finder.inWhereFields as whereField}
				{whereField.javaName}List.size() + ":" {if !whereFieldStatus.last} + {endif}
			{endloop}{endif};{\n}

		{\t}{\t}if(!{finder.name}_limit_statement_cache.containsKey(cacheKey)) {{{\n}

		{\t}{\t}{\t}// place the cacheKey in the cache for later use{\n}
		{\n}

		{if finder.hasInFields}
			{\t}{\t}{\t}String preparedStatementTemp = SQL_{finder.staticName};{\n}
			{\t}{\t}{\t}StringBuilder whereFieldStringBuilder = null;{\n}
			{loop finder.whereFields as whereField}
				{if whereField.isInField}
					{\t}{\t}{\t}whereFieldStringBuilder = new StringBuilder();{\n}
					{\t}{\t}{\t}for(int i = 0; i < {whereField.javaName}List.size(); i++) {{{\n}
					{\t}{\t}{\t}{\t}if(i > 0) {{{\n}
					{\t}{\t}{\t}{\t}{\t}whereFieldStringBuilder.append(", ");{\n}
					{\t}{\t}{\t}{\t}}{\n}
					{\t}{\t}{\t}{\t}whereFieldStringBuilder.append("?");{\n}
					{\t}{\t}{\t}}{\n}

					{\t}{\t}{\t}preparedStatementTemp = SQL_{finder.staticName}.replaceFirst("\\.\\.\\.", whereFieldStringBuilder.toString());{\n}
				{endif}
			{endloop}
			{\t}{\t}{\t}StringBuilder stringBuilder = new StringBuilder(preparedStatementTemp);{\n}
		{else}
			{\t}{\t}{\t}StringBuilder stringBuilder = new StringBuilder(SQL_{finder.staticName});{\n}
		{endif}


		{\n}
		{\t}{\t}{\t}if(null != limit) {{{\n}
		{\t}{\t}{\t}{\t}stringBuilder.append(" limit ");{\n}
		{\t}{\t}{\t}{\t}stringBuilder.append(limit);{\n}
		{\t}{\t}{\t}{\t}if(null != offset) {{{\n}
		{\t}{\t}{\t}{\t}{\t}stringBuilder.append(" offset ");{\n}
		{\t}{\t}{\t}{\t}{\t}stringBuilder.append(offset);{\n}
		{\t}{\t}{\t}{\t}}{\n}
		{\t}{\t}{\t}}{\n}
		{\n}
		{\t}{\t}{\t}statement = stringBuilder.toString();{\n}
		{\t}{\t}{\t}{finder.name}_limit_statement_cache.put(cacheKey, statement);{\n}
		{\t}{\t}} else {{{\n}
		{\t}{\t}{\t}statement = {finder.name}_limit_statement_cache.get(cacheKey);{\n}
		{\t}{\t}}{\n}
		{\n}

		{\t}{\t}PreparedStatement preparedStatement = null;{\n}
		{\t}{\t}ResultSet resultSet = null;{\n}

		{\t}{\t}try {{{\n}

		{if finder.hasInFields}
			{\t}{\t}{\t}if({finder.name}_statement_cache.containsKey({loop finder.inWhereFields as whereField}
				{whereField.javaName}List.size() + ":" {if !whereFieldStatus.last} + {endif}
			{endloop})) {{{\n}

			{\t}{\t}{\t}{\t}preparedStatement = connection.prepareStatement({finder.name}_statement_cache.get(
			{loop finder.inWhereFields as whereField}
				{whereField.javaName}List.size() + ":" {if !whereFieldStatus.last} + {endif}
			{endloop}));{\n}
			{\t}{\t}{\t}} else {{{\n}

			{\t}{\t}{\t}{\t}String preparedStatementTemp = SQL_{finder.staticName};{\n}
			{\t}{\t}{\t}{\t}StringBuilder stringBuilder = null;{\n}
			{loop finder.whereFields as whereField}
				{if whereField.isInField}
					{\t}{\t}{\t}{\t}stringBuilder = new StringBuilder();{\n}
					{\t}{\t}{\t}{\t}for(int i = 0; i < {whereField.javaName}List.size(); i++) {{{\n}
					{\t}{\t}{\t}{\t}{\t}if(i > 0) {{{\n}
					{\t}{\t}{\t}{\t}{\t}{\t}stringBuilder.append(", ");{\n}
					{\t}{\t}{\t}{\t}{\t}}{\n}
					{\t}{\t}{\t}{\t}{\t}stringBuilder.append("?");{\n}
					{\t}{\t}{\t}{\t}}{\n}

					{\t}{\t}{\t}{\t}preparedStatementTemp = SQL_{finder.staticName}.replaceFirst("\\.\\.\\.", stringBuilder.toString());{\n}
				{endif}
			{endloop}
				{\t}{\t}{\t}{\t}{finder.name}_statement_cache.put({loop finder.inWhereFields as whereField}
				{whereField.javaName}List.size() + ":" {if !whereFieldStatus.last} + {endif}
			{endloop}, preparedStatementTemp);{\n}
				{\t}{\t}{\t}{\t}preparedStatement = connection.prepareStatement(preparedStatementTemp);{\n}
			{\t}{\t}{\t}}{\n}
		{else}
			{\t}{\t}{\t}preparedStatement = connection.prepareStatement(SQL_{finder.staticName});{\n}
		{endif}


			{if finder.hasInFields}
				{\t}{\t}{\t}int i = 1;{\n}
				{loop finder.whereFields as whereField}
					{if whereField.isInField}
						{\t}{\t}{\t}for ({whereField.javaType} {whereField.javaName}In : {whereField.javaName}List) {{{\n}
						{\t}{\t}{\t}{\t}ConnectionManager.set{whereField.upperType}(preparedStatement, i, {whereField.javaName}In);{\n}
						{\t}{\t}{\t}{\t}i++;{\n}
						{\t}{\t}{\t}}{\n}

					{else}
						{\t}{\t}{\t}ConnectionManager.set{whereField.upperType}(preparedStatement, i, {whereField.javaName});{\n}
						{\t}{\t}{\t}i++;{\n}
					{endif}
				{endloop}
			{else}
				{loop finder.whereFields as whereField}
					{\t}{\t}{\t}ConnectionManager.set{whereField.upperType}(preparedStatement, {whereFieldStatus.index}, {whereField.javaName});{\n}
				{endloop}
			{endif}

			{\n}
			{if finder.unique}
				{\t}{\t}{\t}resultSet = preparedStatement.executeQuery();{\n}
				{\t}{\t}{\t}{table.javaClassName}{finder.tagName}Bean result = unique{finder.tagName}BeanResult(resultSet);{\n}
				{\t}{\t}{\t}ConnectionManager.closeAll(resultSet, preparedStatement);{\n}
				{\t}{\t}{\t}return(result);{\n}
			{else}

				{\t}{\t}{\t}resultSet = preparedStatement.executeQuery();{\n}
				{\t}{\t}{\t}List<{table.javaClassName}{finder.tagName}Bean> results = list{finder.tagName}Bean(resultSet);{\n}

				{\t}{\t}{\t}return(results);{\n}
			{endif}
		{\t}{\t}} catch (SQLException sqlex) {{{\n}
		{\t}{\t}{\t}throw sqlex;{\n}

		{if finder.unique}
			{\t}{\t}} catch (H2ZeroFinderException h2zfex) {{{\n}
			{\t}{\t}{\t}throw h2zfex;{\n}
		{endif}

		{\t}{\t}} finally {{{\n}
		{\t}{\t}{\t}if(hasConnection) {{{\n}
		{\t}{\t}{\t}{\t}ConnectionManager.closeAll(resultSet, preparedStatement, null);{\n}
		{\t}{\t}{\t}} else {{{\n}
		{\t}{\t}{\t}{\t}ConnectionManager.closeAll(resultSet, preparedStatement, connection);{\n}
		{\t}{\t}{\t}}{\n}
		{\t}{\t}}{\n}
		{\n}
		{\t}}{\n}
	{\n}






		{--
			CONNECTION, PARAMS...
		}

		// SELECTBEAN - PARAMS..., LIMIT, OFFSET {\n}



		{\t}public static 
		{if finder.unique}{table.javaClassName}{finder.tagName}Bean {else}List<{table.javaClassName}{finder.tagName}Bean> {endif}
		{finder.name}(

			{import classpath:/snippet/finder/method-parameters-limit-offset.templar}

		) throws H2ZeroFinderException, SQLException {{{\n}

{\t}{\t}return({finder.name}(null
								{import classpath:/snippet/finder/method-parameters-call-with-connection-limit-offset.templar}
			));{\n}
{\t}}{\n}{\n}



		// SELECTBEAN - CONNECTION, PARAMS...{\n}

		{\t}public static 
		{if finder.unique}{table.javaClassName}{finder.tagName}Bean {else}List<{table.javaClassName}{finder.tagName}Bean> {endif}
		{finder.name}(Connection connection

			{import classpath:/snippet/finder/method-parameters-with-connection.templar}

		) throws H2ZeroFinderException, SQLException {{{\n}
{\t}{\t}return({finder.name}(null
					{import classpath:/snippet/finder/method-parameters-call-with-connection.templar}
					, null, null));{\n}
{\t}}{\n}{\n}




		// SELECTBEAN - PARAMS...{\n}

		{\t}public static 
		{if finder.unique}{table.javaClassName}{finder.tagName}Bean {else}List<{table.javaClassName}{finder.tagName}Bean> {endif}
		{finder.name}(

			{import classpath:/snippet/finder/method-parameters.templar}

		) throws H2ZeroFinderException, SQLException {{{\n}

{\t}{\t}return({finder.name}(null
					{import classpath:/snippet/finder/method-parameters-call-with-connection.templar}
					, null, null));{\n}
{\t}}{\n}{\n}







{--
	SILENT SELECTBEAN: CONNECTION, PARAMS..., LIMIT, OFFSET
}

// SILENT SELECTBEAN: CONNECTION, PARAMS..., LIMIT, OFFSET{\n}
		{\t}public static 
		{if finder.unique}{table.javaClassName}{finder.tagName}Bean {else}List<{table.javaClassName}{finder.tagName}Bean> {endif}
		{finder.name}Silent(Connection connection
			{import classpath:/snippet/finder/method-parameters-with-connection-limit-offset.templar}
		) {{{\n}

		{\t}{\t}try {{{\n}
		{\t}{\t}{\t}return({finder.name}(connection
			{import classpath:/snippet/finder/method-parameters-call-with-connection-limit-offset.templar}
		));{\n}
		{\t}{\t}} catch(H2ZeroFinderException h2zfex) {{{\n}

		{\t}{\t}{\t}if(LOGGER.isWarnEnabled()) {{{\n}
		{\t}{\t}{\t}{\t}LOGGER.warn("H2ZeroFinderException {finder.name}Silent(

			{import classpath:/snippet/finder/h2zero-exception-output-bean.templar}

		): " + h2zfex.getMessage());{\n}

		{\t}{\t}{\t}{\t}if(LOGGER.isDebugEnabled()) {{{\n}
		{\t}{\t}{\t}{\t}{\t}h2zfex.printStackTrace();{\n}
		{\t}{\t}{\t}{\t}}{\n}

		{\t}{\t}{\t}}{\n}

		{if finder.unique}
			{\t}{\t}{\t}return(null);{\n}
		{else}
			{\t}{\t}{\t}return(new ArrayList<{table.javaClassName}{finder.tagName}Bean>());{\n}
		{endif}

		{\t}{\t}} catch(SQLException sqlex) {{{\n}

		{\t}{\t}{\t}if(LOGGER.isWarnEnabled()) {{{\n}
		{\t}{\t}{\t}{\t}LOGGER.warn("SQLException {finder.name}Silent(

			{import classpath:/snippet/finder/h2zero-exception-output-bean.templar}

		): " + sqlex.getMessage());{\n}

		{\t}{\t}{\t}{\t}if(LOGGER.isDebugEnabled()) {{{\n}
		{\t}{\t}{\t}{\t}{\t}sqlex.printStackTrace();{\n}
		{\t}{\t}{\t}{\t}}{\n}

		{\t}{\t}{\t}}{\n}

		{if finder.unique}
			{\t}{\t}{\t}return(null);{\n}
		{else}
			{\t}{\t}{\t}return(new ArrayList<{table.javaClassName}{finder.tagName}Bean>());{\n}
		{endif}

		{\t}{\t}}{\n}

		{\t}}{\n}
	{\n}

		// CONNECTION, PARAMS...{\n}

		{\t}public static 
		{if finder.unique}{table.javaClassName}{finder.tagName}Bean {else}List<{table.javaClassName}{finder.tagName}Bean> {endif}
		{finder.name}Silent(Connection connection
			{import classpath:/snippet/finder/method-parameters-with-connection.templar}
		) {{{\n}

		{\t}{\t}return({finder.name}Silent(connection
			{import classpath:/snippet/finder/method-parameters-call-with-connection.templar}
			, null, null));{\n}

		{\t}}{\n}
	{\n}

		// PARAMS..., LIMIT, OFFSET{\n}

		{\t}public static 
		{if finder.unique}{table.javaClassName}{finder.tagName}Bean {else}List<{table.javaClassName}{finder.tagName}Bean> {endif}
		{finder.name}Silent(
			{import classpath:/snippet/finder/method-parameters-limit-offset.templar}
		) {{{\n}

		{\t}{\t}return({finder.name}Silent(null
			{import classpath:/snippet/finder/method-parameters-call-with-connection-limit-offset.templar}
			));{\n}

		{\t}}{\n}
	{\n}

		// PARAMS...{\n}

		{\t}public static 
		{if finder.unique}{table.javaClassName}{finder.tagName}Bean {else}List<{table.javaClassName}{finder.tagName}Bean> {endif}
		{finder.name}Silent(
			{import classpath:/snippet/finder/method-parameters.templar}
		) {{{\n}

		{\t}{\t}return({finder.name}Silent(null
			{import classpath:/snippet/finder/method-parameters-call-with-connection.templar}
			, null, null));{\n}

		{\t}}{\n}
	{\n}

	{endif}
{endloop}


{-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

				THE SELECT CLAUSE BEAN CREATOR

 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --}

{loop tableOrView.finders as finder}
	{if fn:notNull[finder.selectClause]}
		{if finder.unique}
			{\t}/**{\n}
			{\t} * Return a unique result for the {finder.name} query - in effect just the first result of{\n}
			{\t} * query.{\n}
			{\t} * {\n}
			{\t} * @param resultSet The result set of the query{\n}
			{\t} * {\n}
			{\t} * @return The {table.javaClassName}{finder.tagName}Beans that represents this result{\n}
			{\t} * {\n}
			{\t} * @throws H2ZeroFinderException if no results were found{\n}
			{\t} * @throws SQLException if there was a problem retrieving the results{\n}
			{\t} */{\n}

			{\t}private static {table.javaClassName}{finder.tagName}Bean unique{finder.tagName}BeanResult(ResultSet resultSet) throws H2ZeroFinderException, SQLException {{{\n}
			{\t}{\t}if(resultSet.first()) {{{\n}
			{\t}{\t}{\t}// we have a result{\n}

			{\t}{\t}{\t}return(new {table.javaClassName}{finder.tagName}Bean({\n}
			{loop finder.selectFields as selectField}
				{\t}{\t}{\t}{\t}{\t}resultSet.get{selectField.sqlJavaType}({selectFieldStatus.index})
				{if !selectFieldStatus.last},{\n}{endif}
			{endloop}
			));{\n}

			{\t}{\t}} else {{{\n}
			{\t}{\t}{\t}// could not get any results{\n}
			{\t}{\t}{\t}return(null);{\n}
			{\t}{\t}}{\n}
			{\t}}{\n}
			{\n}

		{else}

			{\t}/**{\n}
			{\t} * Return the results as a list of {table.javaClassName}{finder.tagName}Beans, this will be empty if{\n}
			{\t} * none are found.{\n}
			{\t} * {\n}
			{\t} * @param resultSet the results as a list of {table.javaClassName}{finder.tagName}Bean{\n}
			{\t} * {\n}
			{\t} * @return the list of results{\n}
			{\t} * {\n}
			{\t} * @throws SQLException if there was a problem retrieving the results{\n}
			{\t} */{\n}

			{\t}private static List<{table.javaClassName}{finder.tagName}Bean> list{finder.tagName}Bean(ResultSet resultSet) throws SQLException {{{\n}
			{\t}{\t}List<{table.javaClassName}{finder.tagName}Bean> arrayList = new ArrayList<{table.javaClassName}{finder.tagName}Bean>();{\n}
			{\t}{\t}while(resultSet.next()) {{{\n}

			{\t}{\t}{\t}arrayList.add(new {table.javaClassName}{finder.tagName}Bean({\n}

			{loop finder.selectFields as selectField}
				{\t}{\t}{\t}{\t}{\t}resultSet.get{selectField.sqlJavaType}({selectFieldStatus.index})
				{if !selectFieldStatus.last},{\n}{endif}
			{endloop}
			));{\n}

			{\t}{\t}}{\n}
			{\t}{\t}return(arrayList);{\n}
			{\t}}{\n}
			{\n}
		{endif}
	{endif}
{endloop}