{-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

				AND THE SELECT CLAUSE FINDERS

 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --}

{\t}/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *{\n}
{\t} * {\n}
{\t} * This is the start of the user defined select clause finders which are {\n}
{\t} * generated through the "finders" JSON key, with a 'selectClause' {\n}
{\t} * key on the finder.{\n}
{\t} * {\n}
{\t} * All selectClause finders return a subset of the data from a row of the {\n}
{\t} * database table (or tables if there is a join statement) as a generated{\n}
{\t} * bean{\n}
{\t} * {\n}
{\t} * There are {fn:length[tableOrView.finders]} defined finders on the {tableOrView.name} table, of those finders{\n}
{\t} * the following are the select clause finders:{\n}
{\t} * {\n}
{loop tableOrView.finders as finder}
	{if fn:notNull[finder.selectClause]}
{\t} * - {finder.name}{\n}
	{endif}
{endloop}
{\t} * {\n}
{\t} * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */{\n}{\n}

{loop tableOrView.finders as finder}
	{if fn:notNull[finder.selectClause]}

		{--
			CONNECTION, PARAMS..., LIMIT, OFFSET
		}
		{\t}public static {if finder.unique}UniqueFinder{else}MultiFinder{endif}<{table.javaClassName}{finder.tagName}Bean> {finder.name}(

			{import classpath:/snippet/finder/method-parameters.templar}

		) {{{\n}
{\t}{\t}return({\n}
{\t}{\t}{\t}{\t}new {if finder.unique}UniqueFinder{else}MultiFinder{endif}<{table.javaClassName}{finder.tagName}Bean>({\n}
{\t}{\t}{\t}{\t}LOGGER,{\n}
{\t}{\t}{\t}{\t}SQL_{finder.staticName},{\n}
{\t}{\t}{\t}{\t}resultSet -> {{ try {{return list{finder.tagName}Bean(resultSet);} catch (SQLException e) {{ return(null); }},{\n}
{\t}{\t}{\t}{\t}new Object[] {{
			{import classpath:/snippet/finder/method-parameters-call.templar}
}{\n}
{\t}{\t}));{\n}
{\t}}{\n}

	{endif}
{endloop}


{-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

				THE SELECT CLAUSE BEAN CREATOR

 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --}

{loop tableOrView.finders as finder}
	{if fn:notNull[finder.selectClause]}
			{\t}/**{\n}
			{\t} * Return the results as a list of {table.javaClassName}{finder.tagName}Beans, this will be empty if{\n}
			{\t} * none are found.{\n}
			{\t} * {\n}
			{\t} * @param resultSet the results as a list of {table.javaClassName}{finder.tagName}Bean{\n}
			{\t} * {\n}
			{\t} * @return the list of results{\n}
			{\t} * {\n}
			{\t} * @throws SQLException if there was a problem retrieving the results{\n}
			{\t} */{\n}

			{\t}private static List<{table.javaClassName}{finder.tagName}Bean> list{finder.tagName}Bean(ResultSet resultSet) throws SQLException {{{\n}
			{\t}{\t}List<{table.javaClassName}{finder.tagName}Bean> arrayList = new ArrayList<{table.javaClassName}{finder.tagName}Bean>();{\n}
			{\t}{\t}while(resultSet.next()) {{{\n}

			{\t}{\t}{\t}arrayList.add(new {table.javaClassName}{finder.tagName}Bean({\n}

			{loop finder.selectFields as selectField}
				{\t}{\t}{\t}{\t}{\t}resultSet.get{selectField.sqlJavaType}({selectFieldStatus.index})
				{if !selectFieldStatus.last},{\n}{endif}
			{endloop}
			));{\n}

			{\t}{\t}}{\n}
			{\t}{\t}return(arrayList);{\n}
			{\t}}{\n}
			{\n}
	{endif}
{endloop}