package {database.package}.test.deleter;{\n}{\n}

// - - - - thoughtfully generated by synapticloop h2zero - - - - {\n}
//    with the use of synapticloop templar templating language{\n}
//            (java/test/java-deleter-test.templar){\n}{\n}
{\n}
import static org.junit.Assert.*;{\n}
{\n}
import org.junit.Assert;{\n}
import org.junit.AfterClass;{\n}
import org.junit.BeforeClass;{\n}
import org.junit.Test;{\n}
import {database.package}.ConnectionManagerInitialiserOverride;{\n}
import com.synapticloop.h2zero.base.exception.H2ZeroFinderException;{\n}
import com.synapticloop.h2zero.base.manager.{options.database}.ConnectionManager;{\n}
import {database.package}.test.DatabaseSetupTest;{\n}{\n}
{\n}
import java.math.*;{\n}
import java.sql.Connection;{\n}
import java.sql.SQLException;{\n}
import java.sql.*;{\n}
import java.util.ArrayList;{\n}
import java.util.List;{\n}
{\n}
{\n}
{if !table.isConstant}
import {database.package}.deleter.{table.javaClassName}Deleter;{\n}
{endif}
{\n}
/**{\n}
 * WARNING NOTE: these tests are designed to test the generated SQL statements{\n}
 * __NOT__ whether the database actually returns sane results.{\n}
 */{\n}
{\n}
public class {table.javaClassName}Test extends DatabaseSetupTest {{{\n}
{\n}

{if !table.isConstant}
{\t}@Test{\n}
{\t}public void test{table.javaClassName}DeleteByPrimaryKey() throws SQLException {{{\n}
{\t}{\t}Assert.assertEquals(0, {table.javaClassName}Deleter.deleteByPrimaryKey(1L).execute());{\n}
{\t}}{\n}
{\n}

{\t}@Test{\n}
{\t}public void test{table.javaClassName}DeleteByPrimaryKeySilent() throws SQLException {{{\n}
{\t}{\t}Assert.assertEquals(0, {table.javaClassName}Deleter.deleteByPrimaryKey(1L).executeSilent());{\n}
{\t}}{\n}
{\n}

{\t}@Test{\n}
{\t}public void test{table.javaClassName}DeleteByPrimaryKeyWithConnection() throws SQLException {{{\n}
{\t}{\t}try (Connection connection = ConnectionManager.getConnection()) {{{\n}
{\t}{\t}{\t}Assert.assertEquals(0, {table.javaClassName}Deleter.deleteByPrimaryKey(1L).withConnection(connection).execute());{\n}
{\t}{\t}}{\n}
{\t}}{\n}
{\n}

{\t}@Test{\n}
{\t}public void test{table.javaClassName}DeleteByPrimaryKeyWithConnectionSilent() throws SQLException {{{\n}
{\t}{\t}try (Connection connection = ConnectionManager.getConnection()) {{{\n}
{\t}{\t}{\t}Assert.assertEquals(0, {table.javaClassName}Deleter.deleteByPrimaryKey(1L).withConnection(connection).executeSilent());{\n}
{\t}{\t}}{\n}
{\t}}{\n}
{\n}

{-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  The delete all deleters

  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -}


{\t}@Test{\n}
{\t}public void test{table.javaClassName}DeleteAll() throws SQLException {{{\n}
{\t}{\t}Assert.assertEquals(0, {table.javaClassName}Deleter.deleteAll().execute());{\n}
{\t}}{\n}
{\n}

{\t}@Test{\n}
{\t}public void test{table.javaClassName}DeleteAllSilent() throws SQLException {{{\n}
{\t}{\t}Assert.assertEquals(0, {table.javaClassName}Deleter.deleteAll().executeSilent());{\n}
{\t}}{\n}
{\n}

{\t}@Test{\n}
{\t}public void test{table.javaClassName}DeleteAllWithConnection() throws SQLException {{{\n}
{\t}{\t}try (Connection connection = ConnectionManager.getConnection()) {{{\n}
{\t}{\t}{\t}Assert.assertEquals(0, {table.javaClassName}Deleter.deleteAll().withConnection(connection).execute());{\n}
{\t}{\t}}{\n}
{\t}}{\n}
{\n}

{\t}@Test{\n}
{\t}public void test{table.javaClassName}DeleteAllWithConnectionSilent() throws SQLException {{{\n}
{\t}{\t}try (Connection connection = ConnectionManager.getConnection()) {{{\n}
{\t}{\t}{\t}Assert.assertEquals(0, {table.javaClassName}Deleter.deleteAll().withConnection(connection).executeSilent());{\n}
{\t}{\t}}{\n}
{\t}}{\n}
{\n}

{endif}

	{if !table.isConstant}
		{loop table.deleters as deleter}
{\t}@Test{\n}
{\t}public void test{table.javaClassName}{deleter.name}() throws SQLException {{{\n}
{\t}{\t}Assert.assertEquals(0, {table.javaClassName}Deleter.{deleter.name}({import classpath:/java/test/snippet/deleter-field-params.templar}).execute());{\n}
{\t}}{\n}
{\n}

{\t}@Test{\n}
{\t}public void test{table.javaClassName}{deleter.name}Silent() throws SQLException {{{\n}
{\t}{\t}Assert.assertEquals(0, {table.javaClassName}Deleter.{deleter.name}({import classpath:/java/test/snippet/deleter-field-params.templar}).executeSilent());{\n}
{\t}}{\n}
{\n}

{if fn:notEqual[options.database, "sqlite3"]}
{\t}@Test{\n}
{\t}public void test{table.javaClassName}{deleter.name}WithLimit() throws SQLException {{{\n}
{\t}{\t}Assert.assertEquals(0, {table.javaClassName}Deleter.{deleter.name}({import classpath:/java/test/snippet/deleter-field-params.templar}).withLimit(0).execute());{\n}
{\t}}{\n}
{\n}

{\t}@Test{\n}
{\t}public void test{table.javaClassName}{deleter.name}WithLimitSilent() throws SQLException {{{\n}
{\t}{\t}Assert.assertEquals(0, {table.javaClassName}Deleter.{deleter.name}({import classpath:/java/test/snippet/deleter-field-params.templar}).withLimit(0).executeSilent());{\n}
{\t}}{\n}
{\n}
{endif}


{\t}@Test{\n}
{\t}public void test{table.javaClassName}{deleter.name}WithConnection() throws SQLException {{{\n}
{\t}{\t}try (Connection connection = ConnectionManager.getConnection()){{{\n}
{\t}{\t}{\t}Assert.assertEquals(0, {table.javaClassName}Deleter.{deleter.name}({import classpath:/java/test/snippet/deleter-field-params.templar}).withConnection(connection).execute());{\n}
{\t}{\t}}{\n}
{\t}}{\n}
{\n}

{\t}@Test{\n}
{\t}public void test{table.javaClassName}{deleter.name}WithConnectionSilent() throws SQLException {{{\n}
{\t}{\t}try (Connection connection = ConnectionManager.getConnection()){{{\n}
{\t}{\t}{\t}Assert.assertEquals(0, {table.javaClassName}Deleter.{deleter.name}({import classpath:/java/test/snippet/deleter-field-params.templar}).withConnection(connection).executeSilent());{\n}
{\t}{\t}}{\n}
{\t}}{\n}
{\n}

{if fn:notEqual[options.database, "sqlite3"]}
{\t}@Test{\n}
{\t}public void test{table.javaClassName}{deleter.name}WithConnectionLimit() throws SQLException {{{\n}
{\t}{\t}try (Connection connection = ConnectionManager.getConnection()){{{\n}
{\t}{\t}{\t}Assert.assertEquals(0, {table.javaClassName}Deleter.{deleter.name}({import classpath:/java/test/snippet/deleter-field-params.templar}).withConnection(connection).withLimit(0).execute());{\n}
{\t}{\t}}{\n}
{\t}}{\n}
{\n}

{\t}@Test{\n}
{\t}public void test{table.javaClassName}{deleter.name}WithConnectionLimitSilent() throws SQLException {{{\n}
{\t}{\t}try (Connection connection = ConnectionManager.getConnection()){{{\n}
{\t}{\t}{\t}Assert.assertEquals(0, {table.javaClassName}Deleter.{deleter.name}({import classpath:/java/test/snippet/deleter-field-params.templar}).withConnection(connection).withLimit(0).execute());{\n}
{\t}{\t}}{\n}
{\t}}{\n}
{\n}
{endif}
	{endloop}
{endif}

}{\n}