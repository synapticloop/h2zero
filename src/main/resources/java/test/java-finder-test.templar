package {database.package}.test.finder;{\n}{\n}

// - - - - thoughtfully generated by synapticloop h2zero - - - - {\n}
//    with the use of synapticloop templar templating language{\n}
//            (java/test/java-finder-test.templar){\n}{\n}
{\n}
import static org.junit.Assert.*;{\n}
{\n}
import org.junit.Assert;{\n}
import org.junit.AfterClass;{\n}
import org.junit.BeforeClass;{\n}
import org.junit.Test;{\n}
import {database.package}.ConnectionManagerInitialiserOverride;{\n}
import com.synapticloop.h2zero.base.manager.{options.database}.ConnectionManager;{\n}
import {database.package}.test.DatabaseSetupTest;{\n}{\n}
{\n}
import java.sql.Connection;{\n}
import java.sql.SQLException;{\n}
import java.util.ArrayList;{\n}
import java.sql.*;{\n}
import java.util.List;{\n}
{\n}
{\n}
import {database.package}.finder.{table.javaClassName}Finder;{\n}
{\n}
/**{\n}
 * WARNING NOTE: these tests are designed to test the generated SQL statements{\n}
 * __NOT__ whether the database actually returns sane results.{\n}
 * {\n}
 * These will also test to ensure that connections are setting closed properly{\n}
 * so that there are no resource leakages.{\n}
 */{\n}
{\n}
public class {table.javaClassName}Test extends DatabaseSetupTest {{{\n}
{\n}

{\t}@Test{\n}
{\t}public void test{table.javaClassName}FindByPrimaryKey() throws SQLException {{{\n}
{\t}{\t}int numConnections = ConnectionManager.getComboPooledDataSource().getNumConnections();{\n}
{\t}{\t}int numBusyConnections = ConnectionManager.getComboPooledDataSource().getNumBusyConnections();{\n}
{\t}{\t}// this shouldn't find anything - and we don't care - only about SQLExceptions{\n}
{\t}{\t}{table.javaClassName}Finder.findByPrimaryKey(1L){\n}
{\t}{\t}{\t}{\t}.execute();{\n}
{\n}
{\t}{\t}Assert.assertEquals(numConnections, ConnectionManager.getComboPooledDataSource().getNumConnections());{\n}
{\t}{\t}// need to sleep to ensure that the connection has time to close - hacky... :({\n}
{\t}{\t}try {{ Thread.sleep(1); } catch (InterruptedException e) {{ /* do nothing */ }{\n}
{\t}{\t}Assert.assertEquals(numBusyConnections, ConnectionManager.getComboPooledDataSource().getNumBusyConnections());{\n}
{\t}}{\n}
{\n}

{--
  Constants may very well return a result...
}
{\t}@Test{\n}
{\t}public void test{table.javaClassName}FindByPrimaryKeySilent() throws SQLException {{{\n}
{\t}{\t}int numConnections = ConnectionManager.getComboPooledDataSource().getNumConnections();{\n}
{\t}{\t}int numBusyConnections = ConnectionManager.getComboPooledDataSource().getNumBusyConnections();{\n}
{\t}{\t}Assert.assertNull({table.javaClassName}Finder.findByPrimaryKey(-831486134981L){\n}
{\t}{\t}{\t}{\t}.executeSilent());{\n}
{\n}
{\t}{\t}Assert.assertEquals(numConnections, ConnectionManager.getComboPooledDataSource().getNumConnections());{\n}
{\t}{\t}// need to sleep to ensure that the connection has time to close - hacky... :({\n}
{\t}{\t}try {{ Thread.sleep(1); } catch (InterruptedException e) {{ /* do nothing */ }{\n}
{\t}{\t}Assert.assertEquals(numBusyConnections, ConnectionManager.getComboPooledDataSource().getNumBusyConnections());{\n}
{\t}}{\n}
{\n}

{\t}@Test{\n}
{\t}public void test{table.javaClassName}FindByPrimaryKeyWithConnection() throws SQLException {{{\n}
{\t}{\t}int numConnections = ConnectionManager.getComboPooledDataSource().getNumConnections();{\n}
{\t}{\t}int numBusyConnections = ConnectionManager.getComboPooledDataSource().getNumBusyConnections();{\n}
{\t}{\t}try (Connection connection = ConnectionManager.getConnection()) {{{\n}
{\t}{\t}{\t}{table.javaClassName}Finder.findByPrimaryKey(1L){\n}
{\t}{\t}{\t}{\t}.withConnection(connection){\n}
{\t}{\t}{\t}{\t}.execute();{\n}
{\n}
{\t}{\t}}{\n}
{\t}{\t}Assert.assertEquals(numConnections, ConnectionManager.getComboPooledDataSource().getNumConnections());{\n}
{\t}{\t}// need to sleep to ensure that the connection has time to close - hacky... :({\n}
{\t}{\t}try {{ Thread.sleep(1); } catch (InterruptedException e) {{ /* do nothing */ }{\n}
{\t}{\t}Assert.assertEquals(numBusyConnections, ConnectionManager.getComboPooledDataSource().getNumBusyConnections());{\n}
{\t}}{\n}
{\n}

{\t}@Test{\n}
{\t}public void test{table.javaClassName}FindByPrimaryKeyWithConnectionSilent() throws SQLException {{{\n}
{\t}{\t}int numConnections = ConnectionManager.getComboPooledDataSource().getNumConnections();{\n}
{\t}{\t}int numBusyConnections = ConnectionManager.getComboPooledDataSource().getNumBusyConnections();{\n}
{\t}{\t}try (Connection connection = ConnectionManager.getConnection()) {{{\n}
{\t}{\t}{\t}Assert.assertNull({table.javaClassName}Finder.findByPrimaryKey(-831486134981L){\n}
{\t}{\t}{\t}{\t}.withConnection(connection){\n}
{\t}{\t}{\t}{\t}.executeSilent());{\n}
{\n}
{\t}{\t}}{\n}
{\t}{\t}Assert.assertEquals(numConnections, ConnectionManager.getComboPooledDataSource().getNumConnections());{\n}
{\t}{\t}// need to sleep to ensure that the connection has time to close - hacky... :({\n}
{\t}{\t}try {{ Thread.sleep(1); } catch (InterruptedException e) {{ /* do nothing */ }{\n}
{\t}{\t}Assert.assertEquals(numBusyConnections, ConnectionManager.getComboPooledDataSource().getNumBusyConnections());{\n}
{\t}}{\n}
{\n}

{-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

	FIND ALL TESTING METHODS

  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -}

{\t}@Test{\n}
{\t}public void test{table.javaClassName}FindAll() throws SQLException {{{\n}
{\t}{\t}int numConnections = ConnectionManager.getComboPooledDataSource().getNumConnections();{\n}
{\t}{\t}int numBusyConnections = ConnectionManager.getComboPooledDataSource().getNumBusyConnections();{\n}

{if table.isConstant}
{\t}{\t}Assert.assertEquals({table.constants.size}, {table.javaClassName}Finder.findAll(){\n}
{\t}{\t}{\t}{\t}.execute(){\n}
{\t}{\t}{\t}{\t}.size());{\n}
{else}
{\t}{\t}Assert.assertEquals(0, {table.javaClassName}Finder.findAll(){\n}
{\t}{\t}{\t}{\t}.execute(){\n}
{\t}{\t}{\t}{\t}.size());{\n}
{endif}
{\n}
{\t}{\t}Assert.assertEquals(numConnections, ConnectionManager.getComboPooledDataSource().getNumConnections());{\n}
{\t}{\t}// need to sleep to ensure that the connection has time to close - hacky... :({\n}
{\t}{\t}try {{ Thread.sleep(1); } catch (InterruptedException e) {{ /* do nothing */ }{\n}
{\t}{\t}Assert.assertEquals(numBusyConnections, ConnectionManager.getComboPooledDataSource().getNumBusyConnections());{\n}
{\t}}{\n}
{\n}


{\t}@Test{\n}
{\t}public void test{table.javaClassName}FindAllLimitOffset() throws SQLException {{{\n}
{\t}{\t}int numConnections = ConnectionManager.getComboPooledDataSource().getNumConnections();{\n}
{\t}{\t}int numBusyConnections = ConnectionManager.getComboPooledDataSource().getNumBusyConnections();{\n}

{if table.isConstant}
{\t}{\t}Assert.assertEquals(1, {table.javaClassName}Finder.findAll(){\n}
{\t}{\t}{\t}.withLimit(1){\n}
{\t}{\t}{\t}.withOffset(0){\n}
{\t}{\t}{\t}.execute(){\n}
{\t}{\t}{\t}.size());{\n}
{else}
{\t}{\t}Assert.assertEquals(0, {table.javaClassName}Finder.findAll(){\n}
{\t}{\t}{\t}.withLimit(1){\n}
{\t}{\t}{\t}.withOffset(0){\n}
{\t}{\t}{\t}.execute(){\n}
{\t}{\t}{\t}.size());{\n}
{endif}

{\t}{\t}Assert.assertEquals(numConnections, ConnectionManager.getComboPooledDataSource().getNumConnections());{\n}
{\t}{\t}// need to sleep to ensure that the connection has time to close - hacky... :({\n}
{\t}{\t}try {{ Thread.sleep(1); } catch (InterruptedException e) {{ /* do nothing */ }{\n}
{\t}{\t}Assert.assertEquals(numBusyConnections, ConnectionManager.getComboPooledDataSource().getNumBusyConnections());{\n}
{\t}}{\n}
{\n}



{\t}@Test{\n}
{\t}public void test{table.javaClassName}FindAllSilent() throws SQLException {{{\n}
{\t}{\t}int numConnections = ConnectionManager.getComboPooledDataSource().getNumConnections();{\n}
{\t}{\t}int numBusyConnections = ConnectionManager.getComboPooledDataSource().getNumBusyConnections();{\n}

{if table.isConstant}
{\t}{\t}Assert.assertEquals({table.constants.size}, {table.javaClassName}Finder.findAll(){\n}
{\t}{\t}{\t}{\t}.executeSilent(){\n}
{\t}{\t}{\t}{\t}.size());{\n}
{else}
{\t}{\t}Assert.assertEquals(0, {table.javaClassName}Finder.findAll(){\n}
{\t}{\t}{\t}{\t}.executeSilent(){\n}
{\t}{\t}{\t}{\t}.size());{\n}
{endif}
{\n}

{\t}{\t}Assert.assertEquals(numConnections, ConnectionManager.getComboPooledDataSource().getNumConnections());{\n}
{\t}{\t}// need to sleep to ensure that the connection has time to close - hacky... :({\n}
{\t}{\t}try {{ Thread.sleep(1); } catch (InterruptedException e) {{ /* do nothing */ }{\n}
{\t}{\t}Assert.assertEquals(numBusyConnections, ConnectionManager.getComboPooledDataSource().getNumBusyConnections());{\n}
{\t}}{\n}
{\n}


{\t}@Test{\n}
{\t}public void test{table.javaClassName}FindAllLimitOffsetSilent() throws SQLException {{{\n}
{\t}{\t}int numConnections = ConnectionManager.getComboPooledDataSource().getNumConnections();{\n}
{\t}{\t}int numBusyConnections = ConnectionManager.getComboPooledDataSource().getNumBusyConnections();{\n}

{if table.isConstant}
{\t}{\t}Assert.assertEquals(1, {table.javaClassName}Finder.findAll(){\n}
{\t}{\t}{\t}{\t}.withLimit(1){\n}
{\t}{\t}{\t}{\t}.withOffset(0){\n}
{\t}{\t}{\t}{\t}.executeSilent(){\n}
{\t}{\t}{\t}{\t}.size());{\n}
{else}
{\t}{\t}Assert.assertEquals(0, {table.javaClassName}Finder.findAll(){\n}
{\t}{\t}{\t}{\t}.withLimit(1){\n}
{\t}{\t}{\t}{\t}.withOffset(0){\n}
{\t}{\t}{\t}{\t}.executeSilent(){\n}
{\t}{\t}{\t}{\t}.size());{\n}
{endif}

{\n}

{\t}{\t}Assert.assertEquals(numConnections, ConnectionManager.getComboPooledDataSource().getNumConnections());{\n}
{\t}{\t}// need to sleep to ensure that the connection has time to close - hacky... :({\n}
{\t}{\t}try {{ Thread.sleep(1); } catch (InterruptedException e) {{ /* do nothing */ }{\n}
{\t}{\t}Assert.assertEquals(numBusyConnections, ConnectionManager.getComboPooledDataSource().getNumBusyConnections());{\n}
{\t}}{\n}
{\n}


{\t}@Test{\n}
{\t}public void test{table.javaClassName}FindAllWithConnection() throws SQLException {{{\n}
{\t}{\t}int numConnections = ConnectionManager.getComboPooledDataSource().getNumConnections();{\n}
{\t}{\t}int numBusyConnections = ConnectionManager.getComboPooledDataSource().getNumBusyConnections();{\n}
{\t}{\t}try (Connection connection = ConnectionManager.getConnection()) {{{\n}

{if table.isConstant}
{\t}{\t}{\t}Assert.assertEquals({table.constants.size}, {table.javaClassName}Finder.findAll(){\n}
{\t}{\t}{\t}{\t}.withConnection(connection){\n}
{\t}{\t}{\t}{\t}.execute(){\n}
{\t}{\t}{\t}{\t}.size());{\n}
{else}
{\t}{\t}{\t}Assert.assertEquals(0, {table.javaClassName}Finder.findAll(){\n}
{\t}{\t}{\t}{\t}.withConnection(connection){\n}
{\t}{\t}{\t}{\t}.execute(){\n}
{\t}{\t}{\t}{\t}.size());{\n}
{endif}
{\n}
{\t}{\t}}{\n}

{\t}{\t}Assert.assertEquals(numConnections, ConnectionManager.getComboPooledDataSource().getNumConnections());{\n}
{\t}{\t}// need to sleep to ensure that the connection has time to close - hacky... :({\n}
{\t}{\t}try {{ Thread.sleep(1); } catch (InterruptedException e) {{ /* do nothing */ }{\n}
{\t}{\t}Assert.assertEquals(numBusyConnections, ConnectionManager.getComboPooledDataSource().getNumBusyConnections());{\n}
{\t}}{\n}

{\n}

{\t}@Test{\n}
{\t}public void test{table.javaClassName}FindAllWithConnectionSilent() throws SQLException {{{\n}
{\t}{\t}int numConnections = ConnectionManager.getComboPooledDataSource().getNumConnections();{\n}
{\t}{\t}int numBusyConnections = ConnectionManager.getComboPooledDataSource().getNumBusyConnections();{\n}
{\t}{\t}try (Connection connection = ConnectionManager.getConnection()) {{{\n}

{if table.isConstant}
{\t}{\t}{\t}Assert.assertEquals({table.constants.size}, {table.javaClassName}Finder.findAll(){\n}
{\t}{\t}{\t}{\t}.withConnection(connection){\n}
{\t}{\t}{\t}{\t}.executeSilent(){\n}
{\t}{\t}{\t}{\t}.size());{\n}
{else}
{\t}{\t}{\t}Assert.assertEquals(0, {table.javaClassName}Finder.findAll(){\n}
{\t}{\t}{\t}{\t}.withConnection(connection){\n}
{\t}{\t}{\t}{\t}.executeSilent(){\n}
{\t}{\t}{\t}{\t}.size());{\n}
{endif}
{\n}
{\t}{\t}}{\n}

{\t}{\t}Assert.assertEquals(numConnections, ConnectionManager.getComboPooledDataSource().getNumConnections());{\n}
{\t}{\t}// need to sleep to ensure that the connection has time to close - hacky... :({\n}
{\t}{\t}try {{ Thread.sleep(1); } catch (InterruptedException e) {{ /* do nothing */ }{\n}
{\t}{\t}Assert.assertEquals(numBusyConnections, ConnectionManager.getComboPooledDataSource().getNumBusyConnections());{\n}
{\t}}{\n}

{\n}



{\t}@Test{\n}
{\t}public void test{table.javaClassName}FindAllWithConnectionLimit() throws SQLException {{{\n}
{\t}{\t}int numConnections = ConnectionManager.getComboPooledDataSource().getNumConnections();{\n}
{\t}{\t}int numBusyConnections = ConnectionManager.getComboPooledDataSource().getNumBusyConnections();{\n}
{\t}{\t}try (Connection connection = ConnectionManager.getConnection()) {{{\n}

{if table.isConstant}
{\t}{\t}{\t}Assert.assertEquals(1, {table.javaClassName}Finder.findAll(){\n}
{\t}{\t}{\t}{\t}.withConnection(connection){\n}
{\t}{\t}{\t}{\t}.withLimit(1){\n}
{\t}{\t}{\t}{\t}.withOffset(0){\n}
{\t}{\t}{\t}{\t}.execute(){\n}
{\t}{\t}{\t}{\t}.size());{\n}
{else}
{\t}{\t}{\t}{table.javaClassName}Finder.findAll().withConnection(connection){\n}
{\t}{\t}{\t}{\t}.withLimit(1){\n}
{\t}{\t}{\t}{\t}.withOffset(0){\n}
{\t}{\t}{\t}{\t}.execute();{\n}
{endif}
{\t}{\t}}{\n}
{\n}
{\t}{\t}Assert.assertEquals(numConnections, ConnectionManager.getComboPooledDataSource().getNumConnections());{\n}
{\t}{\t}// need to sleep to ensure that the connection has time to close - hacky... :({\n}
{\t}{\t}try {{ Thread.sleep(1); } catch (InterruptedException e) {{ /* do nothing */ }{\n}
{\t}{\t}Assert.assertEquals(numBusyConnections, ConnectionManager.getComboPooledDataSource().getNumBusyConnections());{\n}
{\t}}{\n}

{\n}

{\t}@Test{\n}
{\t}public void test{table.javaClassName}FindAllWithConnectionLimitSilent() throws SQLException {{{\n}
{\t}{\t}int numConnections = ConnectionManager.getComboPooledDataSource().getNumConnections();{\n}
{\t}{\t}int numBusyConnections = ConnectionManager.getComboPooledDataSource().getNumBusyConnections();{\n}
{\t}{\t}try (Connection connection = ConnectionManager.getConnection()) {{{\n}

{if table.isConstant}
{\t}{\t}{\t}Assert.assertEquals(1, {table.javaClassName}Finder.findAll(){\n}
{\t}{\t}{\t}{\t}.withConnection(connection){\n}
{\t}{\t}{\t}{\t}.withLimit(1){\n}
{\t}{\t}{\t}{\t}.withOffset(0){\n}
{\t}{\t}{\t}{\t}.executeSilent(){\n}
{\t}{\t}{\t}{\t}.size());{\n}
{else}
{\t}{\t}{\t}Assert.assertEquals(0, {table.javaClassName}Finder.findAll(){\n}
{\t}{\t}{\t}{\t}.withConnection(connection){\n}
{\t}{\t}{\t}{\t}.withLimit(1){\n}
{\t}{\t}{\t}{\t}.withOffset(0){\n}
{\t}{\t}{\t}{\t}.executeSilent(){\n}
{\t}{\t}{\t}{\t}.size());{\n}
{endif}

{\t}{\t}}{\n}
{\n}
{\t}{\t}Assert.assertEquals(numConnections, ConnectionManager.getComboPooledDataSource().getNumConnections());{\n}
{\t}{\t}// need to sleep to ensure that the connection has time to close - hacky... :({\n}
{\t}{\t}try {{ Thread.sleep(1); } catch (InterruptedException e) {{ /* do nothing */ }{\n}
{\t}{\t}Assert.assertEquals(numBusyConnections, ConnectionManager.getComboPooledDataSource().getNumBusyConnections());{\n}
{\t}}{\n}

{\n}




{\t}@Test{\n}
{\t}public void test{table.javaClassName}FindAllWithConnectionOffset() throws SQLException {{{\n}
{\t}{\t}int numConnections = ConnectionManager.getComboPooledDataSource().getNumConnections();{\n}
{\t}{\t}int numBusyConnections = ConnectionManager.getComboPooledDataSource().getNumBusyConnections();{\n}
{\t}{\t}try (Connection connection = ConnectionManager.getConnection()) {{{\n}

{if table.isConstant}
{\t}{\t}{\t}Assert.assertEquals({table.constants.size}, {table.javaClassName}Finder.findAll(){\n}
{\t}{\t}{\t}{\t}.withConnection(connection){\n}
{\t}{\t}{\t}{\t}.withLimit(null){\n}
{\t}{\t}{\t}{\t}.withOffset(1){\n}
{\t}{\t}{\t}{\t}.execute(){\n}
{\t}{\t}{\t}{\t}.size());{\n}
{else}
{\t}{\t}{\t}{table.javaClassName}Finder.findAll(){\n}
{\t}{\t}{\t}{\t}.withConnection(connection){\n}
{\t}{\t}{\t}{\t}.withLimit(null){\n}
{\t}{\t}{\t}{\t}.withOffset(1){\n}
{\t}{\t}{\t}{\t}.execute();{\n}
{endif}

{\t}{\t}{\t}Assert.fail("A SQL Exception should have been thrown as there was an offset without a limit set.");

{\t}{\t}} catch(SQLException ignored) {{{\n}
{\t}{\t}}
{\t}{\t}Assert.assertEquals(numConnections, ConnectionManager.getComboPooledDataSource().getNumConnections());{\n}
{\t}{\t}// need to sleep to ensure that the connection has time to close - hacky... :({\n}
{\t}{\t}try {{ Thread.sleep(1); } catch (InterruptedException e) {{ /* do nothing */ }{\n}
{\t}{\t}Assert.assertEquals(numBusyConnections, ConnectionManager.getComboPooledDataSource().getNumBusyConnections());{\n}
{\t}}{\n}

{\n}

{\t}@Test{\n}
{\t}public void test{table.javaClassName}FindAllWithConnectionOffsetSilent() throws SQLException {{{\n}
{\t}{\t}int numConnections = ConnectionManager.getComboPooledDataSource().getNumConnections();{\n}
{\t}{\t}int numBusyConnections = ConnectionManager.getComboPooledDataSource().getNumBusyConnections();{\n}
{\t}{\t}try (Connection connection = ConnectionManager.getConnection()) {{{\n}

{\t}{\t}{\t}{table.javaClassName}Finder.findAll(){\n}
{\t}{\t}{\t}{\t}.withConnection(connection){\n}
{\t}{\t}{\t}{\t}.withLimit(null){\n}
{\t}{\t}{\t}{\t}.withOffset(0){\n}
{\t}{\t}{\t}{\t}.executeSilent();{\n}
{\n}
{\t}{\t}}{\n}
{\t}{\t}Assert.assertEquals(numConnections, ConnectionManager.getComboPooledDataSource().getNumConnections());{\n}
{\t}{\t}// need to sleep to ensure that the connection has time to close - hacky... :({\n}
{\t}{\t}try {{ Thread.sleep(1); } catch (InterruptedException e) {{ /* do nothing */ }{\n}
{\t}{\t}Assert.assertEquals(numBusyConnections, ConnectionManager.getComboPooledDataSource().getNumBusyConnections());{\n}
{\t}}{\n}

{\n}


{\t}@Test{\n}
{\t}public void test{table.javaClassName}FindAllWithConnectionLimitOffset() throws SQLException {{{\n}
{\t}{\t}int numConnections = ConnectionManager.getComboPooledDataSource().getNumConnections();{\n}
{\t}{\t}int numBusyConnections = ConnectionManager.getComboPooledDataSource().getNumBusyConnections();{\n}
{\t}{\t}try (Connection connection = ConnectionManager.getConnection()) {{{\n}

{if table.isConstant}
{\t}{\t}{\t}Assert.assertEquals(1, {table.javaClassName}Finder.findAll(){\n}
{\t}{\t}{\t}{\t}.withConnection(connection){\n}
{\t}{\t}{\t}{\t}.withLimit(1){\n}
{\t}{\t}{\t}{\t}.withOffset(0){\n}
{\t}{\t}{\t}{\t}.execute(){\n}
{\t}{\t}{\t}{\t}.size());{\n}

{else}
{\t}{\t}{\t}{table.javaClassName}Finder.findAll(){\n}
{\t}{\t}{\t}{\t}.withConnection(connection){\n}
{\t}{\t}{\t}{\t}.withLimit(1){\n}
{\t}{\t}{\t}{\t}.withOffset(0){\n}
{\t}{\t}{\t}{\t}.execute();{\n}
{endif}

{\t}{\t}}{\n}
{\t}{\t}Assert.assertEquals(numConnections, ConnectionManager.getComboPooledDataSource().getNumConnections());{\n}
{\t}{\t}// need to sleep to ensure that the connection has time to close - hacky... :({\n}
{\t}{\t}try {{ Thread.sleep(1); } catch (InterruptedException e) {{ /* do nothing */ }{\n}
{\t}{\t}Assert.assertEquals(numBusyConnections, ConnectionManager.getComboPooledDataSource().getNumBusyConnections());{\n}
{\t}}{\n}

{\n}

{\t}@Test{\n}
{\t}public void test{table.javaClassName}FindAllWithNullConnectionLimitOffset() throws SQLException {{{\n}
{\t}{\t}int numConnections = ConnectionManager.getComboPooledDataSource().getNumConnections();{\n}
{\t}{\t}int numBusyConnections = ConnectionManager.getComboPooledDataSource().getNumBusyConnections();{\n}
{if table.isConstant}
{\t}{\t}Assert.assertEquals(1, {table.javaClassName}Finder.findAll(){\n}
{\t}{\t}{\t}{\t}.withConnection(null){\n}
{\t}{\t}{\t}{\t}.withLimit(1){\n}
{\t}{\t}{\t}{\t}.withOffset(0){\n}
{\t}{\t}{\t}{\t}.execute(){\n}
{\t}{\t}{\t}{\t}.size());{\n}
{else}
{\t}{\t}{table.javaClassName}Finder.findAll(){\n}
{\t}{\t}{\t}{\t}.withConnection(null){\n}
{\t}{\t}{\t}{\t}.withLimit(1){\n}
{\t}{\t}{\t}{\t}.withOffset(0){\n}
{\t}{\t}{\t}{\t}.execute();{\n}
{endif}
{\n}
{\t}{\t}Assert.assertEquals(numConnections, ConnectionManager.getComboPooledDataSource().getNumConnections());{\n}
{\t}{\t}// need to sleep to ensure that the connection has time to close - hacky... :({\n}
{\t}{\t}try {{ Thread.sleep(1); } catch (InterruptedException e) {{ /* do nothing */ }{\n}
{\t}{\t}Assert.assertEquals(numBusyConnections, ConnectionManager.getComboPooledDataSource().getNumBusyConnections());{\n}
{\t}}{\n}

{\n}


{-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

	Now for the user finders

  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -}
{loop table.finders as finder}

{\t}@Test{\n}
{\t}public void test{table.javaClassName}{finder.name}() throws SQLException {{{\n}
{\t}{\t}int numConnections = ConnectionManager.getComboPooledDataSource().getNumConnections();{\n}
{\t}{\t}int numBusyConnections = ConnectionManager.getComboPooledDataSource().getNumBusyConnections();{\n}
{\t}{\t}{table.javaClassName}Finder.{finder.name}({import classpath:/java/test/snippet/finder-field-params.templar}).execute();{\n}
{\t}{\t}Assert.assertEquals(numConnections, ConnectionManager.getComboPooledDataSource().getNumConnections());{\n}
{\t}{\t}// need to sleep to ensure that the connection has time to close - hacky... :({\n}
{\t}{\t}try {{ Thread.sleep(1); } catch (InterruptedException e) {{ /* do nothing */ }{\n}
{\t}{\t}Assert.assertEquals(numBusyConnections, ConnectionManager.getComboPooledDataSource().getNumBusyConnections());{\n}
{\t}}{\n}
{\n}


{\t}@Test{\n}
{\t}public void test{table.javaClassName}{finder.name}Silent() throws SQLException {{{\n}
{\t}{\t}int numConnections = ConnectionManager.getComboPooledDataSource().getNumConnections();{\n}
{\t}{\t}int numBusyConnections = ConnectionManager.getComboPooledDataSource().getNumBusyConnections();{\n}
{\t}{\t}{table.javaClassName}Finder.{finder.name}({import classpath:/java/test/snippet/finder-field-params.templar}).executeSilent();{\n}
{\t}{\t}Assert.assertEquals(numConnections, ConnectionManager.getComboPooledDataSource().getNumConnections());{\n}
{\t}{\t}// need to sleep to ensure that the connection has time to close - hacky... :({\n}
{\t}{\t}try {{ Thread.sleep(1); } catch (InterruptedException e) {{ /* do nothing */ }{\n}
{\t}{\t}Assert.assertEquals(numBusyConnections, ConnectionManager.getComboPooledDataSource().getNumBusyConnections());{\n}
{\t}}{\n}
{\n}


{if !finder.unique}
{-- UNIQUE FINDERS DO NOT HAVE LIMITS/OFFSET }
{\t}@Test{\n}
{\t}public void test{table.javaClassName}{finder.name}LimitOffset() throws SQLException {{{\n}
{\t}{\t}int numConnections = ConnectionManager.getComboPooledDataSource().getNumConnections();{\n}
{\t}{\t}int numBusyConnections = ConnectionManager.getComboPooledDataSource().getNumBusyConnections();{\n}
{\t}{\t}{table.javaClassName}Finder.{finder.name}({import classpath:/java/test/snippet/finder-field-params.templar}){\n}
{\t}{\t}{\t}{\t}.withLimit(0){\n}
{\t}{\t}{\t}{\t}.withOffset(0){\n}
{\t}{\t}{\t}{\t}.execute();{\n}
{\n}
{\t}{\t}Assert.assertEquals(numConnections, ConnectionManager.getComboPooledDataSource().getNumConnections());{\n}
{\t}{\t}// need to sleep to ensure that the connection has time to close - hacky... :({\n}
{\t}{\t}try {{ Thread.sleep(1); } catch (InterruptedException e) {{ /* do nothing */ }{\n}
{\t}{\t}Assert.assertEquals(numBusyConnections, ConnectionManager.getComboPooledDataSource().getNumBusyConnections());{\n}
{\t}}{\n}
{\n}


{\t}@Test{\n}
{\t}public void test{table.javaClassName}{finder.name}LimitOffsetSilent() throws SQLException {{{\n}
{\t}{\t}int numConnections = ConnectionManager.getComboPooledDataSource().getNumConnections();{\n}
{\t}{\t}int numBusyConnections = ConnectionManager.getComboPooledDataSource().getNumBusyConnections();{\n}
{\t}{\t}{table.javaClassName}Finder.{finder.name}({import classpath:/java/test/snippet/finder-field-params.templar}){\n}
{\t}{\t}{\t}{\t}.withLimit(0){\n}
{\t}{\t}{\t}{\t}.withOffset(0){\n}
{\t}{\t}{\t}{\t}.executeSilent();{\n}
{\n}
{\t}{\t}Assert.assertEquals(numConnections, ConnectionManager.getComboPooledDataSource().getNumConnections());{\n}
{\t}{\t}// need to sleep to ensure that the connection has time to close - hacky... :({\n}
{\t}{\t}try {{ Thread.sleep(1); } catch (InterruptedException e) {{ /* do nothing */ }{\n}
{\t}{\t}Assert.assertEquals(numBusyConnections, ConnectionManager.getComboPooledDataSource().getNumBusyConnections());{\n}
{\t}}{\n}
{\n}

{endif}


{\t}@Test{\n}
{\t}public void test{table.javaClassName}{finder.name}WithConnection() throws SQLException {{{\n}
{\t}{\t}int numConnections = ConnectionManager.getComboPooledDataSource().getNumConnections();{\n}
{\t}{\t}int numBusyConnections = ConnectionManager.getComboPooledDataSource().getNumBusyConnections();{\n}
{\t}{\t}try (Connection connection = ConnectionManager.getConnection()) {{{\n}
{\t}{\t}{\t}{table.javaClassName}Finder.{finder.name}({import classpath:/java/test/snippet/finder-field-params.templar}){\n}
{\t}{\t}{\t}{\t}.withConnection(connection){\n}
{\t}{\t}{\t}{\t}.execute();{\n}
{\n}
{\t}{\t}}{\n}
{\t}{\t}Assert.assertEquals(numConnections, ConnectionManager.getComboPooledDataSource().getNumConnections());{\n}
{\t}{\t}// need to sleep to ensure that the connection has time to close - hacky... :({\n}
{\t}{\t}try {{ Thread.sleep(1); } catch (InterruptedException e) {{ /* do nothing */ }{\n}
{\t}{\t}Assert.assertEquals(numBusyConnections, ConnectionManager.getComboPooledDataSource().getNumBusyConnections());{\n}
{\t}}{\n}
{\n}

{\t}@Test{\n}
{\t}public void test{table.javaClassName}{finder.name}WithConnectionSilent() throws SQLException {{{\n}
{\t}{\t}int numConnections = ConnectionManager.getComboPooledDataSource().getNumConnections();{\n}
{\t}{\t}int numBusyConnections = ConnectionManager.getComboPooledDataSource().getNumBusyConnections();{\n}
{\t}{\t}try (Connection connection = ConnectionManager.getConnection()) {{{\n}
{\t}{\t}{\t}{table.javaClassName}Finder.{finder.name}({import classpath:/java/test/snippet/finder-field-params.templar}){\n}
{\t}{\t}{\t}{\t}.withConnection(connection){\n}
{\t}{\t}{\t}{\t}.executeSilent();{\n}
{\n}
{\t}{\t}}{\n}
{\t}{\t}Assert.assertEquals(numConnections, ConnectionManager.getComboPooledDataSource().getNumConnections());{\n}
{\t}{\t}// need to sleep to ensure that the connection has time to close - hacky... :({\n}
{\t}{\t}try {{ Thread.sleep(1); } catch (InterruptedException e) {{ /* do nothing */ }{\n}
{\t}{\t}Assert.assertEquals(numBusyConnections, ConnectionManager.getComboPooledDataSource().getNumBusyConnections());{\n}
{\t}}{\n}
{\n}


{\t}@Test{\n}
{\t}public void test{table.javaClassName}{finder.name}WithNullConnection() throws SQLException {{{\n}
{\t}{\t}int numConnections = ConnectionManager.getComboPooledDataSource().getNumConnections();{\n}
{\t}{\t}int numBusyConnections = ConnectionManager.getComboPooledDataSource().getNumBusyConnections();{\n}
{\t}{\t}{table.javaClassName}Finder.{finder.name}({import classpath:/java/test/snippet/finder-field-params.templar}){\n}
{\t}{\t}{\t}.withConnection(null){\n}
{\t}{\t}{\t}.execute();{\n}
{\n}
{\t}{\t}Assert.assertEquals(numConnections, ConnectionManager.getComboPooledDataSource().getNumConnections());{\n}
{\t}{\t}// need to sleep to ensure that the connection has time to close - hacky... :({\n}
{\t}{\t}try {{ Thread.sleep(1); } catch (InterruptedException e) {{ /* do nothing */ }{\n}
{\t}{\t}Assert.assertEquals(numBusyConnections, ConnectionManager.getComboPooledDataSource().getNumBusyConnections());{\n}
{\t}}{\n}
{\n}


{\t}@Test{\n}
{\t}public void test{table.javaClassName}{finder.name}WithNullConnectionSilent() throws SQLException {{{\n}
{\t}{\t}int numConnections = ConnectionManager.getComboPooledDataSource().getNumConnections();{\n}
{\t}{\t}int numBusyConnections = ConnectionManager.getComboPooledDataSource().getNumBusyConnections();{\n}
{\t}{\t}{table.javaClassName}Finder.{finder.name}({import classpath:/java/test/snippet/finder-field-params.templar}){\n}
{\t}{\t}{\t}{\t}.withConnection(null){\n}
{\t}{\t}{\t}{\t}.executeSilent();{\n}
{\n}
{\t}{\t}Assert.assertEquals(numConnections, ConnectionManager.getComboPooledDataSource().getNumConnections());{\n}
{\t}{\t}// need to sleep to ensure that the connection has time to close - hacky... :({\n}
{\t}{\t}try {{ Thread.sleep(1); } catch (InterruptedException e) {{ /* do nothing */ }{\n}
{\t}{\t}Assert.assertEquals(numBusyConnections, ConnectionManager.getComboPooledDataSource().getNumBusyConnections());{\n}
{\t}}{\n}
{\n}




{if !finder.unique}
{-- UNIQUE FINDERS DO NOT HAVE LIMITS/OFFSET }

{\t}@Test{\n}
{\t}public void test{table.javaClassName}{finder.name}WithNullConnectionLimitOffset() throws SQLException {{{\n}
{\t}{\t}int numConnections = ConnectionManager.getComboPooledDataSource().getNumConnections();{\n}
{\t}{\t}int numBusyConnections = ConnectionManager.getComboPooledDataSource().getNumBusyConnections();{\n}
{\t}{\t}{table.javaClassName}Finder.{finder.name}({import classpath:/java/test/snippet/finder-field-params.templar}){\n}
{\t}{\t}{\t}.withConnection(null){\n}
{\t}{\t}{\t}.withLimit(0){\n}
{\t}{\t}{\t}.withOffset(0){\n}
{\t}{\t}{\t}.execute();{\n}
{\n}
{\t}{\t}Assert.assertEquals(numConnections, ConnectionManager.getComboPooledDataSource().getNumConnections());{\n}
{\t}{\t}// need to sleep to ensure that the connection has time to close - hacky... :({\n}
{\t}{\t}try {{ Thread.sleep(1); } catch (InterruptedException e) {{ /* do nothing */ }{\n}
{\t}{\t}Assert.assertEquals(numBusyConnections, ConnectionManager.getComboPooledDataSource().getNumBusyConnections());{\n}
{\t}}{\n}
{\n}


{\t}@Test{\n}
{\t}public void test{table.javaClassName}{finder.name}WithNullConnectionLimitOffsetSilent() throws SQLException {{{\n}
{\t}{\t}int numConnections = ConnectionManager.getComboPooledDataSource().getNumConnections();{\n}
{\t}{\t}int numBusyConnections = ConnectionManager.getComboPooledDataSource().getNumBusyConnections();{\n}
{\t}{\t}{table.javaClassName}Finder.{finder.name}({import classpath:/java/test/snippet/finder-field-params.templar}){\n}
{\t}{\t}{\t}{\t}.withConnection(null){\n}
{\t}{\t}{\t}{\t}.withLimit(0){\n}
{\t}{\t}{\t}{\t}.withOffset(0){\n}
{\t}{\t}{\t}{\t}.executeSilent();{\n}
{\n}
{\t}{\t}Assert.assertEquals(numConnections, ConnectionManager.getComboPooledDataSource().getNumConnections());{\n}
{\t}{\t}// need to sleep to ensure that the connection has time to close - hacky... :({\n}
{\t}{\t}try {{ Thread.sleep(1); } catch (InterruptedException e) {{ /* do nothing */ }{\n}
{\t}{\t}Assert.assertEquals(numBusyConnections, ConnectionManager.getComboPooledDataSource().getNumBusyConnections());{\n}
{\t}}{\n}
{\n}



{\t}@Test{\n}
{\t}public void test{table.javaClassName}{finder.name}WithNullConnectionNullLimitNullOffset() throws SQLException {{{\n}
{\t}{\t}int numConnections = ConnectionManager.getComboPooledDataSource().getNumConnections();{\n}
{\t}{\t}int numBusyConnections = ConnectionManager.getComboPooledDataSource().getNumBusyConnections();{\n}
{\t}{\t}{table.javaClassName}Finder.{finder.name}({import classpath:/java/test/snippet/finder-field-params.templar}){\n}
{\t}{\t}{\t}.withConnection(null){\n}
{\t}{\t}{\t}.withLimit(null){\n}
{\t}{\t}{\t}.withOffset(null){\n}
{\t}{\t}{\t}.execute();{\n}
{\n}
{\t}{\t}Assert.assertEquals(numConnections, ConnectionManager.getComboPooledDataSource().getNumConnections());{\n}
{\t}{\t}// need to sleep to ensure that the connection has time to close - hacky... :({\n}
{\t}{\t}try {{ Thread.sleep(1); } catch (InterruptedException e) {{ /* do nothing */ }{\n}
{\t}{\t}Assert.assertEquals(numBusyConnections, ConnectionManager.getComboPooledDataSource().getNumBusyConnections());{\n}
{\t}}{\n}
{\n}


{\t}@Test{\n}
{\t}public void test{table.javaClassName}{finder.name}WithNullConnectionNullLimitNullOffsetSilent() throws SQLException {{{\n}
{\t}{\t}int numConnections = ConnectionManager.getComboPooledDataSource().getNumConnections();{\n}
{\t}{\t}int numBusyConnections = ConnectionManager.getComboPooledDataSource().getNumBusyConnections();{\n}
{\t}{\t}{table.javaClassName}Finder.{finder.name}({import classpath:/java/test/snippet/finder-field-params.templar}){\n}
{\t}{\t}{\t}{\t}.withConnection(null){\n}
{\t}{\t}{\t}{\t}.withLimit(null){\n}
{\t}{\t}{\t}{\t}.withOffset(null){\n}
{\t}{\t}{\t}{\t}.executeSilent();{\n}
{\n}
{\t}{\t}// need to sleep to ensure that the connection has time to close - hacky... :({\n}
{\t}{\t}try {{ Thread.sleep(1); } catch (InterruptedException e) {{ /* do nothing */ }{\n}
{\t}{\t}Assert.assertEquals(numBusyConnections, ConnectionManager.getComboPooledDataSource().getNumBusyConnections());{\n}
{\t}}{\n}
{\n}
{endif}
{endloop}
}{\n}