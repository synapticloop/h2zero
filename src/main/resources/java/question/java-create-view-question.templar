{-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
		PACKAGE DECLARATION, IMPORT STATEMENTS AND CLASS DEFINITION
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --}

package {database.package}.question;{\n}{\n}
//        - - - - thoughtfully generated by synapticloop h2zero - - - -        {\n}
//          with the use of synapticloop templar templating language{\n}
//              (/java/question/java-create-view-question.templar){\n}{\n}

{import classpath:/java/snippet/global/java-model-imports.templar}
import com.synapticloop.h2zero.base.sql.nolimitoffset.Question;{\n}

{if table.hasQuestionInFields}
	import java.util.HashMap;{\n}
	import java.util.Map;{\n}
{endif}

import java.util.List;{\n}
{\n}
{\n}
/**{\n}
 * <p>This class contains all of the questions that are defined in the h2zero{\n}
 * file.</p>{\n}
 * {\n}
 * <p>A question may only return a simple true/false response from a query.</p>{\n}
 * {\n}
 * <p>Table name: <code>{table.name}</code></p>{\n}
 * {\n}
{loop table.questions as question}
	{if questionStatus.first}
 * <p>Questions defined:{\n}
 * <ul>{\n}
	{endif}
 * <li><code>{question.name}</code> - SQL query run {{@link #SQL_{question.staticName}}</li>{\n}
	{if questionStatus.last}
 * </ul>{\n}
	{endif}
{endloop}
 * {\n}
* <p>To execute any question SQL query, you may pass in a connection, and execute it (silently if desired)</p>{\n}
 *{\n}
 * <p><strong><em>Executing a question without a passed in connection.</em></strong></p>{\n}
 *{\n}
 * <pre>{table.javaClassName}Question.questionName(parameter1, parameter2, ...){\n}
 *          .execute();{\n}
 * </pre>{\n}
 *{\n}
 * <p><strong><em>Executing a question WITH a passed in connection.</em></strong></p>{\n}
 *{\n}
 * <pre>{table.javaClassName}Question.questionName(parameter1, parameter2, ...){\n}
 *          .withConnection(connection){\n}
 *          .execute();{\n}
 *  </pre>{\n}
 *{\n}
 * <p><strong><em>Executing a question WITHOUT a passed in connection SILENTLY{\n}
 * (i.e. All Exceptions are silently swallowed and logged as an error through{\n}
 * the logger.)</em></strong></p>{\n}
 *{\n}
 * <pre>{table.javaClassName}Question.questionName(parameter1, parameter2, ...){\n}
 *          .executeSilent();{\n}
 * </pre>{\n}
 *{\n}
 * <p><strong><em>Executing a question WITH a passed in connection SILENTLY{\n}
 * (i.e. All Exceptions are silently swallowed and logged as an error through{\n}
 * the logger.)</em></strong></p>{\n}
 *{\n}
 * <pre>{table.javaClassName}Question.questionName(parameter1, parameter2, ...){\n}
 *          .withConnection(connection){\n}
 *          .executeSilent();{\n}
 * </pre>{\n}
 *{\n}
 * @author synapticloop h2zero{\n}
 * {\n}
 * <p>@see <a href="https://github.com/synapticloop/h2zero">Synapticloop h2zero GitHub repository</a></p>{\n}
 */{\n}
public class {table.javaClassName}ViewQuestion {{{\n}
	{set view as baseSchemaObject}
	{import classpath:/java/snippet/global/java-binder-declaration.templar}
	{set "ViewQuestion" as classType}{set baseSchemaObject.javaClassName as loggerClass}{import classpath:/java/snippet/global/java-logger-declaration.templar}{\n}{\n}
	{\n}

{-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
				THE QUESTION FINDERS FOR THE SELECT CLAUSES AND NORMAL CLAUSES
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --}

{loop table.questions as question}
	{\t}private static final String SQL_{question.staticName} = "{question.selectClause}"
	{if fn:notNull[question.whereClause]} + " {question.whereClause}"{endif}
	{if fn:notNull[question.orderBy]} + " order by {question.orderBy}"{endif};{\n}
{endloop}
{\n}

{\t}private {table.javaClassName}ViewQuestion() {{}{\n}{\n}

{-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
				AND THE SELECT CLAUSE QUESTIONS
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --}

{loop table.questions as question}
	{set question as baseQueryObject}
{\t}/**{\n}
{\t} * <p>Return the question object (optionally setting a connection) for this query,{\n}
{\t} * ready for execution.</p>{\n}
{\t} *{\n}
{\t} * <p>A <code>Connection</code> object may optionally be set for this query.{\n}
{\t} * Note that if no connection is set, one will automatically be retrieved from{\n}
{\t} * the connection pool.</p>{\n}
{\t} *{\n}
{\t} * <p><code>.withConnection(connection)</code></p>{\n}
{\t} *{\n}
{\t} * <p>And then can be executed with the following call:</p>{\n}
{\t} *{\n}
{\t} * <p><code>.execute()</code></p>{\n}
{\t} *{\n}
{\t} * <p>Alternatively the call can be executed silently (i.e. any exceptions that{\n}
{\t} * may have been thrown will be silently swallowed and the error logged.)</p>{\n}
{\t} *{\n}
{\t} * <p><code>.executeSilent()</code></p>{\n}
{\t} *{\n}
{\t} * <p>This question executes the following sql statement:</p>{\n}
{\t} *{\n}
{\t} * <pre>{question.selectClause}{\n}
{if fn:notNull[question.whereClause]}{\t} * {question.whereClause}{\n}{endif}
{if fn:notNull[question.orderBy]}{\t} * order by {question.orderBy}{\n}{endif}
{\t} * </pre>{\n}
{\t} *{\n}
{loop question.whereFields as whereField}
{if whereField.isInField}
	{\t} * @param {whereField.javaName}List The list of <code>{whereField.name}<code> fields to be {\n}
	{\t} *        set on the prepared SQL statement which is part of an 'in' clause.{\n}
{else}
	{\t} * @param {whereField.javaName}{if whereField.isInField}List{endif} maps to the <code>{whereField.name}<code> field{\n}
{endif}
{endloop}
{\t} *{\n}
{\t} * @return The question object (optionally setting a connection) ready for {\n}
{\t} *    and execution.{\n}
{\t} */{\n}

{\t}public static Question {question.name}(
	{import classpath:/java/snippet/global/java-method-parameters.templar}
) {{{\n}
{\t}{\t}return({\n}
{\t}{\t}{\t}{\t}new Question({\n}
{\t}{\t}{\t}{\t}{\t}{\t}LOGGER, {\n}
{\t}{\t}{\t}{\t}{\t}{\t}SQL_{question.staticName}, {\n}
{\t}{\t}{\t}{\t}{\t}{\t}new Object[] {{ {import classpath:/java/snippet/global/java-method-parameters-call.templar} } ));{\n}
{\t}}{\n}
{\n}

{endloop}
}
