package {database.package};{\n}{\n}
//        - - - - thoughtfully generated by synapticloop h2zero - - - -        {\n}
//          with the use of synapticloop templar templating language{\n}
//   (/java/util/java-create-connection-manager-initialise-override.templar){\n}
{\n}
{\n}
import {database.package}.ConnectionManagerInitialiser;{\n}
import com.synapticloop.h2zero.base.manager.{options.database}.ConnectionManager;
import com.mchange.v2.c3p0.ComboPooledDataSource;{\n}
{\n}
import java.beans.PropertyVetoException;{\n}
import java.io.BufferedReader;{\n}
import java.io.IOException;{\n}
import java.io.InputStreamReader;{\n}
import java.sql.Connection;{\n}
import java.sql.DriverManager;{\n}
import java.sql.PreparedStatement;{\n}
import java.sql.SQLException;{\n}
import java.util.Properties;{\n}
{\n}
{\n}
/**{\n}
 * <p>{\n}
 * This file is used to override the default initialisation of the connection{\n}
 * pool, so that you can initialise your connection by your own methods.{\n}
 * </p>{\n}
 *{\n}
 * <p>{\n}
 * Example, commented-out code is included within the method.{\n}
 * </p>{\n}
 *{\n}
 * <p>{\n}
 * To initialise the combo pool for use, call <br />{\n}
 * <code>ConnectionManagerInitialiserOverride.initialise()</code><br />{\n}
 * __ONCE__ upon initialisation of your application.{\n}
 * </p>{\n}
 *{\n}
 *{\n}
 * <p>{\n}
 * With multiple connection pools to multiple databases (rarely used, but{\n}
 * necessary in some instances) use the protected static field{\n}
 * <code>CONNECTION_POOL_NAME</code> inherited from the parent class.{\n}
 * </p>{\n}
 *{\n}
 * <p>{\n}
 * {{@link  {database.package}.ConnectionManagerInitialiser#CONNECTION_POOL_NAME  {database.package}.ConnectionManagerInitialiser#CONNECTION_POOL_NAME}{\n}
 * </p>{\n}
 *{\n}
 * <pre>{\n}
 *{\n}
 * NOTE: ONCE GENERATED - THIS FILE WILL __NEVER__ BE OVER-WRITTEN BY AN h2zero{\n}
 *       RE-GENERATION.{\n}
 *{\n}
 *       THIS __WILL__ BE A PROBLEM IF h2zero UPDATES THE TEMPLATE IN FUTURE{\n}
 *       VERSIONS...{\n}
 *{\n}
 *       JUST SAYING...{\n}
 * </pre>{\n}
 */{\n}
public class ConnectionManagerInitialiserOverride extends ConnectionManagerInitialiser {{{\n}
{\t}private static boolean hasCreatedDatabase = false;{\n}
{\t}private static Properties properties;{\n}
{\n}
{\t}private static void initialisePropertiesFile() throws SQLException {{{\n}
{\t}{\t}properties = new Properties();{\n}
{\t}{\t}try {{{\n}
{\t}{\t}{\t}// !!! NOTE !!!{\n}
{\t}{\t}{\t}// If you are loading the properties file from the file system - you will need{\n}
{\t}{\t}{\t}// to ensure that this file exists{\n}
{\t}{\t}{\t}properties.load(ConnectionManagerInitialiserOverride.class.getResourceAsStream("/application.{options.database}.{database.schema}.properties"));{\n}
{\t}{\t}} catch (IOException e) {{{\n}
{\t}{\t}{\t}throw new RuntimeException("Could not load the properties file '/application.{options.database}.{database.schema}.properties' there shall be no SQL for you.", e);{\n}
{\t}{\t}}{\n}
{\t}}{\n}
{\n}
{\t}public static void initialiseFromProperties() throws SQLException {{{\n}
{\n}
{\t}{\t}if(null == properties) {{{\n}
{\t}{\t}{\t}initialisePropertiesFile();{\n}
{\t}{\t}}{\n}
{\n}
{\t}{\t}ComboPooledDataSource myComboPooledDataSource = new ComboPooledDataSource();{\n}
{\t}{\t}try {{{\n}
{\t}{\t}{\t}myComboPooledDataSource.setDriverClass("{options.driverClassName}");{\n}
{\t}{\t}} catch (PropertyVetoException e) {{ // runtime exception{\n}
{\t}{\t}{\t}throw new RuntimeException(e);{\n}
{\t}{\t}}{\n}
{\n}
{\t}{\t}myComboPooledDataSource.setJdbcUrl(properties.getProperty("c3p0.jdbcUrl"));{\n}
{\t}{\t}myComboPooledDataSource.setUser(properties.getProperty("c3p0.user"));{\n}
{\t}{\t}myComboPooledDataSource.setPassword(properties.getProperty("c3p0.password"));{\n}
{\n}
{\t}{\t}myComboPooledDataSource.setMaxPoolSize(Integer.parseInt(properties.getProperty("c3p0.maxPoolSize")));{\n}
{\t}{\t}myComboPooledDataSource.setMaxStatements(Integer.parseInt(properties.getProperty("c3p0.maxStatements")));{\n}
{\t}{\t}myComboPooledDataSource.setMaxStatementsPerConnection(Integer.parseInt(properties.getProperty("c3p0.maxStatementsPerConnection")));{\n}
{\n}
{\t}{\t}myComboPooledDataSource.setMaxPoolSize(Integer.parseInt(properties.getProperty("c3p0.minPoolSize")));{\n}
{\n}
{\t}{\t}myComboPooledDataSource.setAcquireIncrement(Integer.parseInt(properties.getProperty("c3p0.acquireIncrement")));{\n}
{\t}{\t}myComboPooledDataSource.setInitialPoolSize(Integer.parseInt(properties.getProperty("c3p0.initialPoolSize")));{\n}
{\t}{\t}myComboPooledDataSource.setAcquireRetryAttempts(Integer.parseInt(properties.getProperty("c3p0.acquireRetryAttempts")));{\n}
{\t}{\t}myComboPooledDataSource.setDebugUnreturnedConnectionStackTraces(Boolean.parseBoolean(properties.getProperty("c3p0.debugUnreturnedConnectionStackTraces")));{\n}
{\n}
{\t}{\t}addComboPool(CONNECTION_POOL_NAME, myComboPooledDataSource);{\n}
{\t}}{\n}
{\n}
{\t}public static void initialise() throws SQLException {{{\n}
//{\t}{\t}// create a new combo pool{\n}
//{\t}{\t}ComboPooledDataSource myComboPooledDataSource = new ComboPooledDataSource();{\n}
//{\t}{\t}// configure the combopool{\n}
//{\t}{\t}try {{{\n}
//{\t}{\t}{\t}myComboPooledDataSource.setDriverClass("{options.driverClassName}");{\n}
//{\t}{\t}} catch (PropertyVetoException e) {{ // runtime exception{\n}
//{\t}{\t}{\t}throw new RuntimeException(e);{\n}
//{\t}{\t}}{\n}
//{\n}
//{\t}{\t}try {{{\n}
//{\t}{\t}{\t}myComboPooledDataSource.setLoginTimeout(1);{\n}
//{\t}{\t}} catch (SQLException e) {{{\n}
//{\t}{\t}{\t}throw new RuntimeException(e);{\n}
//{\t}{\t}}{\n}
//{\n}
//{\t}{\t}myComboPooledDataSource.setAcquireIncrement(1);{\n}
//{\n}
//{\t}{\t}myComboPooledDataSource.setJdbcUrl("jdbc://");{\n}
//{\t}{\t}myComboPooledDataSource.setUser("username");{\n}
//{\t}{\t}myComboPooledDataSource.setPassword("password");{\n}
//{\n}
//{\t}{\t}addComboPool(CONNECTION_POOL_NAME, myComboPooledDataSource);{\n}
{\t}}{\n}
{\n}

{\n}
{\t}/**{\n}
{\t} * Creating the database requires a separate JDBC URL if the database has{\n}
{\t} * never been setup before{\n}
{\t} *{\n}
{\t} * @throws SQLException If there was an error connecting to the database{\n}
{\t} *   or executing the SQL creation statements.{\n}
{\t} */{\n}
{\t}public static void createDatabase() throws SQLException {{{\n}
{\t}{\t}if(null == properties) {{{\n}
{\t}{\t}{\t}initialiseFromProperties();{\n}
{\t}{\t}}{\n}
{\n}
{\t}{\t}if(hasCreatedDatabase) {{{\n}
{\t}{\t}{\t}return;{\n}
{\t}{\t}}{\n}
{\n}
{\t}{\t}PreparedStatement preparedStatement = null;{\n}
{\n}
{\t}{\t}try ({\n}
{\t}{\t}{\t}{\t}Connection connection = DriverManager.getConnection({\n}
{\t}{\t}{\t}{\t}{\t}{\t}properties.getProperty("db.initial.jdbcUrl"),{\n}
{\t}{\t}{\t}{\t}{\t}{\t}properties.getProperty("db.initial.user"),{\n}
{\t}{\t}{\t}{\t}{\t}{\t}properties.getProperty("db.initial.password"));{\n}
{\n}
{\t}{\t}{\t}{\t}InputStreamReader inputStreamReader = new InputStreamReader(ConnectionManagerInitialiser.class.getResourceAsStream("/create-database-{options.database}-{database.schema}.sql"));{\n}
{\t}{\t}{\t}{\t}BufferedReader bufferedReader = new BufferedReader(inputStreamReader);{\n}
{\t}{\t}) {{{\n}
{\t}{\t}{\t}String line = null;{\n}
{\t}{\t}{\t}StringBuilder query = new StringBuilder();{\n}
{\n}
{\t}{\t}{\t}while ((line = bufferedReader.readLine()) != null) {{{\n}
{\t}{\t}{\t}{\t}if (!line.startsWith("--") && !line.trim().isEmpty()) {{{\n}
{\t}{\t}{\t}{\t}{\t}query.append(line);{\n}
{\t}{\t}{\t}{\t}{\t}query.append(" ");{\n}
{\t}{\t}{\t}{\t}} else {{{\n}
{\t}{\t}{\t}{\t}{\t}continue;{\n}
{\t}{\t}{\t}{\t}}{\n}
{\n}
{\t}{\t}{\t}{\t}if (line.trim().endsWith(";")) {{{\n}
{\t}{\t}{\t}{\t}{\t}preparedStatement = connection.prepareStatement(query.toString());{\n}
{\t}{\t}{\t}{\t}{\t}preparedStatement.execute();{\n}
{\t}{\t}{\t}{\t}{\t}preparedStatement.close();{\n}
{\t}{\t}{\t}{\t}{\t}query.setLength(0);{\n}
{\t}{\t}{\t}{\t}}{\n}
{\t}{\t}{\t}}{\n}
{\n}
{\t}{\t}} catch (IOException e) {{{\n}
{\t}{\t}{\t}throw new SQLException("Could not load the /create-database-{options.database}-{database.schema}.sql file, original message was: " + e.getMessage(), e);{\n}
{\t}{\t}} catch (SQLException e) {{{\n}
{\t}{\t}{\t}throw(e);{\n}
{\t}{\t}} finally {{{\n}
{\t}{\t}{\t}ConnectionManager.closeAll(preparedStatement);{\n}
{\t}{\t}}{\n}
{\t}{\t}hasCreatedDatabase = true;{\n}
{\t}}{\n}
}{\n}