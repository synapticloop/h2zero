{-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
		PACKAGE DECLARATION, IMPORT STATEMENTS AND CLASS DEFINITION
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --}

package {database.package}.counter;{\n}{\n}
// - - - - thoughtfully generated by synapticloop h2zero - - - - {\n}
//    with the use of synapticloop templar templating language{\n}
//                (java-create-counter.templar){\n}{\n}

import java.sql.Connection;{\n}
import java.sql.PreparedStatement;{\n}
import java.sql.ResultSet;{\n}
import java.sql.SQLException;{\n}
import java.util.HashMap;{\n}
import java.util.Map;{\n}
import java.util.List;{\n}
import java.sql.*;{\n}
{\n}
import com.synapticloop.h2zero.base.manager.{options.database}.ConnectionManager;{\n}
{\n}
{import classpath:/snippet/global/java-logger.templar}
{\n}
import {database.package}.model.util.Constants;{\n}
{\n}

public class {table.javaClassName}Counter {{{\n}

	{set table as baseSchemaObject}
	{import classpath:/snippet/global/java-binder-declaration.templar}

	{set "Counter" as classType}
	{set baseSchemaObject.javaClassName as loggerClass}
	{\t}{import classpath:/snippet/global/java-logger-declaration.templar}{\n}
	{\n}

{\t}private static final String SQL_BUILTIN_COUNT_ALL = "select count(*) from {table.name}";{\n}
{\n}
{-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
				THE COUNT FINDERS FOR THE SELECT CLAUSES AND NORMAL CLAUSES
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --}

{loop table.counters as counter}
	{\t}private static final String SQL_{counter.staticName} = "{counter.selectClause}"
	{if fn:notNull[counter.whereClause]} + " {counter.whereClause}"{endif}
	{if fn:notNull[counter.orderBy]} + " order by {counter.orderBy}"{endif};{\n}
{endloop}
{\n}

{-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
				THE COUNT FINDERS FOR THE SELECT CLAUSES CACHES
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --}

{loop table.counters as counter}
	{if counter.hasInFields}
		{\t}private static Map<String, String> {counter.name}_statement_cache = new HashMap<String, String>();{\n}
	{endif}
{endloop}

{\n}
{\t}private {table.javaClassName}Counter() {{}{\n}
{\n}
{-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
				FIND COUNT ALL
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --}

{\t}/**{\n}
{\t} * Find the count of all {table.javaClassName} objects{\n}
{\t} * {\n}
{\t} * @param connection the passed in connection object, useful for queries within{\n}
{\t} * a transaction.{\n}
{\t} * {\n}
{\t} * @return the count of {table.javaClassName} objects{\n}
{\t} * {\n}
{\t} * @throws SQLException if there was an error in the SQL statement{\n}
{\t} */{\n}

{\t}public static int countAll(Connection connection) throws SQLException {{{\n}

{\t}{\t}PreparedStatement preparedStatement = null;{\n}
{\t}{\t}ResultSet resultSet = null;{\n}
{\n}
{\t}{\t}try {{{\n}
{\t}{\t}{\t}preparedStatement = connection.prepareStatement(SQL_BUILTIN_COUNT_ALL);{\n}
{\t}{\t}{\t}resultSet = preparedStatement.executeQuery();{\n}
{\t}{\t}{\t}if(resultSet.next()) {{{\n}
{\t}{\t}{\t}{\t}return(resultSet.getInt(1));{\n}
{\t}{\t}{\t}}{\n}
{\t}{\t}} catch(SQLException sqlex) {{{\n}
{\t}{\t}{\t}if(LOGGER.isWarnEnabled()) {{{\n}
{\t}{\t}{\t}{\t}LOGGER.warn("SQLException countAll(connection): " + sqlex.getMessage());{\n}

{\t}{\t}{\t}{\t}if(LOGGER.isDebugEnabled()) {{{\n}
{\t}{\t}{\t}{\t}{\t}sqlex.printStackTrace();{\n}
{\t}{\t}{\t}{\t}}{\n}

{\t}{\t}{\t}}{\n}
{\t}{\t}{\t}throw sqlex;{\n}
{\t}{\t}} finally {{{\n}
{\t}{\t}{\t}ConnectionManager.closeAll(resultSet, preparedStatement);{\n}
{\t}{\t}}{\n}
{\n}

{\t}{\t}return(-1);{\n}
{\t}}{\n}
{\n}

{\t}/**{\n}
{\t} * Find the count of all {table.javaClassName} objects{\n}
{\t} * {\n}
{\t} * @return the count of {table.javaClassName} objects{\n}
{\t} * {\n}
{\t} * @throws SQLException if there was an error in the SQL statement{\n}
{\t} */{\n}

{\t}public static int countAll() throws SQLException {{{\n}

{\n}
{\t}{\t}try (Connection connection = ConnectionManager.getConnection()) {{{\n}
{\t}{\t}{\t}return(countAll(connection));{\n}
{\t}{\t}} catch(SQLException sqlex) {{{\n}
{\t}{\t}{\t}if(LOGGER.isWarnEnabled()) {{{\n}
{\t}{\t}{\t}{\t}LOGGER.warn("SQLException countAll(): " + sqlex.getMessage());{\n}

{\t}{\t}{\t}{\t}if(LOGGER.isDebugEnabled()) {{{\n}
{\t}{\t}{\t}{\t}{\t}sqlex.printStackTrace();{\n}
{\t}{\t}{\t}{\t}}{\n}

{\t}{\t}{\t}}{\n}
{\t}{\t}{\t}throw sqlex;{\n}
{\t}{\t}}{\n}
{\t}}{\n}
{\n}

{\t}/**{\n}
{\t} * Find the count of all {table.javaClassName} objects and if there is an error{\n}
{\t} * fail silently and log the error.{\n}
{\t} * {\n}
{\t} * @param connection the passed in connection object, useful for queries within{\n}
{\t} * a transaction.{\n}
{\t} * {\n}
{\t} * @return the count of {table.javaClassName} objects{\n}
{\t} * {\n}
{\t} */{\n}

{\t}public static int countAllSilent(Connection connection) {{{\n}
{\t}{\t}try {{{\n}
{\t}{\t}{\t}return(countAll(connection));{\n}
{\t}{\t}} catch(SQLException sqlex){{{\n}

{\t}{\t}{\t}if(LOGGER.isWarnEnabled()) {{{\n}
{\t}{\t}{\t}{\t}LOGGER.warn("SQLException countAllSilent(connection): " + sqlex.getMessage());{\n}

{\t}{\t}{\t}{\t}if(LOGGER.isDebugEnabled()) {{{\n}
{\t}{\t}{\t}{\t}{\t}sqlex.printStackTrace();{\n}
{\t}{\t}{\t}{\t}}{\n}

{\t}{\t}{\t}}{\n}

{\t}{\t}{\t}return(-1);{\n}
{\t}{\t}}{\n}
{\t}}{\n}
{\n}

{\t}/**{\n}
{\t} * Find the count of all {table.javaClassName} objects and if there is an error{\n}
{\t} * fail silently and log the error.{\n}
{\t} * {\n}
{\t} * @return the count of {table.javaClassName} objects{\n}
{\t} * {\n}
{\t} */{\n}

{\t}public static int countAllSilent() {{{\n}
{\t}{\t}try {{{\n}
{\t}{\t}{\t}return(countAll());{\n}
{\t}{\t}} catch(SQLException sqlex){{{\n}

{\t}{\t}{\t}if(LOGGER.isWarnEnabled()) {{{\n}
{\t}{\t}{\t}{\t}LOGGER.warn("SQLException countAllSilent(): " + sqlex.getMessage());{\n}

{\t}{\t}{\t}{\t}if(LOGGER.isDebugEnabled()) {{{\n}
{\t}{\t}{\t}{\t}{\t}sqlex.printStackTrace();{\n}
{\t}{\t}{\t}{\t}}{\n}

{\t}{\t}{\t}}{\n}

{\t}{\t}{\t}return(-1);{\n}
{\t}{\t}}{\n}
{\t}}{\n}
{\n}


{-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
				AND THE SELECT CLAUSE COUNTERS
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --}

{loop table.counters as counter}
	{set counter as baseQueryObject}

	{\t}public static int {counter.name}(Connection connection
		{import classpath:/snippet/global/java-method-parameters-with-connection.templar}
	) throws SQLException {{{\n}

	{\t}{\t}PreparedStatement preparedStatement = null;{\n}
	{\t}{\t}ResultSet resultSet = null;{\n}

	{\t}{\t}try {{{\n}
		{import classpath:/snippet/global/java-sql-parameter-setting.templar}

	{\n}
	{\t}{\t}{\t}resultSet = preparedStatement.executeQuery();{\n}
	{\t}{\t}{\t}if(resultSet.next()) {{{\n}
	{\t}{\t}{\t}{\t}return(resultSet.getInt(1));{\n}
	{\t}{\t}{\t}}{\n}
	{\t}{\t}} finally {{{\n}
	{\t}{\t}{\t}ConnectionManager.closeAll(resultSet, preparedStatement);{\n}
	{\t}{\t}}{\n}
	{\t}{\t}return(-1);{\n}
	{\t}}{\n}
{\n}

	{\t}public static int {counter.name}(
		{import classpath:/snippet/global/java-method-parameters.templar}
	) throws SQLException {{{\n}
	{\t}{\t}try (Connection connection = ConnectionManager.getConnection()){{{\n}
	{\t}{\t}{\t}return({counter.name}(connection
		{import classpath:/snippet/global/java-method-parameters-call-with-connection.templar}
		));{\n}
	{\t}{\t}}{\n}

	{\t}}{\n}
{\n}

	{\t}public static int {counter.name}Silent(Connection connection
		{import classpath:/snippet/global/java-method-parameters-with-connection.templar}
	) {{{\n}

	{\t}{\t}try {{{\n}
	{\t}{\t}{\t}return({counter.name}(connection
		{import classpath:/snippet/global/java-method-parameters-call-with-connection.templar}
	));{\n}

	{\t}{\t}} catch(SQLException sqlex) {{{\n}

		{import classpath:/snippet/global/exception-sql-log-silent.templar}

	{\t}{\t}}{\n}

	{\t}{\t}return(-1);{\n}

	{\t}}{\n}
{\n}

	{\t}public static int {counter.name}Silent(
		{import classpath:/snippet/global/java-method-parameters.templar}
	) {{{\n}

	{\t}{\t}try {{{\n}
	{\t}{\t}{\t}return({counter.name}(
		{import classpath:/snippet/global/java-method-parameters-call.templar}
	));{\n}

	{\t}{\t}} catch(SQLException sqlex) {{{\n}

		{import classpath:/snippet/global/exception-sql-log-silent.templar}

	{\t}{\t}}{\n}

	{\t}{\t}return(-1);{\n}
	{\t}}{\n}
{\n}

{endloop}
}
