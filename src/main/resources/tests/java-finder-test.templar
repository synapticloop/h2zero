package {database.package}.test.util;{\n}{\n}

// - - - - thoughtfully generated by synapticloop h2zero - - - - {\n}
//    with the use of synapticloop templar templating language{\n}
//               (tests/java-finder-test.templar){\n}{\n}
{\n}
import static org.junit.Assert.*;{\n}
{\n}
import org.junit.Assert;{\n}
import org.junit.Test;{\n}
import synapticloop.h2zero.base.manager.sqlite3.ConnectionManager;{\n}
import synapticloop.h2zero.base.exception.H2ZeroFinderException;{\n}
import synapticloop.h2zero.base.manager.BaseConnectionManager;{\n}
{\n}
import java.sql.Connection;{\n}
import java.sql.SQLException;{\n}
import java.util.ArrayList;{\n}
import java.sql.*;{\n}
{\n}
{\n}
{loop database.tables as table}
import {database.package}.finder.{table.javaClassName}Finder;{\n}
{endloop}
{\n}
/**{\n}
 * WARNING NOTE: these tests are designed to test the generated SQL statements{\n}
 * __NOT__ whether the database actually returns sane results.{\n}
 * {\n}
 * These will also test to ensure that connections are setting closed properly{\n}
 * so that there ar no resource leakages.{\n}
 */{\n}
{\n}
public class FinderTest extends DatabaseSetupTest {{{\n}
{\n}

{loop database.tables as table}
{\t}@Test{\n}
{\t}public void test{table.javaClassName}FindByPrimaryKey() throws SQLException {{{\n}
{\t}{\t}int numConnections = BaseConnectionManager.comboPooledDataSource.getNumConnections();{\n}
{\t}{\t}int numBusyConnections = BaseConnectionManager.comboPooledDataSource.getNumBusyConnections();{\n}
{\t}{\t}// this shouldn't find anything - and we don't care - only about SQLExceptions{\n}
{\t}{\t}try {{{\n}
{\t}{\t}{\t}{table.javaClassName}Finder.findByPrimaryKey(1L);{\n}
{\t}{\t}} catch (H2ZeroFinderException ex) {{{\n}
{\t}{\t}{\t}// do nothing - don't care{\n}
{\t}{\t}}{\n}
{\t}{\t}Assert.assertEquals(numConnections, BaseConnectionManager.comboPooledDataSource.getNumConnections());{\n}
{\t}{\t}// need to sleep to ensure that the connection has time to close - hacky... :({\n}
{\t}{\t}try {{ Thread.sleep(1); } catch (InterruptedException e) {{ /* do nothing */ }{\n}
{\t}{\t}Assert.assertEquals(numBusyConnections, BaseConnectionManager.comboPooledDataSource.getNumBusyConnections());{\n}
{\t}}{\n}
{\n}

{--
  Constants may very well return a result...
}
{\t}@Test{\n}
{\t}public void test{table.javaClassName}FindByPrimaryKeySilent() throws SQLException {{{\n}
{\t}{\t}int numConnections = BaseConnectionManager.comboPooledDataSource.getNumConnections();{\n}
{\t}{\t}int numBusyConnections = BaseConnectionManager.comboPooledDataSource.getNumBusyConnections();{\n}
{\t}{\t}Assert.assertNull({table.javaClassName}Finder.findByPrimaryKeySilent(-831486134981L));{\n}
{\t}{\t}Assert.assertEquals(numConnections, BaseConnectionManager.comboPooledDataSource.getNumConnections());{\n}
{\t}{\t}// need to sleep to ensure that the connection has time to close - hacky... :({\n}
{\t}{\t}try {{ Thread.sleep(1); } catch (InterruptedException e) {{ /* do nothing */ }{\n}
{\t}{\t}Assert.assertEquals(numBusyConnections, BaseConnectionManager.comboPooledDataSource.getNumBusyConnections());{\n}
{\t}}{\n}
{\n}

{\t}@Test{\n}
{\t}public void test{table.javaClassName}FindByPrimaryKeyWithConnection() throws SQLException {{{\n}
{\t}{\t}int numConnections = BaseConnectionManager.comboPooledDataSource.getNumConnections();{\n}
{\t}{\t}int numBusyConnections = BaseConnectionManager.comboPooledDataSource.getNumBusyConnections();{\n}
{\t}{\t}try (Connection connection = ConnectionManager.getConnection()) {{{\n}
{\t}{\t}{\t}{table.javaClassName}Finder.findByPrimaryKey(connection, 1L);{\n}
{\t}{\t}} catch (H2ZeroFinderException ex) {{{\n}
{\t}{\t}{\t}// do nothing - don't care{\n}
{\t}{\t}}{\n}
{\t}{\t}Assert.assertEquals(numConnections, BaseConnectionManager.comboPooledDataSource.getNumConnections());{\n}
{\t}{\t}// need to sleep to ensure that the connection has time to close - hacky... :({\n}
{\t}{\t}try {{ Thread.sleep(1); } catch (InterruptedException e) {{ /* do nothing */ }{\n}
{\t}{\t}Assert.assertEquals(numBusyConnections, BaseConnectionManager.comboPooledDataSource.getNumBusyConnections());{\n}
{\t}}{\n}
{\n}

{\t}@Test{\n}
{\t}public void test{table.javaClassName}FindByPrimaryKeyWithConnectionSilent() throws SQLException {{{\n}
{\t}{\t}int numConnections = BaseConnectionManager.comboPooledDataSource.getNumConnections();{\n}
{\t}{\t}int numBusyConnections = BaseConnectionManager.comboPooledDataSource.getNumBusyConnections();{\n}
{\t}{\t}try (Connection connection = ConnectionManager.getConnection()) {{{\n}
{\t}{\t}{\t}Assert.assertNull({table.javaClassName}Finder.findByPrimaryKeySilent(connection, -831486134981L));{\n}
{\t}{\t}}{\n}
{\t}{\t}Assert.assertEquals(numConnections, BaseConnectionManager.comboPooledDataSource.getNumConnections());{\n}
{\t}{\t}// need to sleep to ensure that the connection has time to close - hacky... :({\n}
{\t}{\t}try {{ Thread.sleep(1); } catch (InterruptedException e) {{ /* do nothing */ }{\n}
{\t}{\t}Assert.assertEquals(numBusyConnections, BaseConnectionManager.comboPooledDataSource.getNumBusyConnections());{\n}
{\t}}{\n}
{\n}

{-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

	FIND ALL TESTING METHODS

  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -}

{\t}@Test{\n}
{\t}public void test{table.javaClassName}FindAll() throws SQLException {{{\n}
{\t}{\t}int numConnections = BaseConnectionManager.comboPooledDataSource.getNumConnections();{\n}
{\t}{\t}int numBusyConnections = BaseConnectionManager.comboPooledDataSource.getNumBusyConnections();{\n}
{\t}{\t}try {{{\n}

{if table.isConstant}
{\t}{\t}{\t}Assert.assertEquals({table.constants.size}, {table.javaClassName}Finder.findAll().size());{\n}
{else}
{\t}{\t}{\t}Assert.assertEquals(0, {table.javaClassName}Finder.findAll().size());{\n}
{\t}{\t}{\t}Assert.fail("This method should have thrown an H2ZeroFinderException...");{\n}
{endif}

{\t}{\t}} catch (H2ZeroFinderException ex) {{{\n}
{\t}{\t}{\t}// do nothing - don't care{\n}
{\t}{\t}}{\n}
{\t}{\t}Assert.assertEquals(numConnections, BaseConnectionManager.comboPooledDataSource.getNumConnections());{\n}
{\t}{\t}// need to sleep to ensure that the connection has time to close - hacky... :({\n}
{\t}{\t}try {{ Thread.sleep(1); } catch (InterruptedException e) {{ /* do nothing */ }{\n}
{\t}{\t}Assert.assertEquals(numBusyConnections, BaseConnectionManager.comboPooledDataSource.getNumBusyConnections());{\n}
{\t}}{\n}
{\n}


{\t}@Test{\n}
{\t}public void test{table.javaClassName}FindAllLimitOffset() throws SQLException {{{\n}
{\t}{\t}int numConnections = BaseConnectionManager.comboPooledDataSource.getNumConnections();{\n}
{\t}{\t}int numBusyConnections = BaseConnectionManager.comboPooledDataSource.getNumBusyConnections();{\n}
{\t}{\t}try {{{\n}

{if table.isConstant}
{\t}{\t}{\t}Assert.assertEquals(1, {table.javaClassName}Finder.findAll(1, 0).size());{\n}
{else}
{\t}{\t}{\t}Assert.assertEquals(0, {table.javaClassName}Finder.findAll(1, 0).size());{\n}
{\t}{\t}{\t}Assert.fail("This method should have thrown an H2ZeroFinderException...");{\n}
{endif}

{\t}{\t}} catch (H2ZeroFinderException ex) {{{\n}
{\t}{\t}{\t}// do nothing - don't care{\n}
{\t}{\t}}{\n}
{\t}{\t}Assert.assertEquals(numConnections, BaseConnectionManager.comboPooledDataSource.getNumConnections());{\n}
{\t}{\t}// need to sleep to ensure that the connection has time to close - hacky... :({\n}
{\t}{\t}try {{ Thread.sleep(1); } catch (InterruptedException e) {{ /* do nothing */ }{\n}
{\t}{\t}Assert.assertEquals(numBusyConnections, BaseConnectionManager.comboPooledDataSource.getNumBusyConnections());{\n}
{\t}}{\n}
{\n}



{\t}@Test{\n}
{\t}public void test{table.javaClassName}FindAllSilent() throws SQLException {{{\n}
{\t}{\t}int numConnections = BaseConnectionManager.comboPooledDataSource.getNumConnections();{\n}
{\t}{\t}int numBusyConnections = BaseConnectionManager.comboPooledDataSource.getNumBusyConnections();{\n}

{if table.isConstant}
{\t}{\t}Assert.assertEquals({table.constants.size}, {table.javaClassName}Finder.findAllSilent().size());{\n}
{else}
{\t}{\t}Assert.assertEquals(0, {table.javaClassName}Finder.findAllSilent().size());{\n}
{endif}

{\n}

{\t}{\t}Assert.assertEquals(numConnections, BaseConnectionManager.comboPooledDataSource.getNumConnections());{\n}
{\t}{\t}// need to sleep to ensure that the connection has time to close - hacky... :({\n}
{\t}{\t}try {{ Thread.sleep(1); } catch (InterruptedException e) {{ /* do nothing */ }{\n}
{\t}{\t}Assert.assertEquals(numBusyConnections, BaseConnectionManager.comboPooledDataSource.getNumBusyConnections());{\n}
{\t}}{\n}
{\n}


{\t}@Test{\n}
{\t}public void test{table.javaClassName}FindAllLimitOffsetSilent() throws SQLException {{{\n}
{\t}{\t}int numConnections = BaseConnectionManager.comboPooledDataSource.getNumConnections();{\n}
{\t}{\t}int numBusyConnections = BaseConnectionManager.comboPooledDataSource.getNumBusyConnections();{\n}

{if table.isConstant}
{\t}{\t}Assert.assertEquals(1, {table.javaClassName}Finder.findAllSilent(1, 0).size());{\n}
{else}
{\t}{\t}Assert.assertEquals(0, {table.javaClassName}Finder.findAllSilent(1, 0).size());{\n}
{endif}

{\n}

{\t}{\t}Assert.assertEquals(numConnections, BaseConnectionManager.comboPooledDataSource.getNumConnections());{\n}
{\t}{\t}// need to sleep to ensure that the connection has time to close - hacky... :({\n}
{\t}{\t}try {{ Thread.sleep(1); } catch (InterruptedException e) {{ /* do nothing */ }{\n}
{\t}{\t}Assert.assertEquals(numBusyConnections, BaseConnectionManager.comboPooledDataSource.getNumBusyConnections());{\n}
{\t}}{\n}
{\n}


{\t}@Test{\n}
{\t}public void test{table.javaClassName}FindAllWithConnection() throws SQLException {{{\n}
{\t}{\t}int numConnections = BaseConnectionManager.comboPooledDataSource.getNumConnections();{\n}
{\t}{\t}int numBusyConnections = BaseConnectionManager.comboPooledDataSource.getNumBusyConnections();{\n}
{\t}{\t}try (Connection connection = ConnectionManager.getConnection()) {{{\n}

{if table.isConstant}
{\t}{\t}{\t}Assert.assertEquals({table.constants.size}, {table.javaClassName}Finder.findAll(connection).size());{\n}
{else}
{\t}{\t}{\t}Assert.assertEquals(0, {table.javaClassName}Finder.findAll(connection).size());{\n}
{\t}{\t}{\t}Assert.fail("This method should have thrown an H2ZeroFinderException...");{\n}
{endif}

{\t}{\t}} catch (H2ZeroFinderException ex) {{{\n}
{\t}{\t}{\t}// do nothing - don't care{\n}
{\t}{\t}}{\n}

{\t}{\t}Assert.assertEquals(numConnections, BaseConnectionManager.comboPooledDataSource.getNumConnections());{\n}
{\t}{\t}// need to sleep to ensure that the connection has time to close - hacky... :({\n}
{\t}{\t}try {{ Thread.sleep(1); } catch (InterruptedException e) {{ /* do nothing */ }{\n}
{\t}{\t}Assert.assertEquals(numBusyConnections, BaseConnectionManager.comboPooledDataSource.getNumBusyConnections());{\n}
{\t}}{\n}

{\n}

{\t}@Test{\n}
{\t}public void test{table.javaClassName}FindAllWithConnectionSilent() throws SQLException {{{\n}
{\t}{\t}int numConnections = BaseConnectionManager.comboPooledDataSource.getNumConnections();{\n}
{\t}{\t}int numBusyConnections = BaseConnectionManager.comboPooledDataSource.getNumBusyConnections();{\n}
{\t}{\t}try (Connection connection = ConnectionManager.getConnection()) {{{\n}

{if table.isConstant}
{\t}{\t}{\t}Assert.assertEquals({table.constants.size}, {table.javaClassName}Finder.findAllSilent(connection).size());{\n}
{else}
{\t}{\t}{\t}Assert.assertEquals(0, {table.javaClassName}Finder.findAllSilent(connection).size());{\n}
{endif}

{\t}{\t}}{\n}

{\t}{\t}Assert.assertEquals(numConnections, BaseConnectionManager.comboPooledDataSource.getNumConnections());{\n}
{\t}{\t}// need to sleep to ensure that the connection has time to close - hacky... :({\n}
{\t}{\t}try {{ Thread.sleep(1); } catch (InterruptedException e) {{ /* do nothing */ }{\n}
{\t}{\t}Assert.assertEquals(numBusyConnections, BaseConnectionManager.comboPooledDataSource.getNumBusyConnections());{\n}
{\t}}{\n}

{\n}



{\t}@Test{\n}
{\t}public void test{table.javaClassName}FindAllWithConnectionLimit() throws SQLException {{{\n}
{\t}{\t}int numConnections = BaseConnectionManager.comboPooledDataSource.getNumConnections();{\n}
{\t}{\t}int numBusyConnections = BaseConnectionManager.comboPooledDataSource.getNumBusyConnections();{\n}
{\t}{\t}try (Connection connection = ConnectionManager.getConnection()) {{{\n}

{if table.isConstant}
{\t}{\t}{\t}Assert.assertEquals(1, {table.javaClassName}Finder.findAll(connection, 1, 0).size());{\n}
{else}
{\t}{\t}{\t}{table.javaClassName}Finder.findAll(connection, 1, 0);{\n}
{\t}{\t}{\t}Assert.fail("This method should have thrown an H2ZeroFinderException...");{\n}
{endif}

{\t}{\t}} catch (H2ZeroFinderException ex) {{{\n}
{\t}{\t}{\t}// do nothing - don't care{\n}
{\t}{\t}}{\n}

{\t}{\t}Assert.assertEquals(numConnections, BaseConnectionManager.comboPooledDataSource.getNumConnections());{\n}
{\t}{\t}// need to sleep to ensure that the connection has time to close - hacky... :({\n}
{\t}{\t}try {{ Thread.sleep(1); } catch (InterruptedException e) {{ /* do nothing */ }{\n}
{\t}{\t}Assert.assertEquals(numBusyConnections, BaseConnectionManager.comboPooledDataSource.getNumBusyConnections());{\n}
{\t}}{\n}

{\n}

{\t}@Test{\n}
{\t}public void test{table.javaClassName}FindAllWithConnectionLimitSilent() throws SQLException {{{\n}
{\t}{\t}int numConnections = BaseConnectionManager.comboPooledDataSource.getNumConnections();{\n}
{\t}{\t}int numBusyConnections = BaseConnectionManager.comboPooledDataSource.getNumBusyConnections();{\n}
{\t}{\t}try (Connection connection = ConnectionManager.getConnection()) {{{\n}

{if table.isConstant}
{\t}{\t}{\t}Assert.assertEquals(1, {table.javaClassName}Finder.findAllSilent(connection, 1, 0).size());{\n}
{else}
{\t}{\t}{\t}Assert.assertEquals(0, {table.javaClassName}Finder.findAllSilent(connection, 1, 0).size());{\n}
{endif}

{\t}{\t}}{\n}

{\t}{\t}Assert.assertEquals(numConnections, BaseConnectionManager.comboPooledDataSource.getNumConnections());{\n}
{\t}{\t}// need to sleep to ensure that the connection has time to close - hacky... :({\n}
{\t}{\t}try {{ Thread.sleep(1); } catch (InterruptedException e) {{ /* do nothing */ }{\n}
{\t}{\t}Assert.assertEquals(numBusyConnections, BaseConnectionManager.comboPooledDataSource.getNumBusyConnections());{\n}
{\t}}{\n}

{\n}




{\t}@Test{\n}
{\t}public void test{table.javaClassName}FindAllWithConnectionOffset() throws SQLException {{{\n}
{\t}{\t}int numConnections = BaseConnectionManager.comboPooledDataSource.getNumConnections();{\n}
{\t}{\t}int numBusyConnections = BaseConnectionManager.comboPooledDataSource.getNumBusyConnections();{\n}
{\t}{\t}try (Connection connection = ConnectionManager.getConnection()) {{{\n}

{if table.isConstant}
{\t}{\t}{\t}Assert.assertEquals({table.constants.size}, {table.javaClassName}Finder.findAll(connection, null, 0).size());{\n}
{else}
{\t}{\t}{\t}{table.javaClassName}Finder.findAll(connection, null, 1);{\n}
{\t}{\t}{\t}Assert.fail("This method should have thrown an H2ZeroFinderException...");{\n}
{endif}

{\t}{\t}} catch (H2ZeroFinderException ex) {{{\n}
{\t}{\t}{\t}// do nothing - don't care{\n}
{\t}{\t}}{\n}
{\t}{\t}Assert.assertEquals(numConnections, BaseConnectionManager.comboPooledDataSource.getNumConnections());{\n}
{\t}{\t}// need to sleep to ensure that the connection has time to close - hacky... :({\n}
{\t}{\t}try {{ Thread.sleep(1); } catch (InterruptedException e) {{ /* do nothing */ }{\n}
{\t}{\t}Assert.assertEquals(numBusyConnections, BaseConnectionManager.comboPooledDataSource.getNumBusyConnections());{\n}
{\t}}{\n}

{\n}

{\t}@Test{\n}
{\t}public void test{table.javaClassName}FindAllWithConnectionOffsetSilent() throws SQLException {{{\n}
{\t}{\t}int numConnections = BaseConnectionManager.comboPooledDataSource.getNumConnections();{\n}
{\t}{\t}int numBusyConnections = BaseConnectionManager.comboPooledDataSource.getNumBusyConnections();{\n}
{\t}{\t}try (Connection connection = ConnectionManager.getConnection()) {{{\n}

{if table.isConstant}
{\t}{\t}{\t}Assert.assertEquals({table.constants.size}, {table.javaClassName}Finder.findAll(connection, null, 0).size());{\n}
{else}
{\t}{\t}{\t}{table.javaClassName}Finder.findAll(connection, null, 1);{\n}
{\t}{\t}{\t}Assert.fail("This method should have thrown an H2ZeroFinderException...");{\n}
{endif}

{\t}{\t}} catch (H2ZeroFinderException ex) {{{\n}
{\t}{\t}{\t}// do nothing - don't care{\n}
{\t}{\t}}{\n}
{\t}{\t}Assert.assertEquals(numConnections, BaseConnectionManager.comboPooledDataSource.getNumConnections());{\n}
{\t}{\t}// need to sleep to ensure that the connection has time to close - hacky... :({\n}
{\t}{\t}try {{ Thread.sleep(1); } catch (InterruptedException e) {{ /* do nothing */ }{\n}
{\t}{\t}Assert.assertEquals(numBusyConnections, BaseConnectionManager.comboPooledDataSource.getNumBusyConnections());{\n}
{\t}}{\n}

{\n}


{\t}@Test{\n}
{\t}public void test{table.javaClassName}FindAllWithConnectionLimitOffset() throws SQLException {{{\n}
{\t}{\t}int numConnections = BaseConnectionManager.comboPooledDataSource.getNumConnections();{\n}
{\t}{\t}int numBusyConnections = BaseConnectionManager.comboPooledDataSource.getNumBusyConnections();{\n}
{\t}{\t}try (Connection connection = ConnectionManager.getConnection()) {{{\n}

{if table.isConstant}
{\t}{\t}{\t}Assert.assertEquals(1, {table.javaClassName}Finder.findAll(connection, 1, 0).size());{\n}
{else}
{\t}{\t}{\t}{table.javaClassName}Finder.findAll(connection, 1, 1);{\n}
{\t}{\t}{\t}Assert.fail("This method should have thrown an H2ZeroFinderException...");{\n}
{endif}

{\t}{\t}} catch (H2ZeroFinderException ex) {{{\n}
{\t}{\t}{\t}// do nothing - don't care{\n}
{\t}{\t}}{\n}
{\t}{\t}Assert.assertEquals(numConnections, BaseConnectionManager.comboPooledDataSource.getNumConnections());{\n}
{\t}{\t}// need to sleep to ensure that the connection has time to close - hacky... :({\n}
{\t}{\t}try {{ Thread.sleep(1); } catch (InterruptedException e) {{ /* do nothing */ }{\n}
{\t}{\t}Assert.assertEquals(numBusyConnections, BaseConnectionManager.comboPooledDataSource.getNumBusyConnections());{\n}
{\t}}{\n}

{\n}

{\t}@Test{\n}
{\t}public void test{table.javaClassName}FindAllWithNullConnectionLimitOffset() throws SQLException {{{\n}
{\t}{\t}int numConnections = BaseConnectionManager.comboPooledDataSource.getNumConnections();{\n}
{\t}{\t}int numBusyConnections = BaseConnectionManager.comboPooledDataSource.getNumBusyConnections();{\n}
{\t}{\t}try {{{\n}
{if table.isConstant}
{\t}{\t}{\t}Assert.assertEquals(1, {table.javaClassName}Finder.findAll(null, 1, 0).size());{\n}
{else}
{\t}{\t}{\t}{table.javaClassName}Finder.findAll(null, 1, 1);{\n}
{\t}{\t}{\t}Assert.fail("This method should have thrown an H2ZeroFinderException...");{\n}
{endif}

{\t}{\t}} catch (H2ZeroFinderException ex) {{{\n}
{\t}{\t}{\t}// do nothing - don't care{\n}
{\t}{\t}}{\n}
{\t}{\t}Assert.assertEquals(numConnections, BaseConnectionManager.comboPooledDataSource.getNumConnections());{\n}
{\t}{\t}// need to sleep to ensure that the connection has time to close - hacky... :({\n}
{\t}{\t}try {{ Thread.sleep(1); } catch (InterruptedException e) {{ /* do nothing */ }{\n}
{\t}{\t}Assert.assertEquals(numBusyConnections, BaseConnectionManager.comboPooledDataSource.getNumBusyConnections());{\n}
{\t}}{\n}

{\n}

{endloop}

{-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

	Now for the user finders

  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -}
{loop database.tables as table}
	{loop table.finders as finder}

{\t}@Test{\n}
{\t}public void test{table.javaClassName}{finder.name}() throws SQLException {{{\n}
{\t}{\t}int numConnections = BaseConnectionManager.comboPooledDataSource.getNumConnections();{\n}
{\t}{\t}int numBusyConnections = BaseConnectionManager.comboPooledDataSource.getNumBusyConnections();{\n}
{\t}{\t}try {{{\n}
{\t}{\t}{\t}{table.javaClassName}Finder.{finder.name}({import classpath:/tests/snippet/finder-field-params.templar});{\n}
{\t}{\t}} catch (H2ZeroFinderException ex) {{{\n}
{\t}{\t}{\t}// do nothing - expected condition{\n}
{\t}{\t}}{\n}
{\t}{\t}Assert.assertEquals(numConnections, BaseConnectionManager.comboPooledDataSource.getNumConnections());{\n}
{\t}{\t}// need to sleep to ensure that the connection has time to close - hacky... :({\n}
{\t}{\t}try {{ Thread.sleep(1); } catch (InterruptedException e) {{ /* do nothing */ }{\n}
{\t}{\t}Assert.assertEquals(numBusyConnections, BaseConnectionManager.comboPooledDataSource.getNumBusyConnections());{\n}
{\t}}{\n}
{\n}


{\t}@Test{\n}
{\t}public void test{table.javaClassName}{finder.name}Silent() throws SQLException {{{\n}
{\t}{\t}int numConnections = BaseConnectionManager.comboPooledDataSource.getNumConnections();{\n}
{\t}{\t}int numBusyConnections = BaseConnectionManager.comboPooledDataSource.getNumBusyConnections();{\n}
{\t}{\t}{table.javaClassName}Finder.{finder.name}Silent({import classpath:/tests/snippet/finder-field-params.templar});{\n}
{\t}{\t}Assert.assertEquals(numConnections, BaseConnectionManager.comboPooledDataSource.getNumConnections());{\n}
{\t}{\t}// need to sleep to ensure that the connection has time to close - hacky... :({\n}
{\t}{\t}try {{ Thread.sleep(1); } catch (InterruptedException e) {{ /* do nothing */ }{\n}
{\t}{\t}Assert.assertEquals(numBusyConnections, BaseConnectionManager.comboPooledDataSource.getNumBusyConnections());{\n}
{\t}}{\n}
{\n}


{\t}@Test{\n}
{\t}public void test{table.javaClassName}{finder.name}LimitOffset() throws SQLException {{{\n}
{\t}{\t}int numConnections = BaseConnectionManager.comboPooledDataSource.getNumConnections();{\n}
{\t}{\t}int numBusyConnections = BaseConnectionManager.comboPooledDataSource.getNumBusyConnections();{\n}
{\t}{\t}try {{{\n}
{\t}{\t}{\t}{table.javaClassName}Finder.{finder.name}({import classpath:/tests/snippet/finder-field-params.templar}{if fn:notEqual[finder.whereFields.size, "0"]}, {endif}0, 0);{\n}
{\t}{\t}} catch (H2ZeroFinderException ex) {{{\n}
{\t}{\t}{\t}// do nothing - expected condition{\n}
{\t}{\t}}{\n}
{\t}{\t}Assert.assertEquals(numConnections, BaseConnectionManager.comboPooledDataSource.getNumConnections());{\n}
{\t}{\t}// need to sleep to ensure that the connection has time to close - hacky... :({\n}
{\t}{\t}try {{ Thread.sleep(1); } catch (InterruptedException e) {{ /* do nothing */ }{\n}
{\t}{\t}Assert.assertEquals(numBusyConnections, BaseConnectionManager.comboPooledDataSource.getNumBusyConnections());{\n}
{\t}}{\n}
{\n}


{\t}@Test{\n}
{\t}public void test{table.javaClassName}{finder.name}LimitOffsetSilent() throws SQLException {{{\n}
{\t}{\t}int numConnections = BaseConnectionManager.comboPooledDataSource.getNumConnections();{\n}
{\t}{\t}int numBusyConnections = BaseConnectionManager.comboPooledDataSource.getNumBusyConnections();{\n}
{\t}{\t}{table.javaClassName}Finder.{finder.name}Silent({import classpath:/tests/snippet/finder-field-params.templar}{if fn:notEqual[finder.whereFields.size, "0"]}, {endif} 0, 0);{\n}
{\t}{\t}Assert.assertEquals(numConnections, BaseConnectionManager.comboPooledDataSource.getNumConnections());{\n}
{\t}{\t}// need to sleep to ensure that the connection has time to close - hacky... :({\n}
{\t}{\t}try {{ Thread.sleep(1); } catch (InterruptedException e) {{ /* do nothing */ }{\n}
{\t}{\t}Assert.assertEquals(numBusyConnections, BaseConnectionManager.comboPooledDataSource.getNumBusyConnections());{\n}
{\t}}{\n}
{\n}



{\t}@Test{\n}
{\t}public void test{table.javaClassName}{finder.name}WithConnection() throws SQLException {{{\n}
{\t}{\t}int numConnections = BaseConnectionManager.comboPooledDataSource.getNumConnections();{\n}
{\t}{\t}int numBusyConnections = BaseConnectionManager.comboPooledDataSource.getNumBusyConnections();{\n}
{\t}{\t}try (Connection connection = ConnectionManager.getConnection()) {{{\n}
{\t}{\t}{\t}{table.javaClassName}Finder.{finder.name}(connection{if fn:notEqual[finder.whereFields.size, "0"]}, {endif}{import classpath:/tests/snippet/finder-field-params.templar});{\n}
{\t}{\t}} catch (H2ZeroFinderException ex) {{{\n}
{\t}{\t}{\t}// do nothing - expected condition{\n}
{\t}{\t}}{\n}
{\t}{\t}Assert.assertEquals(numConnections, BaseConnectionManager.comboPooledDataSource.getNumConnections());{\n}
{\t}{\t}// need to sleep to ensure that the connection has time to close - hacky... :({\n}
{\t}{\t}try {{ Thread.sleep(1); } catch (InterruptedException e) {{ /* do nothing */ }{\n}
{\t}{\t}Assert.assertEquals(numBusyConnections, BaseConnectionManager.comboPooledDataSource.getNumBusyConnections());{\n}
{\t}}{\n}
{\n}

{\t}@Test{\n}
{\t}public void test{table.javaClassName}{finder.name}WithConnectionSilent() throws SQLException {{{\n}
{\t}{\t}int numConnections = BaseConnectionManager.comboPooledDataSource.getNumConnections();{\n}
{\t}{\t}int numBusyConnections = BaseConnectionManager.comboPooledDataSource.getNumBusyConnections();{\n}
{\t}{\t}try (Connection connection = ConnectionManager.getConnection()) {{{\n}
{\t}{\t}{\t}{table.javaClassName}Finder.{finder.name}Silent(connection{if fn:notEqual[finder.whereFields.size, "0"]}, {endif}{import classpath:/tests/snippet/finder-field-params.templar});{\n}
{\t}{\t}}{\n}
{\t}{\t}Assert.assertEquals(numConnections, BaseConnectionManager.comboPooledDataSource.getNumConnections());{\n}
{\t}{\t}// need to sleep to ensure that the connection has time to close - hacky... :({\n}
{\t}{\t}try {{ Thread.sleep(1); } catch (InterruptedException e) {{ /* do nothing */ }{\n}
{\t}{\t}Assert.assertEquals(numBusyConnections, BaseConnectionManager.comboPooledDataSource.getNumBusyConnections());{\n}
{\t}}{\n}
{\n}


{\t}@Test{\n}
{\t}public void test{table.javaClassName}{finder.name}WithNullConnection() throws SQLException {{{\n}
{\t}{\t}int numConnections = BaseConnectionManager.comboPooledDataSource.getNumConnections();{\n}
{\t}{\t}int numBusyConnections = BaseConnectionManager.comboPooledDataSource.getNumBusyConnections();{\n}
{\t}{\t}try {{{\n}
{\t}{\t}{\t}{table.javaClassName}Finder.{finder.name}(null{if fn:notEqual[finder.whereFields.size, "0"]}, {endif}{import classpath:/tests/snippet/finder-field-params.templar});{\n}
{\t}{\t}} catch (H2ZeroFinderException ex) {{{\n}
{\t}{\t}{\t}// do nothing - expected condition{\n}
{\t}{\t}}{\n}
{\t}{\t}Assert.assertEquals(numConnections, BaseConnectionManager.comboPooledDataSource.getNumConnections());{\n}
{\t}{\t}// need to sleep to ensure that the connection has time to close - hacky... :({\n}
{\t}{\t}try {{ Thread.sleep(1); } catch (InterruptedException e) {{ /* do nothing */ }{\n}
{\t}{\t}Assert.assertEquals(numBusyConnections, BaseConnectionManager.comboPooledDataSource.getNumBusyConnections());{\n}
{\t}}{\n}
{\n}


{\t}@Test{\n}
{\t}public void test{table.javaClassName}{finder.name}WithNullConnectionSilent() throws SQLException {{{\n}
{\t}{\t}int numConnections = BaseConnectionManager.comboPooledDataSource.getNumConnections();{\n}
{\t}{\t}int numBusyConnections = BaseConnectionManager.comboPooledDataSource.getNumBusyConnections();{\n}
{\t}{\t}{table.javaClassName}Finder.{finder.name}Silent(null{if fn:notEqual[finder.whereFields.size, "0"]}, {endif}{import classpath:/tests/snippet/finder-field-params.templar});{\n}
{\t}{\t}Assert.assertEquals(numConnections, BaseConnectionManager.comboPooledDataSource.getNumConnections());{\n}
{\t}{\t}// need to sleep to ensure that the connection has time to close - hacky... :({\n}
{\t}{\t}try {{ Thread.sleep(1); } catch (InterruptedException e) {{ /* do nothing */ }{\n}
{\t}{\t}Assert.assertEquals(numBusyConnections, BaseConnectionManager.comboPooledDataSource.getNumBusyConnections());{\n}
{\t}}{\n}
{\n}




{\t}@Test{\n}
{\t}public void test{table.javaClassName}{finder.name}WithNullConnectionLimitOffset() throws SQLException {{{\n}
{\t}{\t}int numConnections = BaseConnectionManager.comboPooledDataSource.getNumConnections();{\n}
{\t}{\t}int numBusyConnections = BaseConnectionManager.comboPooledDataSource.getNumBusyConnections();{\n}
{\t}{\t}try {{{\n}
{\t}{\t}{\t}{table.javaClassName}Finder.{finder.name}(null{if fn:notEqual[finder.whereFields.size, "0"]}, {endif}{import classpath:/tests/snippet/finder-field-params.templar}, 0, 0);{\n}
{\t}{\t}} catch (H2ZeroFinderException ex) {{{\n}
{\t}{\t}{\t}// do nothing - expected condition{\n}
{\t}{\t}}{\n}
{\t}{\t}Assert.assertEquals(numConnections, BaseConnectionManager.comboPooledDataSource.getNumConnections());{\n}
{\t}{\t}// need to sleep to ensure that the connection has time to close - hacky... :({\n}
{\t}{\t}try {{ Thread.sleep(1); } catch (InterruptedException e) {{ /* do nothing */ }{\n}
{\t}{\t}Assert.assertEquals(numBusyConnections, BaseConnectionManager.comboPooledDataSource.getNumBusyConnections());{\n}
{\t}}{\n}
{\n}


{\t}@Test{\n}
{\t}public void test{table.javaClassName}{finder.name}WithNullConnectionLimitOffsetSilent() throws SQLException {{{\n}
{\t}{\t}int numConnections = BaseConnectionManager.comboPooledDataSource.getNumConnections();{\n}
{\t}{\t}int numBusyConnections = BaseConnectionManager.comboPooledDataSource.getNumBusyConnections();{\n}
{\t}{\t}{table.javaClassName}Finder.{finder.name}Silent(null{if fn:notEqual[finder.whereFields.size, "0"]}, {endif}{import classpath:/tests/snippet/finder-field-params.templar}, 0, 0);{\n}
{\t}{\t}Assert.assertEquals(numConnections, BaseConnectionManager.comboPooledDataSource.getNumConnections());{\n}
{\t}{\t}// need to sleep to ensure that the connection has time to close - hacky... :({\n}
{\t}{\t}try {{ Thread.sleep(1); } catch (InterruptedException e) {{ /* do nothing */ }{\n}
{\t}{\t}Assert.assertEquals(numBusyConnections, BaseConnectionManager.comboPooledDataSource.getNumBusyConnections());{\n}
{\t}}{\n}
{\n}




{\t}@Test{\n}
{\t}public void test{table.javaClassName}{finder.name}WithNullConnectionNullLimitNullOffset() throws SQLException {{{\n}
{\t}{\t}int numConnections = BaseConnectionManager.comboPooledDataSource.getNumConnections();{\n}
{\t}{\t}int numBusyConnections = BaseConnectionManager.comboPooledDataSource.getNumBusyConnections();{\n}
{\t}{\t}try {{{\n}
{\t}{\t}{\t}{table.javaClassName}Finder.{finder.name}(null{if fn:notEqual[finder.whereFields.size, "0"]}, {endif}{import classpath:/tests/snippet/finder-field-params.templar}, null, null);{\n}
{\t}{\t}} catch (H2ZeroFinderException ex) {{{\n}
{\t}{\t}{\t}// do nothing - expected condition{\n}
{\t}{\t}}{\n}
{\t}{\t}Assert.assertEquals(numConnections, BaseConnectionManager.comboPooledDataSource.getNumConnections());{\n}
{\t}{\t}// need to sleep to ensure that the connection has time to close - hacky... :({\n}
{\t}{\t}try {{ Thread.sleep(1); } catch (InterruptedException e) {{ /* do nothing */ }{\n}
{\t}{\t}Assert.assertEquals(numBusyConnections, BaseConnectionManager.comboPooledDataSource.getNumBusyConnections());{\n}
{\t}}{\n}
{\n}


{\t}@Test{\n}
{\t}public void test{table.javaClassName}{finder.name}WithNullConnectionNullLimitNullOffsetSilent() throws SQLException {{{\n}
{\t}{\t}int numConnections = BaseConnectionManager.comboPooledDataSource.getNumConnections();{\n}
{\t}{\t}int numBusyConnections = BaseConnectionManager.comboPooledDataSource.getNumBusyConnections();{\n}
{\t}{\t}{table.javaClassName}Finder.{finder.name}Silent(null{if fn:notEqual[finder.whereFields.size, "0"]}, {endif}{import classpath:/tests/snippet/finder-field-params.templar}, null, null);{\n}
{\t}{\t}Assert.assertEquals(numConnections, BaseConnectionManager.comboPooledDataSource.getNumConnections());{\n}
{\t}{\t}// need to sleep to ensure that the connection has time to close - hacky... :({\n}
{\t}{\t}try {{ Thread.sleep(1); } catch (InterruptedException e) {{ /* do nothing */ }{\n}
{\t}{\t}Assert.assertEquals(numBusyConnections, BaseConnectionManager.comboPooledDataSource.getNumBusyConnections());{\n}
{\t}}{\n}
{\n}

	{endloop}
{endloop}


{-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

	Now for the user finders with a select clause

	these are subtly different as they return a bean or a list of beans, but
	the same

  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -}
{loop database.tables as table}
	{loop table.finders as finder}
		{if fn:notNull[finder.selectClause]}
		{endif}
	{endloop}
{endloop}


}{\n}