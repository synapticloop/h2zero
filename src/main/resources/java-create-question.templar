{-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
		PACKAGE DECLARATION, IMPORT STATEMENTS AND CLASS DEFINITION
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --}

package {database.package}.question;{\n}{\n}
// - - - - thoughtfully generated by synapticloop h2zero - - - - {\n}
//    with the use of synapticloop templar templating language{\n}
//                (java-create-question.templar){\n}{\n}

{import classpath:/snippet/global/java-model-imports.templar}

{if table.hasQuestionInFields}
	import java.util.HashMap;{\n}
	import java.util.Map;{\n}
{endif}

import java.util.List;{\n}
{\n}

public class {table.javaClassName}Question {{{\n}
	{set table as baseSchemaObject}
	{import classpath:/snippet/global/java-binder-declaration.templar}
	{\t}{set "Question" as classType}{set baseSchemaObject.javaClassName as loggerClass}{import classpath:/snippet/global/java-logger-declaration.templar}{\n}{\n}
	{\n}

{-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
				THE QUESTION FINDERS FOR THE SELECT CLAUSES AND NORMAL CLAUSES
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --}

{loop table.questions as question}
	{\t}private static final String SQL_{question.staticName} = "{question.selectClause}"
	{if fn:notNull[question.whereClause]} + " {question.whereClause}"{endif}
	{if fn:notNull[question.orderBy]} + " order by {question.orderBy}"{endif};{\n}
{endloop}
{\n}

{-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
				THE Question FINDERS FOR THE SELECT CLAUSES CACHES
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --}

{loop table.questions as question}
	{if question.hasInFields}
		{\t}private static Map<String, String> {question.name}_statement_cache = new HashMap<String, String>();{\n}
	{endif}
{endloop}

{\t}private {table.javaClassName}Question() {{}{\n}{\n}

{-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
				AND THE SELECT CLAUSE QUESTIONS
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --}

{loop table.questions as question}
	{set question as baseQueryObject}

	{\t}public static boolean {question.name}(Connection connection
		{import classpath:/snippet/global/java-method-parameters-with-connection.templar}
	) throws SQLException {{{\n}

	{\t}{\t}PreparedStatement preparedStatement = null;{\n}
	{\t}{\t}ResultSet resultSet = null;{\n}
	{\t}{\t}boolean answer = false;{\n}


	{\t}{\t}try {{{\n}

	{import classpath:/snippet/global/java-sql-parameter-setting.templar}

	{\n}
	{\t}{\t}{\t}resultSet = preparedStatement.executeQuery();{\n}
	{\t}{\t}{\t}if(resultSet.next()) {{{\n}
	{\t}{\t}{\t}{\t}answer = resultSet.getBoolean(1);{\n}
	{\t}{\t}{\t}}{\n}
	{\t}{\t}} catch (SQLException sqlex) {{{\n}
	{\t}{\t}{\t}throw sqlex;{\n}
	{\t}{\t}} finally {{{\n}
	{\t}{\t}{\t}ConnectionManager.closeAll(resultSet, preparedStatement);{\n}
	{\t}{\t}}{\n}
	{\t}{\t}return(answer);{\n}
	{\t}}{\n}
{\n}

	{\t}public static boolean {question.name}(
		{import classpath:/snippet/global/java-method-parameters.templar}
	) throws SQLException {{{\n}

	{\t}{\t}Connection connection = null;{\n}
	{\n}

	{\t}{\t}try {{{\n}
	{\t}{\t}{\t}connection = ConnectionManager.getConnection();{\n}
	{\t}{\t}{\t}return({question.name}(connection
		{import classpath:/snippet/global/java-method-parameters-call-with-connection.templar}
		));{\n}
	{\t}{\t}} catch (SQLException sqlex) {{{\n}
	{\t}{\t}{\t}throw sqlex;{\n}
	{\t}{\t}} finally {{{\n}
	{\t}{\t}{\t}ConnectionManager.closeAll(connection);{\n}
	{\t}{\t}}{\n}
	{\t}}{\n}
{\n}

	{\t}public static boolean {question.name}Silent(Connection connection
		{import classpath:/snippet/global/java-method-parameters-with-connection.templar}
	) {{{\n}

	{\t}{\t}try {{{\n}
	{\t}{\t}{\t}return({question.name}(connection
		{import classpath:/snippet/global/java-method-parameters-call-with-connection.templar}
		));{\n}

	{\t}{\t}} catch(SQLException sqlex) {{{\n}
		{import classpath:/snippet/global/exception-sql-log-silent.templar}
	{\t}{\t}{\t}return(false);{\n}
	{\t}{\t}}{\n}

	{\t}}{\n}
{\n}

	{\t}public static boolean {question.name}Silent(
		{import classpath:/snippet/global/java-method-parameters.templar}
	) {{{\n}

	{\t}{\t}try {{{\n}
	{\t}{\t}{\t}return({question.name}(
		{import classpath:/snippet/global/java-method-parameters-call.templar}
		));{\n}

	{\t}{\t}} catch(SQLException sqlex) {{{\n}
		{import classpath:/snippet/global/exception-sql-log-silent.templar}
	{\t}{\t}{\t}return(false);{\n}
	{\t}{\t}}{\n}

	{\t}}{\n}
{\n}

{endloop}
}
