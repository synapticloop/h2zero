{-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
		PACKAGE DECLARATION, IMPORT STATEMENTS AND CLASS DEFINITION

		NOTES:
		  If the table is a constant - then this file will not be generated
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --}

package {database.package}.deleter;{\n}{\n}
// - - - - thoughtfully generated by synapticloop h2zero - - - - {\n}
//    with the use of synapticloop templar templating language{\n}
//                (java-create-deleter.templar){\n}{\n}
import java.sql.Connection;{\n}
import java.sql.Timestamp;{\n}
import java.sql.PreparedStatement;{\n}
import java.sql.SQLException;{\n}
import java.sql.*;{\n}
import java.math.BigDecimal;{\n}
import java.util.List;{\n}
import java.util.ArrayList;{\n}
import com.synapticloop.h2zero.util.LruCache;{\n}

{\n}
import com.synapticloop.h2zero.base.manager.{options.database}.ConnectionManager;{\n}
import com.synapticloop.h2zero.base.sql.{options.database}.Deleter;{\n}

{\n}
{import classpath:/snippet/global/java-logger.templar}
{\n}

import {database.package}.model.util.Constants;{\n}
{\n}

public class {table.javaClassName}Deleter {{{\n}
{-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
				THE DELETER STRINGS FIELDS
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --}
{set table as baseSchemaObject}
{import classpath:/snippet/global/java-binder-declaration.templar}

{set "Deleter" as classType}
{set table.javaClassName as loggerClass}

{import classpath:/snippet/global/java-logger-declaration.templar}{\n}

{\t}// static fields generated by synapticloop h2zero{\n}

{if fn:or[table.hasForeignKey, fn:=[options.database, "sqlite3"]]}
	{\t}private static final String SQL_BUILTIN_DELETE_ALL = "delete from {table.name}";{\n}
{else}
	{\t}private static final String SQL_BUILTIN_DELETE_ALL = "truncate table {table.name}";{\n}
{endif}

{\t}private static final String SQL_DELETE_START = "delete from {table.name} ";{\n}
{loop table.fields as field}
	{if field.primary}
		{set field.name as primaryFieldName}
		{set field.javaName as primaryFieldJavaName}
	{endif}
{endloop}

{\t}private static final String SQL_BUILTIN_DELETE_BY_PRIMARY_KEY = SQL_DELETE_START + "where {primaryFieldName} = ?";{\n}{\n}

{loop table.deleters as deleter}
	{if deleterStatus.first}
		{\t}// static fields generated from the user input{\n}
	{endif}
	{\t}private static final String SQL_{deleter.staticName} = SQL_DELETE_START
	{if fn:notNull[deleter.whereClause]} + " {deleter.whereClause}"{endif};{\n}
{endloop}

{--
The statement caches
}

{set tableOrView.deleters as queryObjects}
{if fn:null[deleter]}
	{set "1024" as statementCacheSize}
{else}
	{set deleter.statementCacheSize as statementCacheSize}
{endif}
{set "delete" as allName}
{import classpath:/snippet/global/java-query-objects-statement-caches.templar}

{\n}
{\t}// We don't allow instantiation{\n}
{\t}private {table.javaClassName}Deleter() {{}{\n}{\n}
{-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
				DELETE BY PRIMARY KEY
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --}
 {\t}/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *{\n}
 {\t} * {\n}
 {\t} * The following deleters are built in by h2zero and are always generated {\n}
 {\t} * {\n}
 {\t} * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */{\n}{\n}


{\t}/**{\n}
{\t} * Delete a row in the {table.upperName} table by its primary key{\n}
{\t} * {\n}
{\t} * @param {primaryFieldJavaName} the primary key to delete{\n}
{\t} * {\n}
{\t} * @return the number of rows deleted{\n}
{\t} * {\n}
{\t} */{\n}

{\t}public static Deleter deleteByPrimaryKey(Long {primaryFieldJavaName}) {{{\n}
{\t}{\t}return({\n}
{\t}{\t}{\t}{\t}new Deleter({\n}
{\t}{\t}{\t}{\t}LOGGER,{\n}
{\t}{\t}{\t}{\t}SQL_BUILTIN_DELETE_BY_PRIMARY_KEY,{\n}
{\t}{\t}{\t}{\t}new Object[] {{ {primaryFieldJavaName} }{\n}
{\t}{\t}));{\n}
{\t}}{\n}


{-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
				DELETE ALL STATEMENT
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --}

{\t}/**{\n}
{\t} * Delete all of the rows in the table '{table.name}'.{\n}
{if fn:or[table.hasForeignKey, fn:=[options.database, "sqlite3"]]}
	{if fn:=[options.database, "sqlite3"]}
		{\t} * {\n}
		{\t} * This database does not have the 'truncate' keyword hence the 'DELETE FROM' SQL{\n}
		{\t} * statement is used{\n}
	{else}
		{\t} * {\n}
		{\t} * This table has a foreign key relationship on it, consequently the truncate{\n}
		{\t} * method would have been faster, but would fail, hence the 'DELETE FROM' SQL{\n}
		{\t} * statement is used{\n}
	{endif}
{else}
	{\t} * {\n}
	{\t} * This table has no foreign key relationships and consequently can be truncated.{\n}
{endif}
{\t} * {\n}
{\t} * {\n}
{\t} * @return The number of rows affected by this statement{\n}
{\t} */{\n}
{\t}public static Deleter deleteAll() {{{\n}
{\t}{\t}return({\n}
{\t}{\t}{\t}{\t}new Deleter({\n}
{\t}{\t}{\t}{\t}LOGGER,{\n}
{\t}{\t}{\t}{\t}SQL_BUILTIN_DELETE_ALL,{\n}
{\t}{\t}{\t}{\t}new Object[] {{ }{\n}
{\t}{\t}));{\n}
{\t}}{\n}




{-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 


				THE USER DELETER STATEMENTS


 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --}

{set tableOrView.deleters as queryObjects}
{set tableOrView.name as tableName}
{set "Deleter" as type}
{import classpath:/snippet/global/java-query-objects-user-comments.templar}

{loop table.deleters as deleter}
	{set fn:length[deleter.whereFields] as deleterFieldsLength}

{-- SQLITE DOES NOT ALLOW LIMITS ON DELETERS }
	{\t}// USER DEFINED DELETER CONNECTION, PARAMS, LIMIT{\n}
	{\t}/**{\n}
	{\t} * {deleter.name} - {if deleter.isAutoDeleter}from 'fieldDeleters' JSON key{else}from 'deleters' JSON key{endif}{\n}
	{\t} *{\n}
	{\t} * This is the main method for all other deleter methods with the same prefix,{\n}
	{\t} * including the (silent method signatures).  All methods chain to this one.{\n}
	{\t} * {\n}

{set deleter as queryObject}
{set tableOrView.name as tableName}
{set "false" as hasConnection}
{set "false" as hasLimit}
{set "false" as hasOffset}
{import classpath:/snippet/global/java-query-objects-method-where-comments.templar}

	{\t} * {\n}
	{\t} * @return the Deleter{\n}
	{\t} * {\n}
	{\t} */{\n}
	{\t}public static Deleter {deleter.name}(
{set deleter as queryObject}
{set "false" as hasConnection}
{set "false" as hasLimit}
{set "false" as hasOffset}
{import classpath:/snippet/global/java-query-objects-method-where-parameters.templar} ) {{{\n}
{\t}{\t}return({\n}
{\t}{\t}{\t}{\t}new Deleter({\n}
{\t}{\t}{\t}{\t}LOGGER,{\n}
{\t}{\t}{\t}{\t}SQL_{deleter.staticName},{\n}
{\t}{\t}{\t}{\t}new Object[] {{
{loop queryObject.whereFields as whereField}
	{whereField.javaName}{if whereField.isInField}List{endif}
	{if whereFieldStatus.last}{else}, {endif}{endloop} }{\n}
{\t}{\t}));{\n}
{\t}}{\n}
{endloop}
}