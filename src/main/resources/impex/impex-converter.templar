package {database.package}.impex;{\n}{\n}
// - - - - thoughtfully generated by synapticloop h2zero - - - -{\n}
//    with the use of synapticloop templar templating language{\n}
//                 (/impex/impex-converter.templar){\n}
{\n}
{\n}
import com.synapticloop.h2zero.exception.H2ZeroParseException;{\n}
{\n}
import java.math.BigDecimal;{\n}
import java.sql.Date;{\n}
import java.sql.Timestamp;{\n}
{\n}
public class ImpexConverter {{{\n}
{\t}private static void throwIfNotAllowableNullRepresentation(String value, boolean allowNulls) throws H2ZeroParseException {{{\n}
{\t}{\t}if (value.length() == 0 && !allowNulls) {{{\n}
{\t}{\t}{\t}throw new H2ZeroParseException("Value for field is an empty string (i.e. null), but nulls are not allowed.");{\n}
{\t}{\t}}{\n}
{\t}}{\n}
{\n}
{\t}public static Long convertLong(String value, boolean allowNulls) throws H2ZeroParseException {{{\n}
{\t}{\t}throwIfNotAllowableNullRepresentation(value, allowNulls);{\n}
{\t}{\t}// we only get here if we haven't thrown{\n}
{\t}{\t}if (value.length() == 0) {{{\n}
{\t}{\t}{\t}return (null);{\n}
{\t}{\t}}{\n}
{\n}
{\t}{\t}// now parse{\n}
{\t}{\t}try {{{\n}
{\t}{\t}{\t}return (Long.valueOf(value));{\n}
{\t}{\t}} catch (NumberFormatException ex) {{{\n}
{\t}{\t}{\t}throw new H2ZeroParseException(String.format("Could not parse value '%s' to a Long.", value));{\n}
{\t}{\t}}{\n}
{\t}}{\n}
{\n}
{\t}public static Boolean convertBoolean(String value, boolean allowNulls) throws H2ZeroParseException {{{\n}
{\t}{\t}throwIfNotAllowableNullRepresentation(value, allowNulls);{\n}
{\n}
{\t}{\t}// we only get here if we haven't thrown{\n}
{\t}{\t}if (value.length() == 0) {{{\n}
{\t}{\t}{\t}return (null);{\n}
{\t}{\t}}{\n}
{\n}
{\t}{\t}// now parse{\n}
{\t}{\t}return switch (value) {{{\n}
{\t}{\t}{\t}case "1" -> (true);{\n}
{\t}{\t}{\t}case "0" -> (false);{\n}
{\t}{\t}{\t}default ->{\n}
{\t}{\t}{\t}{\t}{\t}throw new H2ZeroParseException("Could not parse Boolean value of '%s', allowable values are '1' for 'true' and '0' for 'false'.");{\n}
{\t}{\t}};{\n}
{\t}}{\n}
{\n}
{\t}public static Date convertDate(String value, boolean allowNulls) throws H2ZeroParseException {{{\n}
{\t}{\t}throwIfNotAllowableNullRepresentation(value, allowNulls);{\n}
{\n}
{\t}{\t}// we only get here if we haven't thrown{\n}
{\t}{\t}if (value.length() == 0) {{{\n}
{\t}{\t}{\t}return (null);{\n}
{\t}{\t}}{\n}
{\n}
{\t}{\t}// this should not happen as we have checked above - however we may not be{\n}
{\t}{\t}// able to parse the long{\n}
{\t}{\t}try {{{\n}
{\t}{\t}{\t}return (new Date(convertLong(value, allowNulls)));{\n}
{\t}{\t}} catch (H2ZeroParseException ex) {{{\n}
{\t}{\t}{\t}throw new H2ZeroParseException(String.format("Could not parse a Date from its component long value. Original exception: %s", ex.getMessage()));{\n}
{\t}{\t}}{\n}
{\t}}{\n}
{\n}
{\t}public static Timestamp convertTimestamp(String value, boolean allowNulls) throws H2ZeroParseException {{{\n}
{\t}{\t}throwIfNotAllowableNullRepresentation(value, allowNulls);{\n}
{\n}
{\t}{\t}// we only get here if we haven't thrown{\n}
{\t}{\t}if (value.length() == 0) {{{\n}
{\t}{\t}{\t}return (null);{\n}
{\t}{\t}}{\n}
{\n}
{\t}{\t}// this should not happen as we have checked above - however we may not be{\n}
{\t}{\t}// able to parse the long{\n}
{\t}{\t}try {{{\n}
{\t}{\t}{\t}return (new Timestamp(convertLong(value, allowNulls)));{\n}
{\t}{\t}} catch (H2ZeroParseException ex) {{{\n}
{\t}{\t}{\t}throw new H2ZeroParseException(String.format("Could not parse a Date from its component long value. Original exception: %s", ex.getMessage()));{\n}
{\t}{\t}}{\n}
{\n}
{\t}}{\n}
{\n}
{\t}public static Double convertDouble(String value, boolean allowNulls) throws H2ZeroParseException {{{\n}
{\t}{\t}throwIfNotAllowableNullRepresentation(value, allowNulls);{\n}
{\n}
{\t}{\t}// we only get here if we haven't thrown{\n}
{\t}{\t}if (value.length() == 0) {{{\n}
{\t}{\t}{\t}return (null);{\n}
{\t}{\t}}{\n}
{\n}
{\t}{\t}try {{{\n}
{\t}{\t}{\t}return(Double.valueOf(value));{\n}
{\t}{\t}} catch (NumberFormatException ex) {{{\n}
{\t}{\t}{\t}throw new H2ZeroParseException(String.format("Could not parse Double value of '%s'.", value));{\n}
{\t}{\t}}{\n}
{\t}}{\n}
{\n}
{\t}public static Float convertFloat(String value, boolean allowNulls) throws H2ZeroParseException {{{\n}
{\t}{\t}throwIfNotAllowableNullRepresentation(value, allowNulls);{\n}
{\n}
{\t}{\t}// we only get here if we haven't thrown{\n}
{\t}{\t}if (value.length() == 0) {{{\n}
{\t}{\t}{\t}return (null);{\n}
{\t}{\t}}{\n}
{\n}
{\t}{\t}try {{{\n}
{\t}{\t}{\t}return(Float.valueOf(value));{\n}
{\t}{\t}} catch (NumberFormatException ex) {{{\n}
{\t}{\t}{\t}throw new H2ZeroParseException(String.format("Could not parse Float value of '%s'.", value));{\n}
{\t}{\t}}{\n}
{\t}}{\n}
{\n}
{\t}public static Integer convertInteger(String value, boolean allowNulls) throws H2ZeroParseException {{{\n}
{\t}{\t}throwIfNotAllowableNullRepresentation(value, allowNulls);{\n}
{\n}
{\t}{\t}// we only get here if we haven't thrown{\n}
{\t}{\t}if (value.length() == 0) {{{\n}
{\t}{\t}{\t}return (null);{\n}
{\t}{\t}}{\n}
{\n}
{\t}{\t}try {{{\n}
{\t}{\t}{\t}return(Integer.valueOf(value));{\n}
{\t}{\t}} catch (NumberFormatException ex) {{{\n}
{\t}{\t}{\t}throw new H2ZeroParseException(String.format("Could not parse Integer value of '%s'.", value));{\n}
{\t}{\t}}{\n}
{\t}}{\n}
{\n}
{\t}public static BigDecimal convertBigDecimal(String value, boolean allowNulls) throws H2ZeroParseException {{{\n}
{\t}{\t}throwIfNotAllowableNullRepresentation(value, allowNulls);{\n}
{\n}
{\t}{\t}// we only get here if we haven't thrown{\n}
{\t}{\t}if (value.length() == 0) {{{\n}
{\t}{\t}{\t}return (null);{\n}
{\t}{\t}}{\n}
{\n}
{\t}{\t}try {{{\n}
{\t}{\t}{\t}return(new BigDecimal(value));{\n}
{\t}{\t}} catch (NumberFormatException ex) {{{\n}
{\t}{\t}{\t}throw new H2ZeroParseException(String.format("Could not parse BigDecimal value of '%s'.", value));{\n}
{\t}{\t}}{\n}
{\t}}{\n}
{\n}
{\t}public static Short convertShort(String value, boolean allowNulls) throws H2ZeroParseException {{{\n}
{\t}{\t}throwIfNotAllowableNullRepresentation(value, allowNulls);{\n}
{\n}
{\t}{\t}// we only get here if we haven't thrown{\n}
{\t}{\t}if (value.length() == 0) {{{\n}
{\t}{\t}{\t}return (null);{\n}
{\t}{\t}}{\n}
{\n}
{\t}{\t}try {{{\n}
{\t}{\t}{\t}return(Short.valueOf(value));{\n}
{\t}{\t}} catch (NumberFormatException ex) {{{\n}
{\t}{\t}{\t}throw new H2ZeroParseException(String.format("Could not parse Short value of '%s'.", value));{\n}
{\t}{\t}}{\n}
{\t}}{\n}
{\n}
{\t}public static String convertString(String value, boolean allowNulls) throws H2ZeroParseException {{{\n}
{\t}{\t}// string always start and end with a '"' character{\n}
{\t}{\t}if (value.length() == 2 && !allowNulls) {{{\n}
{\t}{\t}{\t}throw new H2ZeroParseException("Value for field is an empty string (i.e. null), but nulls are not allowed.");{\n}
{\t}{\t}}{\n}
{\n}
{\t}{\t}// we only get here if we haven't thrown{\n}
{\t}{\t}if (value.length() == 2) {{{\n}
{\t}{\t}{\t}return (null);{\n}
{\t}{\t}}{\n}
{\n}
{\t}{\t}return(value.substring(0, value.length() -1){\n}
{\t}{\t}{\t}{\t}.replace("\\r", "\r"){\n}
{\t}{\t}{\t}{\t}.replace("\\f", "\f"){\n}
{\t}{\t}{\t}{\t}.replace("\\t", "\t"));{\n}
{\t}}{\n}
{\n}
{\t}private static String convertToDefaultString(Object value) {{{\n}
{\t}{\t}if(value == null) {{{\n}
{\t}{\t}{\t}return("");{\n}
{\t}{\t}} else {{{\n}
{\t}{\t}{\t}return(value.toString());{\n}
{\t}{\t}}{\n}
{\t}}{\n}
{\n}
{\t}public static String convertToString(Long value) {{{\n}
{\t}{\t}return(convertToDefaultString(value));{\n}
{\t}}{\n}
{\n}
{\t}public static String convertToString(Boolean value) {{{\n}
{\t}{\t}if(value == null) {{{\n}
{\t}{\t}{\t}return("");{\n}
{\t}{\t}} else {{{\n}
{\t}{\t}{\t}if(value == true) {{{\n}
{\t}{\t}{\t}{\t}return("1");{\n}
{\t}{\t}{\t}} else {{{\n}
{\t}{\t}{\t}{\t}return("0");{\n}
{\t}{\t}{\t}}{\n}
{\t}{\t}}{\n}
{\t}}{\n}
{\n}
{\t}public static String convertToString(Date value) {{{\n}
{\t}{\t}if(value == null) {{{\n}
{\t}{\t}{\t}return("");{\n}
{\t}{\t}} else {{{\n}
{\t}{\t}{\t}return(value.getTime() + "");{\n}
{\t}{\t}}{\n}
{\t}}{\n}
{\n}
{\t}public static String convertToString(Timestamp value) {{{\n}
{\t}{\t}if(value == null) {{{\n}
{\t}{\t}{\t}return("");{\n}
{\t}{\t}} else {{{\n}
{\t}{\t}{\t}return(value.getTime() + "");{\n}
{\t}{\t}}{\n}
{\t}}{\n}
{\n}
{\t}public static String convertToString(Double value) {{{\n}
{\t}{\t}return(convertToDefaultString(value));{\n}
{\t}}{\n}
{\n}
{\t}public static String convertToString(Float value) {{{\n}
{\t}{\t}return(convertToDefaultString(value));{\n}
{\t}}{\n}
{\n}
{\t}public static String convertToString(Integer value) {{{\n}
{\t}{\t}return(convertToDefaultString(value));{\n}
{\t}}{\n}
{\n}
{\t}public static String convertToString(BigDecimal value) {{{\n}
{\t}{\t}return(convertToDefaultString(value));{\n}
{\t}}{\n}
{\n}
{\t}public static String convertToString(Short value) {{{\n}
{\t}{\t}return(convertToDefaultString(value));{\n}
{\t}}{\n}
{\n}
{\t}public static String convertToString(String value) {{{\n}
{\t}{\t}if(value == null) {{{\n}
{\t}{\t}{\t}return("");{\n}
{\t}{\t}} else {{{\n}
{\t}{\t}{\t}return(String.format("\"%s\"", value));{\n}
{\t}{\t}}{\n}
{\t}}{\n}
}{\n}