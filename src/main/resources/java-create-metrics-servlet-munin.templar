package {database.package}.servlet;{\n}{\n}

// - - - - thoughtfully generated by synapticloop h2zero - - - - {\n}
//    with the use of synapticloop templar templating language{\n}
//         (java-create-metrics-servlet-munin.templar){\n}{\n}
{\n}
import java.io.IOException;{\n}
import java.io.PrintWriter;{\n}
import java.util.HashMap;{\n}
import java.util.Iterator;{\n}
import java.util.SortedMap;{\n}
{\n}
import javax.servlet.ServletException;{\n}
import javax.servlet.http.HttpServlet;{\n}
import javax.servlet.http.HttpServletRequest;{\n}
import javax.servlet.http.HttpServletResponse;{\n}
{\n}
import com.codahale.metrics.MetricRegistry;{\n}
{\n}
import com.synapticloop.h2zero.base.manager.MetricsManager;{\n}
{\n}
import com.codahale.metrics.Metric;{\n}
import com.codahale.metrics.Counter;{\n}
import com.codahale.metrics.Gauge;{\n}
import com.codahale.metrics.Histogram;{\n}
import com.codahale.metrics.Meter;{\n}
import com.codahale.metrics.RatioGauge;{\n}
import com.codahale.metrics.Timer;{\n}
{\n}
{\n}

{loop database.tables as table}
import static {database.package}.metrics.{table.javaClassName}Metrics.*;{\n}
{endloop}
{\n}

@SuppressWarnings("serial"){\n}
public class MuninMetricsServlet extends HttpServlet {{{\n}
{\t}private static final int LIST_METRICS_ALL = Integer.MAX_VALUE;{\n}
{\t}private static final int LIST_METRICS_GAUGES = Integer.MAX_VALUE - 1;{\n}
{\t}private static final int LIST_METRICS_TIMERS = Integer.MAX_VALUE - 2;{\n}
{\t}private static final int LIST_METRICS_HISTOGRAMS = Integer.MAX_VALUE - 3;{\n}
{\t}private static final int LIST_METRICS_COUNTERS = Integer.MAX_VALUE - 4;{\n}
{\t}private static final int LIST_METRICS_METERS = Integer.MAX_VALUE - 5;{\n}
{\n}
{\t}private static final int GET_METRICS_TABLES = Integer.MAX_VALUE - 1000;{\n}
{\t}private static final int GET_METRICS_TABLES_RATIO = Integer.MAX_VALUE - 1001;{\n}
{\t}private static final int GET_METRICS_TABLES_INTERACTION_RATIO = Integer.MAX_VALUE - 1002;{\n}

{loop database.tables as table}
	{\t}private static final int GET_METRICS_TABLES_INTERACTION_RATIO_{table.name} = Integer.MAX_VALUE - 10000 - {tableStatus.index};{\n}
{endloop}

{\n}
{\t}private static HashMap<String, Integer> METHOD_LOOKUP = new HashMap<String, Integer>();{\n}
{\t}static {{{\n}
{\t}{\t}METHOD_LOOKUP.put("/list-metrics/all/", LIST_METRICS_ALL);{\n}
{\t}{\t}METHOD_LOOKUP.put("/list-metrics/gauges/", LIST_METRICS_GAUGES);{\n}
{\t}{\t}METHOD_LOOKUP.put("/list-metrics/timers/", LIST_METRICS_TIMERS);{\n}
{\t}{\t}METHOD_LOOKUP.put("/list-metrics/histograms/", LIST_METRICS_HISTOGRAMS);{\n}
{\t}{\t}METHOD_LOOKUP.put("/list-metrics/counters/", LIST_METRICS_COUNTERS);{\n}
{\t}{\t}METHOD_LOOKUP.put("/list-metrics/meters/", LIST_METRICS_METERS);{\n}
{\t}{\t}METHOD_LOOKUP.put("/get-metrics/tables/ratio/", GET_METRICS_TABLES_RATIO);{\n}
{\t}{\t}METHOD_LOOKUP.put("/get-metrics/tables/interaction/ratio/", GET_METRICS_TABLES_INTERACTION_RATIO);{\n}

{loop database.tables as table}
	{\t}{\t}METHOD_LOOKUP.put("/get-metrics/tables/interaction/ratio/{table.name}/", GET_METRICS_TABLES_INTERACTION_RATIO_{table.name});{\n}
{endloop}

{\n}
{\t}{\t}METHOD_LOOKUP.put("/get-metrics/tables/", GET_METRICS_TABLES);{\n}
{\t}}{\n}
{\n}
{\t}protected void doGet(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws ServletException, IOException {{{\n}
{\t}{\t}String pathInfo = httpServletRequest.getPathInfo();{\n}
{\t}{\t}PrintWriter printWriter = httpServletResponse.getWriter();{\n}
{\n}

{\t}{\t}if(pathInfo.equals("/")) {{{\n}
{\t}{\t}{\t}// just print out the list of URLs that are available{\n}
{\t}{\t}{\t}Iterator<String> iterator = METHOD_LOOKUP.keySet().iterator();{\n}
{\t}{\t}{\t}while (iterator.hasNext()) {{{\n}
{\t}{\t}{\t}{\t}String url = (String) iterator.next();{\n}
{\t}{\t}{\t}{\t}printWriter.write(url + "\n");{\n}
{\t}{\t}{\t}}{\n}
{\t}{\t}{\t}return;{\n}
{\t}{\t}}{\n}

{\t}{\t}boolean isConfig = false;{\n}
{\n}
{\t}{\t}if(pathInfo.endsWith("/config/")) {{{\n}
{\t}{\t}{\t}pathInfo = pathInfo.substring(0, pathInfo.lastIndexOf("config/"));{\n}
{\t}{\t}{\t}isConfig = true;{\n}
{\t}{\t}}{\n}
{\n}
{\t}{\t}if(METHOD_LOOKUP.containsKey(pathInfo)) {{{\n}
{\t}{\t}{\t}switch(METHOD_LOOKUP.get(pathInfo)) {{{\n}
{\t}{\t}{\t}case LIST_METRICS_ALL:{\n}
{\t}{\t}{\t}{\t}listAllMetrics(printWriter);{\n}
{\t}{\t}{\t}{\t}break;{\n}
{\t}{\t}{\t}case LIST_METRICS_GAUGES:{\n}
{\t}{\t}{\t}{\t}listGauges(printWriter);{\n}
{\t}{\t}{\t}{\t}break;{\n}
{\t}{\t}{\t}case LIST_METRICS_TIMERS:{\n}
{\t}{\t}{\t}{\t}listTimers(printWriter);{\n}
{\t}{\t}{\t}{\t}break;{\n}
{\t}{\t}{\t}case LIST_METRICS_HISTOGRAMS:{\n}
{\t}{\t}{\t}{\t}listHistograms(printWriter);{\n}
{\t}{\t}{\t}{\t}break;{\n}
{\t}{\t}{\t}case LIST_METRICS_COUNTERS:{\n}
{\t}{\t}{\t}{\t}listCounters(printWriter);{\n}
{\t}{\t}{\t}{\t}break;{\n}
{\t}{\t}{\t}case LIST_METRICS_METERS:{\n}
{\t}{\t}{\t}{\t}listMeters(printWriter);{\n}
{\t}{\t}{\t}{\t}break;{\n}
{\t}{\t}{\t}case GET_METRICS_TABLES:{\n}
{\t}{\t}{\t}{\t}listTables(printWriter, isConfig);{\n}
{\t}{\t}{\t}{\t}break;{\n}
{\t}{\t}{\t}case GET_METRICS_TABLES_RATIO:{\n}
{\t}{\t}{\t}{\t}listTablesRatio(printWriter, isConfig);{\n}
{\t}{\t}{\t}{\t}break;{\n}

{\t}{\t}{\t}case GET_METRICS_TABLES_INTERACTION_RATIO:{\n}
{\t}{\t}{\t}{\t}listTablesInteractionRatio(printWriter, isConfig);{\n}
{\t}{\t}{\t}{\t}break;{\n}

{loop database.tables as table}
	{\t}{\t}{\t}case GET_METRICS_TABLES_INTERACTION_RATIO_{table.name}:{\n}
	{\t}{\t}{\t}{\t}listTablesInteractionRatio{table.javaClassName}(printWriter, isConfig);{\n}
	{\t}{\t}{\t}{\t}break;{\n}
{endloop}

{\t}{\t}{\t}default:{\n}
{\t}{\t}{\t}{\t}// unlikely to happen{\n}
{\t}{\t}{\t}}{\n}
{\t}{\t}} else {{{\n}
{\t}{\t}{\t}// try and lookup the metric{\n}
{\t}{\t}{\t}printMetric(pathInfo, printWriter);{\n}
{\t}{\t}}{\n}
{\t}{\t}printWriter.flush();{\n}
{\t}{\t}printWriter.close();{\n}
{\t}}{\n}
{\n}
{\t}private void printMetric(String pathInfo, PrintWriter printWriter) {{{\n}
{\t}{\t}MetricRegistry metricsRegistry = MetricsManager.getMetricsRegistry();{\n}
{\t}{\t}int indexOf = pathInfo.indexOf("/config");{\n}
{\t}{\t}if(indexOf != -1) {{{\n}
{\t}{\t}{\t}String metricName = pathInfo.substring(1, indexOf);{\n}
{\t}{\t}{\t}if(metricsRegistry.getMetrics().containsKey(metricName)) {{{\n}
{\t}{\t}{\t}{\t}// write out the configuration for this metric{\n}
{\t}{\t}{\t}{\t}Metric metric = metricsRegistry.getMetrics().get(metricName);{\n}
{\t}{\t}{\t}{\t}if(metric instanceof RatioGauge) {{{\n}
{\t}{\t}{\t}{\t}{\t}printWriter.write("graph_title RatioGauge for " + metricName + "\n");{\n}
{\t}{\t}{\t}{\t}{\t}printWriter.write("graph_vlabel Ratio" + "\n");{\n}
{\t}{\t}{\t}{\t}{\t}printWriter.write("graph_category metrics\n");{\n}
{\t}{\t}{\t}{\t}{\t}printWriter.write("RATIOGAUGE.label " + metricName + "\n");{\n}
{\t}{\t}{\t}{\t}{\t}printWriter.write("RATIONGAUGE.draw LINE\n");{\n}
{\t}{\t}{\t}{\t}{\t}printWriter.write("graph_args -l 0 \n");{\n}
{\t}{\t}{\t}{\t}} else if(metric instanceof Gauge) {{{\n}
{\t}{\t}{\t}{\t}{\t}printWriter.write("graph_title Gauge for " + metricName + "\n");{\n}
{\t}{\t}{\t}{\t}{\t}printWriter.write("graph_vlabel gauge\n");{\n}
{\t}{\t}{\t}{\t}{\t}printWriter.write("graph_category metrics\n");{\n}
{\t}{\t}{\t}{\t}{\t}printWriter.write("GAUGE.label " + metricName + "\n");{\n}
{\t}{\t}{\t}{\t}{\t}printWriter.write("GAUGE.draw LINE\n");{\n}
{\t}{\t}{\t}{\t}{\t}printWriter.write("graph_args -l 0 \n");{\n}
{\t}{\t}{\t}{\t}} else if(metric instanceof Timer) {{{\n}
{\t}{\t}{\t}{\t}{\t}printWriter.write("graph_title Timer for " + metricName + "\n");{\n}
{\t}{\t}{\t}{\t}{\t}printWriter.write("graph_vlabel timer\n");{\n}
{\t}{\t}{\t}{\t}{\t}printWriter.write("graph_category metrics\n");{\n}
{\t}{\t}{\t}{\t}{\t}printWriter.write("TIMER.label " + metricName + "\n");{\n}
{\t}{\t}{\t}{\t}{\t}printWriter.write("TIMER.draw LINE\n");{\n}
{\t}{\t}{\t}{\t}{\t}printWriter.write("graph_args -l 0 \n");{\n}
{\t}{\t}{\t}{\t}} else if(metric instanceof Histogram) {{{\n}
{\t}{\t}{\t}{\t}{\t}{\n}
{\t}{\t}{\t}{\t}} else if(metric instanceof Counter) {{{\n}
{\t}{\t}{\t}{\t}{\t}{\n}
{\t}{\t}{\t}{\t}} else if(metric instanceof Meter) {{{\n}
{\t}{\t}{\t}{\t}{\t}{\n}
{\t}{\t}{\t}{\t}}{\n}
{\t}{\t}{\t}} else {{{\n}
{\t}{\t}{\t}{\t}printWriter.write("err\n");{\n}
{\t}{\t}{\t}}{\n}
{\t}{\t}}{\n}
{\t}}{\n}
{\n}


{\t}private void listTables(PrintWriter printWriter, boolean isConfig) {{{\n}
{\t}{\t}if(isConfig) {{{\n}
{\t}{\t}{\t}//  we are doing the configuration item{\n}
{\t}{\t}{\t}{\t}printWriter.write("graph_title Access for tables");{\n}
{\t}{\t}{\t}{\t}printWriter.write("graph_vlabel access count");{\n}
{\t}{\t}{\t}{\t}printWriter.write("graph_category metrics");{\n}

					{loop database.tables as table}
{\t}{\t}{\t}{\t}printWriter.write("{table.name}.label {table.name}\n");{\n}
{\t}{\t}{\t}{\t}printWriter.write("{table.name}.draw LINE\n");{\n}
					{endloop}

{\t}{\t}{\t}{\t}printWriter.write("graph_args -l 0 ");{\n}
{\t}{\t}} else {{{\n}

{\t}{\t}{\t}// we are printing out the details{\n}
					{loop database.tables as table}
{\t}{\t}{\t}{\t}printWriter.write("{table.name}.value " + {table.javaFieldName}Access.getCount() + "\n");{\n}
					{endloop}
{\t}{\t}}{\n}
{\t}}{\n}
{\n}


{\t}private void listTablesRatio(PrintWriter printWriter, boolean isConfig) {{{\n}
{\t}{\t}if(isConfig) {{{\n}
{\t}{\t}{\t}//  we are doing the configuration item{\n}
{\t}{\t}{\t}{\t}printWriter.write("graph_title Access ratio for tables\n");{\n}
{\t}{\t}{\t}{\t}printWriter.write("graph_vlabel access count\n");{\n}
{\t}{\t}{\t}{\t}printWriter.write("graph_category metrics\n");{\n}

					{loop database.tables as table}
{\t}{\t}{\t}{\t}printWriter.write("{table.name}.label {table.name}\n");{\n}
{\t}{\t}{\t}{\t}printWriter.write("{table.name}.draw LINE\n");{\n}
					{endloop}

{\t}{\t}{\t}{\t}printWriter.write("graph_args -l 0 ");{\n}
{\t}{\t}} else {{{\n}

{\t}{\t}{\t}// we are printing out the details{\n}
{\t}{\t}{\t}long allAccesses = 0;{\n}
					{loop database.tables as table}
{\t}{\t}{\t}allAccesses += {table.javaFieldName}Access.getCount();{\n}
					{endloop}

{\t}{\t}{\t}if(allAccesses == 0) {{{\n}
{\t}{\t}{\t}{\t}allAccesses = 1;{\n}
{\t}{\t}{\t}}{\n}
{\n}

					{loop database.tables as table}
{\t}{\t}{\t}{\t}printWriter.write("{table.name}.value " + ({table.javaFieldName}Access.getCount()*100)/allAccesses + "\n");{\n}
					{endloop}
{\t}{\t}}{\n}
{\t}}{\n}
{\n}


{\t}private void listTablesInteractionRatio(PrintWriter printWriter, boolean isConfig) {{{\n}
{\t}{\t}if(isConfig) {{{\n}
{\t}{\t}{\t}//  we are doing the configuration item{\n}
{\t}{\t}{\t}{\t}printWriter.write("graph_title Interaction access ratio for tables\n");{\n}
{\t}{\t}{\t}{\t}printWriter.write("graph_vlabel access count\n");{\n}
{\t}{\t}{\t}{\t}printWriter.write("graph_category metrics\n");{\n}

					{loop database.tables as table}
{\t}{\t}{\t}{\t}printWriter.write("{table.name}Finder.label {table.name} Finders\n");{\n}
{\t}{\t}{\t}{\t}printWriter.write("{table.name}Finder.draw LINE\n");{\n}
{\t}{\t}{\t}{\t}printWriter.write("{table.name}Counter.label {table.name} Counters\n");{\n}
{\t}{\t}{\t}{\t}printWriter.write("{table.name}Counter.draw LINE\n");{\n}
{\t}{\t}{\t}{\t}printWriter.write("{table.name}Question.label {table.name} Questions\n");{\n}
{\t}{\t}{\t}{\t}printWriter.write("{table.name}Question.draw LINE\n");{\n}
{\t}{\t}{\t}{\t}printWriter.write("{table.name}Deleter.label {table.name} Deleters\n");{\n}
{\t}{\t}{\t}{\t}printWriter.write("{table.name}Deleter.draw LINE\n");{\n}
{\t}{\t}{\t}{\t}printWriter.write("{table.name}Inserter.label {table.name} Inserters\n");{\n}
{\t}{\t}{\t}{\t}printWriter.write("{table.name}Inserter.draw LINE\n");{\n}
{\t}{\t}{\t}{\t}printWriter.write("{table.name}Updater.label {table.name} Updaters\n");{\n}
{\t}{\t}{\t}{\t}printWriter.write("{table.name}Updater.draw LINE\n");{\n}
					{endloop}

{\t}{\t}{\t}{\t}printWriter.write("graph_args -l 0 ");{\n}
{\t}{\t}} else {{{\n}

{\t}{\t}{\t}// we are printing out the details{\n}
{\t}{\t}{\t}long finderAccesses = 0;{\n}
{\t}{\t}{\t}long counterAccesses = 0;{\n}
{\t}{\t}{\t}long questionAccesses = 0;{\n}
{\t}{\t}{\t}long deleterAccesses = 0;{\n}
{\t}{\t}{\t}long inserterAccesses = 0;{\n}
{\t}{\t}{\t}long updaterAccesses = 0;{\n}
{\n}
					{loop database.tables as table}
{\t}{\t}{\t}finderAccesses += {table.javaFieldName}FinderAccess.getCount();{\n}
{\t}{\t}{\t}counterAccesses += {table.javaFieldName}CounterAccess.getCount();{\n}
{\t}{\t}{\t}questionAccesses += {table.javaFieldName}QuestionAccess.getCount();{\n}
{\t}{\t}{\t}deleterAccesses += {table.javaFieldName}DeleterAccess.getCount();{\n}
{\t}{\t}{\t}inserterAccesses += {table.javaFieldName}InserterAccess.getCount();{\n}
{\t}{\t}{\t}updaterAccesses += {table.javaFieldName}UpdaterAccess.getCount();{\n}
					{endloop}
{\n}
{\t}{\t}{\t}if(finderAccesses == 0) {{ finderAccesses = 1; }{\n}
{\t}{\t}{\t}if(counterAccesses == 0) {{ counterAccesses = 1; }{\n}
{\t}{\t}{\t}if(questionAccesses == 0) {{ questionAccesses = 1; }{\n}
{\t}{\t}{\t}if(deleterAccesses == 0) {{ deleterAccesses = 1; }{\n}
{\t}{\t}{\t}if(inserterAccesses == 0) {{ inserterAccesses = 1; }{\n}
{\t}{\t}{\t}if(updaterAccesses == 0) {{ updaterAccesses = 1; }{\n}
{\n}
					{loop database.tables as table}
{\t}{\t}{\t}printWriter.write("{table.name}Finder.value " + ({table.javaFieldName}FinderAccess.getCount()*100)/finderAccesses + "\n");{\n}
{\t}{\t}{\t}printWriter.write("{table.name}Counter.value " + ({table.javaFieldName}CounterAccess.getCount()*100)/counterAccesses + "\n");{\n}
{\t}{\t}{\t}printWriter.write("{table.name}Question.value " + ({table.javaFieldName}QuestionAccess.getCount()*100)/questionAccesses + "\n");{\n}
{\t}{\t}{\t}printWriter.write("{table.name}Deleter.value " + ({table.javaFieldName}DeleterAccess.getCount()*100)/deleterAccesses + "\n");{\n}
{\t}{\t}{\t}printWriter.write("{table.name}Inserter.value " + ({table.javaFieldName}InserterAccess.getCount()*100)/inserterAccesses + "\n");{\n}
{\t}{\t}{\t}printWriter.write("{table.name}Updater.value " + ({table.javaFieldName}UpdaterAccess.getCount()*100)/updaterAccesses + "\n");{\n}
					{endloop}
{\t}{\t}}{\n}
{\t}}{\n}
{\n}

{loop database.tables as table}

	{\t}private void listTablesInteractionRatio{table.javaClassName}(PrintWriter printWriter, boolean isConfig) {{{\n}
	{\t}{\t}if(isConfig) {{{\n}
	{\t}{\t}{\t}//  we are doing the configuration item{\n}
	{\t}{\t}{\t}{\t}printWriter.write("graph_title Interaction access ratio for table {table.name}\n");{\n}
	{\t}{\t}{\t}{\t}printWriter.write("graph_vlabel access count\n");{\n}
	{\t}{\t}{\t}{\t}printWriter.write("graph_category metrics\n");{\n}

	{\t}{\t}{\t}{\t}printWriter.write("{table.name}Finder.label {table.name} Finders\n");{\n}
	{\t}{\t}{\t}{\t}printWriter.write("{table.name}Finder.draw LINE\n");{\n}
	{\t}{\t}{\t}{\t}printWriter.write("{table.name}Counter.label {table.name} Counters\n");{\n}
	{\t}{\t}{\t}{\t}printWriter.write("{table.name}Counter.draw LINE\n");{\n}
	{\t}{\t}{\t}{\t}printWriter.write("{table.name}Question.label {table.name} Questions\n");{\n}
	{\t}{\t}{\t}{\t}printWriter.write("{table.name}Question.draw LINE\n");{\n}
	{\t}{\t}{\t}{\t}printWriter.write("{table.name}Deleter.label {table.name} Deleters\n");{\n}
	{\t}{\t}{\t}{\t}printWriter.write("{table.name}Deleter.draw LINE\n");{\n}
	{\t}{\t}{\t}{\t}printWriter.write("{table.name}Inserter.label {table.name} Inserters\n");{\n}
	{\t}{\t}{\t}{\t}printWriter.write("{table.name}Inserter.draw LINE\n");{\n}
	{\t}{\t}{\t}{\t}printWriter.write("{table.name}Updater.label {table.name} Updaters\n");{\n}
	{\t}{\t}{\t}{\t}printWriter.write("{table.name}Updater.draw LINE\n");{\n}

	{\t}{\t}{\t}{\t}printWriter.write("graph_args -l 0 ");{\n}
	{\t}{\t}} else {{{\n}

	{\t}{\t}{\t}// we are printing out the details{\n}
	{\t}{\t}{\t}long finderAccesses = 0;{\n}
	{\t}{\t}{\t}long counterAccesses = 0;{\n}
	{\t}{\t}{\t}long questionAccesses = 0;{\n}
	{\t}{\t}{\t}long deleterAccesses = 0;{\n}
	{\t}{\t}{\t}long inserterAccesses = 0;{\n}
	{\t}{\t}{\t}long updaterAccesses = 0;{\n}
	{\n}

	{\t}{\t}{\t}finderAccesses += {table.javaFieldName}FinderAccess.getCount();{\n}
	{\t}{\t}{\t}counterAccesses += {table.javaFieldName}CounterAccess.getCount();{\n}
	{\t}{\t}{\t}questionAccesses += {table.javaFieldName}QuestionAccess.getCount();{\n}
	{\t}{\t}{\t}deleterAccesses += {table.javaFieldName}DeleterAccess.getCount();{\n}
	{\t}{\t}{\t}inserterAccesses += {table.javaFieldName}InserterAccess.getCount();{\n}
	{\t}{\t}{\t}updaterAccesses += {table.javaFieldName}UpdaterAccess.getCount();{\n}

	{\n}
	{\t}{\t}{\t}if(finderAccesses == 0) {{ finderAccesses = 1; }{\n}
	{\t}{\t}{\t}if(counterAccesses == 0) {{ counterAccesses = 1; }{\n}
	{\t}{\t}{\t}if(questionAccesses == 0) {{ questionAccesses = 1; }{\n}
	{\t}{\t}{\t}if(deleterAccesses == 0) {{ deleterAccesses = 1; }{\n}
	{\t}{\t}{\t}if(inserterAccesses == 0) {{ inserterAccesses = 1; }{\n}
	{\t}{\t}{\t}if(updaterAccesses == 0) {{ updaterAccesses = 1; }{\n}
	{\n}

	{\t}{\t}{\t}printWriter.write("{table.name}Finder.value " + ({table.javaFieldName}FinderAccess.getCount()*100)/finderAccesses + "\n");{\n}
	{\t}{\t}{\t}printWriter.write("{table.name}Counter.value " + ({table.javaFieldName}CounterAccess.getCount()*100)/counterAccesses + "\n");{\n}
	{\t}{\t}{\t}printWriter.write("{table.name}Question.value " + ({table.javaFieldName}QuestionAccess.getCount()*100)/questionAccesses + "\n");{\n}
	{\t}{\t}{\t}printWriter.write("{table.name}Deleter.value " + ({table.javaFieldName}DeleterAccess.getCount()*100)/deleterAccesses + "\n");{\n}
	{\t}{\t}{\t}printWriter.write("{table.name}Inserter.value " + ({table.javaFieldName}InserterAccess.getCount()*100)/inserterAccesses + "\n");{\n}
	{\t}{\t}{\t}printWriter.write("{table.name}Updater.value " + ({table.javaFieldName}UpdaterAccess.getCount()*100)/updaterAccesses + "\n");{\n}
	{\t}{\t}}{\n}
	{\t}}{\n}
	{\n}
{endloop}

{\t}private void listAllMetrics(PrintWriter printWriter) throws IOException {{{\n}
{\t}{\t}listCounters(printWriter);{\n}
{\n}
{\t}{\t}listGauges(printWriter);{\n}
{\n}
{\t}{\t}listHistograms(printWriter);{\n}
{\n}
{\t}{\t}listMeters(printWriter);{\n}
{\n}
{\t}{\t}listTimers(printWriter);{\n}
{\t}}{\n}
{\n}
{\t}private void listTimers(PrintWriter printWriter) {{{\n}
{\t}{\t}MetricRegistry metricsRegistry = MetricsManager.getMetricsRegistry();{\n}
{\t}{\t}SortedMap<String, Timer> timers = metricsRegistry.getTimers();{\n}
{\t}{\t}Iterator<String> iterator = timers.keySet().iterator();{\n}
{\t}{\t}while (iterator.hasNext()) {{{\n}
{\t}{\t}{\t}String timer = (String) iterator.next();{\n}
{\t}{\t}{\t}printWriter.write(timer + "\n");{\n}
{\t}{\t}}{\n}
{\t}}{\n}
{\n}
{\t}private void listMeters(PrintWriter printWriter) {{{\n}
{\t}{\t}MetricRegistry metricsRegistry = MetricsManager.getMetricsRegistry();{\n}
{\t}{\t}SortedMap<String, Meter> meters = metricsRegistry.getMeters();{\n}
{\t}{\t}Iterator<String> iterator = meters.keySet().iterator();{\n}
{\t}{\t}while (iterator.hasNext()) {{{\n}
{\t}{\t}{\t}String meter = (String) iterator.next();{\n}
{\t}{\t}{\t}printWriter.write(meter + "\n");{\n}
{\t}{\t}}{\n}
{\t}}{\n}
{\n}
{\t}private void listHistograms(PrintWriter printWriter) {{{\n}
{\t}{\t}MetricRegistry metricsRegistry = MetricsManager.getMetricsRegistry();{\n}
{\t}{\t}SortedMap<String, Histogram> histograms = metricsRegistry.getHistograms();{\n}
{\t}{\t}Iterator<String> iterator = histograms.keySet().iterator();{\n}
{\t}{\t}while (iterator.hasNext()) {{{\n}
{\t}{\t}{\t}String histogram = (String) iterator.next();{\n}
{\t}{\t}{\t}printWriter.write(histogram + "\n");{\n}
{\t}{\t}}{\n}
{\t}}{\n}
{\n}
{\t}private void listCounters(PrintWriter printWriter) {{{\n}
{\t}{\t}MetricRegistry metricsRegistry = MetricsManager.getMetricsRegistry();{\n}
{\t}{\t}SortedMap<String, Counter> counters = metricsRegistry.getCounters();{\n}
{\t}{\t}Iterator<String> iterator = counters.keySet().iterator();{\n}
{\t}{\t}while (iterator.hasNext()) {{{\n}
{\t}{\t}{\t}String counter = (String) iterator.next();{\n}
{\t}{\t}{\t}printWriter.write(counter + "\n");{\n}
{\t}{\t}}{\n}
{\t}}{\n}
{\n}
{\t}@SuppressWarnings("rawtypes"){\n}
{\t}private void listGauges(PrintWriter printWriter) {{{\n}
{\t}{\t}MetricRegistry metricsRegistry = MetricsManager.getMetricsRegistry();{\n}
{\t}{\t}SortedMap<String, Gauge> gauges = metricsRegistry.getGauges();{\n}
{\t}{\t}Iterator<String> gaugeIterator = gauges.keySet().iterator();{\n}
{\t}{\t}while (gaugeIterator.hasNext()) {{{\n}
{\t}{\t}{\t}String gauge = (String) gaugeIterator.next();{\n}
{\t}{\t}{\t}printWriter.write(gauge + "\n");{\n}
{\t}{\t}}{\n}
{\t}}{\n}
{\n}
}{\n}
