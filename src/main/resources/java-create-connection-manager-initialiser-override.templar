package {database.package};{\n}{\n}
// - - - - thoughtfully generated by synapticloop h2zero - - - - {\n}
//    with the use of synapticloop templar templating language{\n}
//  (java-create-connection-manager-initialise-override.templar){\n}
{\n}
{\n}
import synapticloop.h2zero.base.manager.{options.database}.ConnectionManagerInitialiser;{\n}
{\n}
/**{\n}
 * <p>{\n}
 * This file is used to override the default initialisation of the connection{\n}
 * pool, so that you can initialise your connection by your own methods.{\n}
 * </p>{\n}
 *{\n}
 * <p>{\n}
 * Example, commented-out code is included within the method.{\n}
 * </p>{\n}
 *{\n}
 * <p>{\n}
 * To initialise the combo pool for use, call <br />{\n}
 * <code>ConnectionManagerInitialiserOverride.initialise()</code><br />{\n}
 * __ONCE__ upon initialisation of your application.{\n}
 * </p>{\n}
 *{\n}
 *{\n}
 * <p>{\n}
 * With multiple connection pools to multiple databases (rarely used, but{\n}
 * necessary in some instances) use the protected static field{\n}
 * <code>CONNECTION_POOL_NAME</code> inherited from the parent class.{\n}
 * </p>{\n}
 *{\n}
 * <p>{\n}
 * {{@link  {database.package}.ConnectionManagerInitialiser#CONNECTION_POOL_NAME  {database.package}.ConnectionManagerInitialiser#CONNECTION_POOL_NAME}{\n}
 * </p>{\n}
 *{\n}
 * <strong><pre>{\n}
 *{\n}
 * NOTE: ONCE GENERATED - THIS FILE WILL __NEVER__ BE OVER-WRITTEN BY AN h2zero{\n}
 *       RE-GENERATION.{\n}
 *{\n}
 *       THIS __WILL__ BE A PROBLEM IF h2zero UPDATES THE TEMPLATE IN FUTURE{\n}
 *       VERSIONS...{\n}
 *{\n}
 *       JUST SAYING...{\n}
 * </pre></strong>{\n}
 */{\n}
public class ConnectionManagerInitialiserOverride extends ConnectionManagerInitialiser {{{\n}
{\n}
{\t}public static void initialise() {{{\n}
//{\t}{\t}// create a new combo pool{\n}
//{\t}{\t}ComboPooledDataSource myComboPooledDataSource = new ComboPooledDataSource();{\n}
//{\t}{\t}// configure the combopool{\n}
//{\t}{\t}try {{{\n}
//{\t}{\t}{\t}myComboPooledDataSource.setDriverClass("db.driver.class");{\n}
//{\t}{\t}} catch (PropertyVetoException e) {{ // runtime exception{\n}
//{\t}{\t}{\t}throw new RuntimeException(e);{\n}
//{\t}{\t}}{\n}
//{\n}
//{\t}{\t}try {{{\n}
//{\t}{\t}{\t}myComboPooledDataSource.setLoginTimeout(1);{\n}
//{\t}{\t}} catch (SQLException e) {{{\n}
//{\t}{\t}{\t}throw new RuntimeException(e);{\n}
//{\t}{\t}}{\n}
//{\n}
//{\t}{\t}myComboPooledDataSource.setAcquireIncrement(1);{\n}
//{\n}
//{\t}{\t}myComboPooledDataSource.setJdbcUrl("jdbc://");{\n}
//{\t}{\t}myComboPooledDataSource.setUser("username");{\n}
//{\t}{\t}myComboPooledDataSource.setPassword("password");{\n}
//{\n}
//{\t}{\t}addComboPool(CONNECTION_POOL_NAME, myComboPooledDataSource);{\n}
{\t}}{\n}
}{\n}