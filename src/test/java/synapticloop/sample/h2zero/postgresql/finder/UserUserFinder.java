package synapticloop.sample.h2zero.postgresql.finder;

// - - - - thoughtfully generated by synapticloop h2zero - - - - 
//    with the use of synapticloop templar templating language
//                (java-create-finder.templar)

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.math.BigDecimal;
import java.util.List;
import java.util.ArrayList;

import synapticloop.h2zero.base.exception.H2ZeroFinderException;
import synapticloop.h2zero.base.manager.cockroach.ConnectionManager;
import synapticloop.h2zero.util.LruCache;


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


import synapticloop.sample.h2zero.postgresql.model.util.Constants;
import synapticloop.sample.h2zero.postgresql.bean.UserUserFindNmUserDtmSignupBean;
import synapticloop.sample.h2zero.postgresql.bean.UserUserFindGroupNumAgeBean;

import synapticloop.sample.h2zero.postgresql.model.UserUser;

public class UserUserFinder {
	// the binder is unused in code, but will generate compile problems if this 
	// class is no longer referenced in the h2zero file. Just a nicety for
	// removing dead code
	@SuppressWarnings("unused")
	private static final String BINDER = Constants.USER_USER_BINDER;

	private static final Logger LOGGER = LoggerFactory.getLogger(UserUserFinder.class);
	private static final String SQL_SELECT_START = 
		"""
			select 
				id_user_user, 
				id_user_type, 
				fl_is_alive, 
				nm_username, 
				txt_address_email, 
				txt_password
			from 
				user_user
		""";
	private static final String SQL_BUILTIN_FIND_BY_PRIMARY_KEY = SQL_SELECT_START + " where id_user_user = ?";

	private static final String SQL_FIND_BY_NUM_AGE = SQL_SELECT_START + 
		"""
			where num_age = ?
		""";
	private static final String SQL_FIND_BY_FL_IS_ALIVE_NUM_AGE = SQL_SELECT_START + 
		"""
			where fl_is_alive = ? and num_age = ?
		""";
	private static final String SQL_FIND_BY_NM_USERNAME = SQL_SELECT_START + 
		"""
			where nm_username = ?
		""";
	private static final String SQL_FIND_BY_TXT_ADDRESS_EMAIL = SQL_SELECT_START + 
		"""
			where txt_address_email = ?
		""";
	private static final String SQL_FIND_BY_TXT_ADDRESS_EMAIL_TXT_PASSWORD = SQL_SELECT_START + 
		"""
			where txt_address_email = ? and txt_password = ?
		""";
	private static final String SQL_FIND_NM_USER_DTM_SIGNUP =
		"""
			select nm_user, dtm_signup from user
		""";
	private static final String SQL_FIND_GROUP_NUM_AGE =
		"""
			select count(*) as num_count, num_age from user group by num_count
		""";
	private static final String SQL_FIND_BY_NUM_AGE_IN = SQL_SELECT_START + 
		"""
			where num_age in (...)
		""";
	private static final String SQL_FIND_BY_NUM_AGE_BETWEEN = SQL_SELECT_START + 
		"""
			where num_age > ? and num_age < ?
		""";
	// This is the cache for 'in Finder' which have an ellipses (...) in the statement
	private static final LruCache<String, String> findByNumAgeIn_limit_statement_cache = new LruCache<>(1024);
	// now for the statement limit cache(s)
	private static final LruCache<String, String> findAll_limit_statement_cache = new LruCache<>(1024);
	private static final LruCache<String, String> findByNumAge_limit_statement_cache = new LruCache<>(1024);
	private static final LruCache<String, String> findByFlIsAliveNumAge_limit_statement_cache = new LruCache<>(1024);
	private static final LruCache<String, String> findByNmUsername_limit_statement_cache = new LruCache<>(1024);
	private static final LruCache<String, String> findByTxtAddressEmail_limit_statement_cache = new LruCache<>(1024);
	private static final LruCache<String, String> findByTxtAddressEmailTxtPassword_limit_statement_cache = new LruCache<>(1024);
	private static final LruCache<String, String> findNmUserDtmSignup_limit_statement_cache = new LruCache<>(1024);
	private static final LruCache<String, String> findGroupNumAge_limit_statement_cache = new LruCache<>(1024);
	private static final LruCache<String, String> findByNumAgeBetween_limit_statement_cache = new LruCache<>(1024);

	private UserUserFinder() {}

	/**
	 * Find a UserUser by its primary key
	 * 
	 * @param connection the connection item
	 * @param idUserUser the primary key
	 * 
	 * @return the unique result or throw an exception if one couldn't be found
	 * 
	 * @throws H2ZeroFinderException if one couldn't be found
	 */
	public static UserUser findByPrimaryKey(Connection connection, Long idUserUser) throws H2ZeroFinderException {
		UserUser userUser = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;

		if(null == idUserUser) {
			throw new H2ZeroFinderException("Could not find result as the primary key field [idUserUser] was null.");
		}

		try {
			preparedStatement = connection.prepareStatement(SQL_BUILTIN_FIND_BY_PRIMARY_KEY);
			preparedStatement.setLong(1, idUserUser);
			resultSet = preparedStatement.executeQuery();
			userUser = uniqueResult(resultSet);
		} catch (H2ZeroFinderException | SQLException ex) {
			throw new H2ZeroFinderException(ex.getMessage() + "  Additionally, the parameters were [idUserUser:" + idUserUser + "].");
		} finally {
			ConnectionManager.closeAll(resultSet, preparedStatement);
		}

		if(null == userUser) {
			throw new H2ZeroFinderException("Could not find result the parameters were [idUserUser:" + idUserUser + "].");
		}
		return(userUser);
	}

	/**
	 * Find a UserUser by its primary key
	 * 
	 * @param idUserUser the primary key
	 * 
	 * @return the unique result or throw an exception if one couldn't be found.
	 * 
	 * @throws H2ZeroFinderException if one couldn't be found
	 */
	public static UserUser findByPrimaryKey(Long idUserUser) throws H2ZeroFinderException {

		if(null == idUserUser) {
			throw new H2ZeroFinderException("Could not find result as the primary key field [idUserUser] was null.");
		}

		UserUser userUser = null;
		try (Connection connection = ConnectionManager.getConnection()) {
			userUser = findByPrimaryKey(connection, idUserUser);
		} catch (SQLException | H2ZeroFinderException ex) {
			throw new H2ZeroFinderException(ex.getMessage() + "  Additionally, the parameters were [idUserUser:" + idUserUser + "].");
		}

		if(null == userUser) {
			throw new H2ZeroFinderException("Could not find result the parameters were [idUserUser:" + idUserUser + "].");
		}
		return(userUser);
	}

	/**
	 * Find a UserUser by its primary key and silently fail.
	 * I.e. Do not throw an exception on error.
	 * 
	 * @param connection the connection item
	 * @param idUserUser the primary key
	 * 
	 * @return the unique result or null if it couldn't be found
	 * 
	 */
	public static UserUser findByPrimaryKeySilent(Connection connection, Long idUserUser) {
		try {
			return(findByPrimaryKey(connection, idUserUser));
		} catch(H2ZeroFinderException h2zfex){
			if(LOGGER.isWarnEnabled()) {
				LOGGER.warn("H2ZeroFinderException findByPrimaryKeySilent(" + idUserUser + "): " + h2zfex.getMessage());
				if(LOGGER.isDebugEnabled()) {
					h2zfex.printStackTrace();
				}
			}
			return(null);
		}
	}

	/**
	 * Find a UserUser by its primary key and silently fail.
	 * I.e. Do not throw an exception on error.
	 * 
	 * @param idUserUser the primary key
	 * 
	 * @return the unique result or null if it couldn't be found
	 * 
	 */
	public static UserUser findByPrimaryKeySilent(Long idUserUser) {
		try {
			return(findByPrimaryKey(idUserUser));
		} catch(H2ZeroFinderException h2zfex){
			if(LOGGER.isWarnEnabled()) {
				LOGGER.warn("H2ZeroFinderException findByPrimaryKeySilent(" + idUserUser + "): " + h2zfex.getMessage());
				if(LOGGER.isDebugEnabled()) {
					h2zfex.printStackTrace();
				}
			}
			return(null);
		}
	}

	/**
	 * Find all UserTitle objects with the passed in connection, with limited
	 * results starting at a particular offset.
	 * <p>
	 * If the limit parameter is null, there will be no limit applied.
	 * <p>
	 * If the offset is null, then this will be set to 0
	 * <p>
	 * If both limit and offset are null, then no limit and no offset will be applied
	 * to the statement.
	 * <p>
	 * The passed in connection object is usable for transactional SQL statements,
	 * where the connection has already had a transaction started on it.
	 * <p>
	 * If the connection object is null an new connection object will be created 
	 * and closed at the end of the method.
	 * <p>
	 * If the connection object is not null, then it will not be closed.
	 * 
	 * @param connection - the connection object to use (or null if not part of a transaction)
	 * @param limit - the limit for the result set
	 * @param offset - the offset for the start of the results.
	 * 
	 * @return a list of all the UserUser objects
	 * 
	 * @throws SQLException if there was an error in the SQL statement
	 * @throws H2ZeroFinderException if no results were found
	 */
	public static List<UserUser> findAll(Connection connection, Integer limit, Integer offset) throws SQLException, H2ZeroFinderException {
		boolean hasConnection = (null != connection);
		String statement = null;
		// first find the statement that we want

		String cacheKey = limit + ":" + offset;
		if(!findAll_limit_statement_cache.containsKey(cacheKey)) {
			// place the cacheKey in the cache for later use

			StringBuilder stringBuilder = new StringBuilder(SQL_SELECT_START);

			if(null != limit) {
				stringBuilder.append(" limit ");
				stringBuilder.append(limit);
				if(null != offset) {
					stringBuilder.append(" offset ");
					stringBuilder.append(offset);
				}
			}


			statement = stringBuilder.toString();
			findAll_limit_statement_cache.put(cacheKey, statement);
		} else {
			statement = findAll_limit_statement_cache.get(cacheKey);
		}

		// now set up the statement
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		if(connection == null) {
			connection = ConnectionManager.getConnection();
		}

		List<UserUser> results = new ArrayList<UserUser>();

		try {
			preparedStatement = connection.prepareStatement(statement);
			resultSet = preparedStatement.executeQuery();
			results = list(resultSet);
		} catch(SQLException ex) {
			if(LOGGER.isWarnEnabled()) {
				LOGGER.warn("SQLException findAll(): " + ex.getMessage());
				if(LOGGER.isDebugEnabled()) {
					ex.printStackTrace();
				}
			}
			throw ex;
		} finally {
			if(hasConnection) {
				ConnectionManager.closeAll(resultSet, preparedStatement, null);
			} else {
				ConnectionManager.closeAll(resultSet, preparedStatement, connection);
			}
		}

		if(results.size() == 0) {
			throw new H2ZeroFinderException("Could not find any results for findAll");
		}
		return(results);
	}

	/**
	 * Find all the UserUser objects - in effect this chains 
	 * to the findAll(connection, limit, offset) with null parameters.
	 * 
	 * @return The list of UserUser model objects
	 * 
	 * @throws SQLException if there was an error in the SQL statement
	 * @throws H2ZeroFinderException if no results were found
	 */
	public static List<UserUser> findAll() throws SQLException, H2ZeroFinderException {
		return(findAll(null, null, null));
	}

	/**
	 * Find all the UserUser objects - in effect this chains 
	 * to the findAll(connection, limit, offset) with null limit and offset
	 * parameters.
	 * 
	 * @param connection - the connection to be used
	 * 
	 * @return The list of UserUser model objects
	 * 
	 * @throws SQLException if there was an error in the SQL statement
	 * @throws H2ZeroFinderException if no results were found
	 */
	public static List<UserUser> findAll(Connection connection) throws SQLException, H2ZeroFinderException {
		return(findAll(connection, null, null));
	}

	/**
	 * Find all the UserUser objects - in effect this chains 
	 * to the findAll(connection, limit, offset) with null connection parameter
	 * 
	 * @param limit - the limit for the number of results to return
	 * @param offset - the offset from the start of the results
	 * 
	 * @return The list of UserUser model objects
	 * 
	 * @throws SQLException if there was an error in the SQL statement
	 * @throws H2ZeroFinderException if no results were found
	 */
	public static List<UserUser> findAll(Integer limit, Integer offset) throws SQLException, H2ZeroFinderException {
		return(findAll(null, limit, offset));
	}

	/**
	 * Find all the UserUser objects - in effect this chains 
	 * to the findAll(connection, limit, offset) with null parameters,
	 * however this method swallows any exceptions and will return an empty list.
	 * 
	 * 
	 * @param connection - the connection to be used
	 * @param limit - the limit for the number of results to return
	 * @param offset - the offset from the start of the results
	 * 
	 * @return The list of UserUser model objects, or an empty List on error
	 */
	public static List<UserUser> findAllSilent(Connection connection, Integer limit, Integer offset) {
		try {
			return(findAll(connection, limit, offset));
		} catch(SQLException | H2ZeroFinderException ex) {
			if(LOGGER.isWarnEnabled()) {
				LOGGER.warn("Exception findAllSilent(connection: " + connection + ", limit: " +  limit + ", offset: " + offset + "): " + ex.getMessage());
				if(LOGGER.isDebugEnabled()) {
					ex.printStackTrace();
				}
			}
			return(new ArrayList<UserUser>());
		}
	}

	/**
	 * Find all the UserUser objects - in effect this chains 
	 * to the findAll(connection, limit, offset) with null limit and offset parameters,
	 * however this method swallows any exceptions and will return an empty list.
	 * 
	 * @param connection - the connection to be used
	 * 
	 * @return The list of UserUser model objects, or an empty List on error
	 */
	public static List<UserUser> findAllSilent(Connection connection) {
		return(findAllSilent(connection, null, null));
	}

	/**
	 * Find all the UserUser objects - in effect this chains 
	 * to the findAll(connection, limit, offset) with null limit and offset parameters,
	 * however this method swallows any exceptions and will return an empty list.
	 * 
	 * @param limit - the limit for the number of results to return
	 * @param offset - the offset from the start of the results
	 * 
	 * @return The list of UserUser model objects, or an empty List on error
	 */
	public static List<UserUser> findAllSilent(Integer limit, Integer offset) {
		return(findAllSilent(null, limit, offset));
	}

	/**
	 * Find all the UserUser objects - in effect this chains 
	 * to the findAll(connection, limit, offset) with null parameters,
	 * however this method swallows any exceptions and will return an empty list.
	 * 
	 * @return The list of UserUser model objects, or an empty List on error
	 */
	public static List<UserUser> findAllSilent() {
		return(findAllSilent(null, null, null));
	}

	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * 
	 * This is the start of the user defined finders which are generated
	 * through either the "finders" JSON key, or the "fieldFinders" JSON
	 * key.
	 * 
	 * There are 9 defined finders on the user_user table, of those finders
	 * the following are the regular finders, either defined through the
	 * 'finders' or 'fieldFinders' JSON key
	 * 
	 * - findByNumAge - Generated from the 'fieldFinders' JSON key
	 * - findByFlIsAliveNumAge - Generated from the 'fieldFinders' JSON key
	 * - findByNmUsername - Generated from the 'fieldFinders' JSON key
	 * - findByTxtAddressEmail - Generated from the 'fieldFinders' JSON key
	 * - findByTxtAddressEmailTxtPassword - Generated from the 'finders' JSON key
	 * - findByNumAgeIn - Generated from the 'finders' JSON key
	 * - findByNumAgeBetween - Generated from the 'finders' JSON key
	 * 
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

	/**
	 * findByNumAge 
	 * <p>
	 * (This finder was generated through the 'fieldFinders' JSON key)
	 * <p>
	 * Note that if a limit and offset are passed through, then the generated statement 
	 * will be cached for further use
	 * 
	 * @param connection - the connection to the database
	 * @param numAge - maps to the num_age field
	 * @param limit - The maximum number of rows to return
	 * @param offset - The row offset to start with
	 * 
	 * @return the list of UserUser results found
	 * 
	 * @throws H2ZeroFinderException if no results could be found
	 * @throws SQLException if there was an error in the SQL statement
	 */
	public static List<UserUser> findByNumAge(Connection connection, Integer numAge, Integer limit, Integer offset) throws H2ZeroFinderException, SQLException {
		boolean hasConnection = (null != connection);
		String statement = null;

		// first find the statement that we want - or cache it if it doesn't exist

		String cacheKey = limit + ":" + offset;
		if(!findByNumAge_limit_statement_cache.containsKey(cacheKey)) {
			// place the cacheKey in the cache for later use

			StringBuilder stringBuilder = new StringBuilder(SQL_FIND_BY_NUM_AGE);

			if(null != limit) {
				stringBuilder.append(" limit ");
				stringBuilder.append(limit);
				if(null != offset) {
					stringBuilder.append(" offset ");
					stringBuilder.append(offset);
				}
			}

			statement = stringBuilder.toString();
			findByNumAge_limit_statement_cache.put(cacheKey, statement);
		} else {
			statement = findByNumAge_limit_statement_cache.get(cacheKey);
		}

		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		List<UserUser> results = null;
		try {
			if(!hasConnection) {
				connection = ConnectionManager.getConnection();
			}
			preparedStatement = connection.prepareStatement(statement);
			ConnectionManager.setInt(preparedStatement, 1, numAge);

			resultSet = preparedStatement.executeQuery();
			results = list(resultSet);
		} catch (SQLException ex) {
			throw new SQLException("SQL exception in statement: " + statement, ex);
		} finally {
			if(hasConnection) {
				ConnectionManager.closeAll(resultSet, preparedStatement, null);
			} else {
				ConnectionManager.closeAll(resultSet, preparedStatement, connection);
			}
		}


		if(results.size() == 0) {
			throw new H2ZeroFinderException("Could not find result.");
		}
		return(results);
	}

	public static List<UserUser> findByNumAge(Connection connection, Integer numAge) throws H2ZeroFinderException, SQLException {
		return(findByNumAge(connection, numAge, null, null));
	}

	public static List<UserUser> findByNumAge(Integer numAge, Integer limit, Integer offset) throws H2ZeroFinderException, SQLException {
		return(findByNumAge(null, numAge, limit, offset));
	}

	public static List<UserUser> findByNumAge(Integer numAge) throws H2ZeroFinderException, SQLException {
		return(findByNumAge(null, numAge, null, null));
	}

	// silent connection, params..., limit, offset
	public static List<UserUser> findByNumAgeSilent(Connection connection, Integer numAge, Integer limit, Integer offset) {
		try {
			return(findByNumAge(connection, numAge, limit, offset));
		} catch(H2ZeroFinderException h2zfex) {
			if(LOGGER.isWarnEnabled()) {
				LOGGER.warn("H2ZeroFinderException findByNumAgeSilent(connection: " + connection + ", " + numAge + ", limit: " + limit + ", offset: " + offset + "): " + h2zfex.getMessage());
				if(LOGGER.isDebugEnabled()) {
					h2zfex.printStackTrace();
				}
			}
			return(new ArrayList<UserUser>());
		} catch(SQLException sqlex) {
			if(LOGGER.isWarnEnabled()) {
				LOGGER.warn("SQLException findByNumAgeSilent(connection: " + connection + ", " + numAge + ", limit: " + limit + ", offset: " + offset + "): " + sqlex.getMessage());
				if(LOGGER.isDebugEnabled()) {
					sqlex.printStackTrace();
				}
			}
			return(new ArrayList<UserUser>());
		}
	}

	// silent connection, params...
	public static List<UserUser> findByNumAgeSilent(Connection connection, Integer numAge) {
		return(findByNumAgeSilent(connection, numAge, null, null));
	}

	// silent params..., limit, offset
	public static List<UserUser> findByNumAgeSilent(Integer numAge, Integer limit, Integer offset) {
		return(findByNumAgeSilent(null, numAge, limit, offset));
	}

	public static List<UserUser> findByNumAgeSilent(Integer numAge) {
		return(findByNumAgeSilent(null, numAge, null, null));
	}

	/**
	 * findByFlIsAliveNumAge 
	 * <p>
	 * (This finder was generated through the 'fieldFinders' JSON key)
	 * <p>
	 * Note that if a limit and offset are passed through, then the generated statement 
	 * will be cached for further use
	 * 
	 * @param connection - the connection to the database
	 * @param flIsAlive - maps to the fl_is_alive field
	 * @param numAge - maps to the num_age field
	 * @param limit - The maximum number of rows to return
	 * @param offset - The row offset to start with
	 * 
	 * @return the list of UserUser results found
	 * 
	 * @throws H2ZeroFinderException if no results could be found
	 * @throws SQLException if there was an error in the SQL statement
	 */
	public static List<UserUser> findByFlIsAliveNumAge(Connection connection, Boolean flIsAlive, Integer numAge, Integer limit, Integer offset) throws H2ZeroFinderException, SQLException {
		boolean hasConnection = (null != connection);
		String statement = null;

		// first find the statement that we want - or cache it if it doesn't exist

		String cacheKey = limit + ":" + offset;
		if(!findByFlIsAliveNumAge_limit_statement_cache.containsKey(cacheKey)) {
			// place the cacheKey in the cache for later use

			StringBuilder stringBuilder = new StringBuilder(SQL_FIND_BY_FL_IS_ALIVE_NUM_AGE);

			if(null != limit) {
				stringBuilder.append(" limit ");
				stringBuilder.append(limit);
				if(null != offset) {
					stringBuilder.append(" offset ");
					stringBuilder.append(offset);
				}
			}

			statement = stringBuilder.toString();
			findByFlIsAliveNumAge_limit_statement_cache.put(cacheKey, statement);
		} else {
			statement = findByFlIsAliveNumAge_limit_statement_cache.get(cacheKey);
		}

		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		List<UserUser> results = null;
		try {
			if(!hasConnection) {
				connection = ConnectionManager.getConnection();
			}
			preparedStatement = connection.prepareStatement(statement);
			ConnectionManager.setBoolean(preparedStatement, 1, flIsAlive);
			ConnectionManager.setInt(preparedStatement, 2, numAge);

			resultSet = preparedStatement.executeQuery();
			results = list(resultSet);
		} catch (SQLException ex) {
			throw new SQLException("SQL exception in statement: " + statement, ex);
		} finally {
			if(hasConnection) {
				ConnectionManager.closeAll(resultSet, preparedStatement, null);
			} else {
				ConnectionManager.closeAll(resultSet, preparedStatement, connection);
			}
		}


		if(results.size() == 0) {
			throw new H2ZeroFinderException("Could not find result.");
		}
		return(results);
	}

	public static List<UserUser> findByFlIsAliveNumAge(Connection connection, Boolean flIsAlive, Integer numAge) throws H2ZeroFinderException, SQLException {
		return(findByFlIsAliveNumAge(connection, flIsAlive, numAge, null, null));
	}

	public static List<UserUser> findByFlIsAliveNumAge(Boolean flIsAlive, Integer numAge, Integer limit, Integer offset) throws H2ZeroFinderException, SQLException {
		return(findByFlIsAliveNumAge(null, flIsAlive, numAge, limit, offset));
	}

	public static List<UserUser> findByFlIsAliveNumAge(Boolean flIsAlive, Integer numAge) throws H2ZeroFinderException, SQLException {
		return(findByFlIsAliveNumAge(null, flIsAlive, numAge, null, null));
	}

	// silent connection, params..., limit, offset
	public static List<UserUser> findByFlIsAliveNumAgeSilent(Connection connection, Boolean flIsAlive, Integer numAge, Integer limit, Integer offset) {
		try {
			return(findByFlIsAliveNumAge(connection, flIsAlive, numAge, limit, offset));
		} catch(H2ZeroFinderException h2zfex) {
			if(LOGGER.isWarnEnabled()) {
				LOGGER.warn("H2ZeroFinderException findByFlIsAliveNumAgeSilent(connection: " + connection + ", " + flIsAlive + ", " + numAge + ", limit: " + limit + ", offset: " + offset + "): " + h2zfex.getMessage());
				if(LOGGER.isDebugEnabled()) {
					h2zfex.printStackTrace();
				}
			}
			return(new ArrayList<UserUser>());
		} catch(SQLException sqlex) {
			if(LOGGER.isWarnEnabled()) {
				LOGGER.warn("SQLException findByFlIsAliveNumAgeSilent(connection: " + connection + ", " + flIsAlive + ", " + numAge + ", limit: " + limit + ", offset: " + offset + "): " + sqlex.getMessage());
				if(LOGGER.isDebugEnabled()) {
					sqlex.printStackTrace();
				}
			}
			return(new ArrayList<UserUser>());
		}
	}

	// silent connection, params...
	public static List<UserUser> findByFlIsAliveNumAgeSilent(Connection connection, Boolean flIsAlive, Integer numAge) {
		return(findByFlIsAliveNumAgeSilent(connection, flIsAlive, numAge, null, null));
	}

	// silent params..., limit, offset
	public static List<UserUser> findByFlIsAliveNumAgeSilent(Boolean flIsAlive, Integer numAge, Integer limit, Integer offset) {
		return(findByFlIsAliveNumAgeSilent(null, flIsAlive, numAge, limit, offset));
	}

	public static List<UserUser> findByFlIsAliveNumAgeSilent(Boolean flIsAlive, Integer numAge) {
		return(findByFlIsAliveNumAgeSilent(null, flIsAlive, numAge, null, null));
	}

	/**
	 * findByNmUsername 
	 * <p>
	 * (This finder was generated through the 'fieldFinders' JSON key)
	 * <p>
	 * Note that if a limit and offset are passed through, then the generated statement 
	 * will be cached for further use
	 * 
	 * @param connection - the connection to the database
	 * @param nmUsername - maps to the nm_username field
	 * @param limit - The maximum number of rows to return
	 * @param offset - The row offset to start with
	 * 
	 * @return the unique result of UserUser found
	 * 
	 * @throws H2ZeroFinderException if no results could be found
	 * @throws SQLException if there was an error in the SQL statement
	 */
	public static UserUser findByNmUsername(Connection connection, String nmUsername, Integer limit, Integer offset) throws H2ZeroFinderException, SQLException {
		boolean hasConnection = (null != connection);
		String statement = null;

		// first find the statement that we want - or cache it if it doesn't exist

		String cacheKey = limit + ":" + offset;
		if(!findByNmUsername_limit_statement_cache.containsKey(cacheKey)) {
			// place the cacheKey in the cache for later use

			StringBuilder stringBuilder = new StringBuilder(SQL_FIND_BY_NM_USERNAME);

			if(null != limit) {
				stringBuilder.append(" limit ");
				stringBuilder.append(limit);
				if(null != offset) {
					stringBuilder.append(" offset ");
					stringBuilder.append(offset);
				}
			}

			statement = stringBuilder.toString();
			findByNmUsername_limit_statement_cache.put(cacheKey, statement);
		} else {
			statement = findByNmUsername_limit_statement_cache.get(cacheKey);
		}

		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		UserUser result = null;
		try {
			if(!hasConnection) {
				connection = ConnectionManager.getConnection();
			}
			preparedStatement = connection.prepareStatement(statement);
			ConnectionManager.setVarchar(preparedStatement, 1, nmUsername);

			resultSet = preparedStatement.executeQuery();
			result = uniqueResult(resultSet);
			ConnectionManager.closeAll(resultSet, preparedStatement);
		} catch (SQLException ex) {
			throw new SQLException("SQL exception in statement: " + statement, ex);
		} catch (H2ZeroFinderException h2zfex) {
			throw new H2ZeroFinderException(h2zfex.getMessage() + "  Additionally, the parameters were "  + "[nmUsername:" + nmUsername + "].");
		} finally {
			if(hasConnection) {
				ConnectionManager.closeAll(resultSet, preparedStatement, null);
			} else {
				ConnectionManager.closeAll(resultSet, preparedStatement, connection);
			}
		}


		if(null == result) {
			throw new H2ZeroFinderException("Could not find result.");
		}
		return(result);
	}

	public static UserUser findByNmUsername(Connection connection, String nmUsername) throws H2ZeroFinderException, SQLException {
		return(findByNmUsername(connection, nmUsername, null, null));
	}

	public static UserUser findByNmUsername(String nmUsername, Integer limit, Integer offset) throws H2ZeroFinderException, SQLException {
		return(findByNmUsername(null, nmUsername, limit, offset));
	}

	public static UserUser findByNmUsername(String nmUsername) throws H2ZeroFinderException, SQLException {
		return(findByNmUsername(null, nmUsername, null, null));
	}

	// silent connection, params..., limit, offset
	public static UserUser findByNmUsernameSilent(Connection connection, String nmUsername, Integer limit, Integer offset) {
		try {
			return(findByNmUsername(connection, nmUsername, limit, offset));
		} catch(H2ZeroFinderException h2zfex) {
			if(LOGGER.isWarnEnabled()) {
				LOGGER.warn("H2ZeroFinderException findByNmUsernameSilent(connection: " + connection + ", " + nmUsername + ", limit: " + limit + ", offset: " + offset + "): " + h2zfex.getMessage());
				if(LOGGER.isDebugEnabled()) {
					h2zfex.printStackTrace();
				}
			}
			return(null);
		} catch(SQLException sqlex) {
			if(LOGGER.isWarnEnabled()) {
				LOGGER.warn("SQLException findByNmUsernameSilent(connection: " + connection + ", " + nmUsername + ", limit: " + limit + ", offset: " + offset + "): " + sqlex.getMessage());
				if(LOGGER.isDebugEnabled()) {
					sqlex.printStackTrace();
				}
			}
			return(null);
		}
	}

	// silent connection, params...
	public static UserUser findByNmUsernameSilent(Connection connection, String nmUsername) {
		return(findByNmUsernameSilent(connection, nmUsername, null, null));
	}

	// silent params..., limit, offset
	public static UserUser findByNmUsernameSilent(String nmUsername, Integer limit, Integer offset) {
		return(findByNmUsernameSilent(null, nmUsername, limit, offset));
	}

	public static UserUser findByNmUsernameSilent(String nmUsername) {
		return(findByNmUsernameSilent(null, nmUsername, null, null));
	}

	/**
	 * findByTxtAddressEmail 
	 * <p>
	 * (This finder was generated through the 'fieldFinders' JSON key)
	 * <p>
	 * Note that if a limit and offset are passed through, then the generated statement 
	 * will be cached for further use
	 * 
	 * @param connection - the connection to the database
	 * @param txtAddressEmail - maps to the txt_address_email field
	 * @param limit - The maximum number of rows to return
	 * @param offset - The row offset to start with
	 * 
	 * @return the unique result of UserUser found
	 * 
	 * @throws H2ZeroFinderException if no results could be found
	 * @throws SQLException if there was an error in the SQL statement
	 */
	public static UserUser findByTxtAddressEmail(Connection connection, String txtAddressEmail, Integer limit, Integer offset) throws H2ZeroFinderException, SQLException {
		boolean hasConnection = (null != connection);
		String statement = null;

		// first find the statement that we want - or cache it if it doesn't exist

		String cacheKey = limit + ":" + offset;
		if(!findByTxtAddressEmail_limit_statement_cache.containsKey(cacheKey)) {
			// place the cacheKey in the cache for later use

			StringBuilder stringBuilder = new StringBuilder(SQL_FIND_BY_TXT_ADDRESS_EMAIL);

			if(null != limit) {
				stringBuilder.append(" limit ");
				stringBuilder.append(limit);
				if(null != offset) {
					stringBuilder.append(" offset ");
					stringBuilder.append(offset);
				}
			}

			statement = stringBuilder.toString();
			findByTxtAddressEmail_limit_statement_cache.put(cacheKey, statement);
		} else {
			statement = findByTxtAddressEmail_limit_statement_cache.get(cacheKey);
		}

		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		UserUser result = null;
		try {
			if(!hasConnection) {
				connection = ConnectionManager.getConnection();
			}
			preparedStatement = connection.prepareStatement(statement);
			ConnectionManager.setVarchar(preparedStatement, 1, txtAddressEmail);

			resultSet = preparedStatement.executeQuery();
			result = uniqueResult(resultSet);
			ConnectionManager.closeAll(resultSet, preparedStatement);
		} catch (SQLException ex) {
			throw new SQLException("SQL exception in statement: " + statement, ex);
		} catch (H2ZeroFinderException h2zfex) {
			throw new H2ZeroFinderException(h2zfex.getMessage() + "  Additionally, the parameters were "  + "[txtAddressEmail:" + txtAddressEmail + "].");
		} finally {
			if(hasConnection) {
				ConnectionManager.closeAll(resultSet, preparedStatement, null);
			} else {
				ConnectionManager.closeAll(resultSet, preparedStatement, connection);
			}
		}


		if(null == result) {
			throw new H2ZeroFinderException("Could not find result.");
		}
		return(result);
	}

	public static UserUser findByTxtAddressEmail(Connection connection, String txtAddressEmail) throws H2ZeroFinderException, SQLException {
		return(findByTxtAddressEmail(connection, txtAddressEmail, null, null));
	}

	public static UserUser findByTxtAddressEmail(String txtAddressEmail, Integer limit, Integer offset) throws H2ZeroFinderException, SQLException {
		return(findByTxtAddressEmail(null, txtAddressEmail, limit, offset));
	}

	public static UserUser findByTxtAddressEmail(String txtAddressEmail) throws H2ZeroFinderException, SQLException {
		return(findByTxtAddressEmail(null, txtAddressEmail, null, null));
	}

	// silent connection, params..., limit, offset
	public static UserUser findByTxtAddressEmailSilent(Connection connection, String txtAddressEmail, Integer limit, Integer offset) {
		try {
			return(findByTxtAddressEmail(connection, txtAddressEmail, limit, offset));
		} catch(H2ZeroFinderException h2zfex) {
			if(LOGGER.isWarnEnabled()) {
				LOGGER.warn("H2ZeroFinderException findByTxtAddressEmailSilent(connection: " + connection + ", " + txtAddressEmail + ", limit: " + limit + ", offset: " + offset + "): " + h2zfex.getMessage());
				if(LOGGER.isDebugEnabled()) {
					h2zfex.printStackTrace();
				}
			}
			return(null);
		} catch(SQLException sqlex) {
			if(LOGGER.isWarnEnabled()) {
				LOGGER.warn("SQLException findByTxtAddressEmailSilent(connection: " + connection + ", " + txtAddressEmail + ", limit: " + limit + ", offset: " + offset + "): " + sqlex.getMessage());
				if(LOGGER.isDebugEnabled()) {
					sqlex.printStackTrace();
				}
			}
			return(null);
		}
	}

	// silent connection, params...
	public static UserUser findByTxtAddressEmailSilent(Connection connection, String txtAddressEmail) {
		return(findByTxtAddressEmailSilent(connection, txtAddressEmail, null, null));
	}

	// silent params..., limit, offset
	public static UserUser findByTxtAddressEmailSilent(String txtAddressEmail, Integer limit, Integer offset) {
		return(findByTxtAddressEmailSilent(null, txtAddressEmail, limit, offset));
	}

	public static UserUser findByTxtAddressEmailSilent(String txtAddressEmail) {
		return(findByTxtAddressEmailSilent(null, txtAddressEmail, null, null));
	}

	/**
	 * findByTxtAddressEmailTxtPassword 
	 * <p>
	 * (This finder was generated through the 'finders' JSON key)
	 * <p>
	 * Note that if a limit and offset are passed through, then the generated statement 
	 * will be cached for further use
	 * 
	 * @param connection - the connection to the database
	 * @param txtAddressEmail - maps to the txt_address_email field
	 * @param txtPassword - maps to the txt_password field
	 * @param limit - The maximum number of rows to return
	 * @param offset - The row offset to start with
	 * 
	 * @return the unique result of UserUser found
	 * 
	 * @throws H2ZeroFinderException if no results could be found
	 * @throws SQLException if there was an error in the SQL statement
	 */
	public static UserUser findByTxtAddressEmailTxtPassword(Connection connection, String txtAddressEmail, String txtPassword, Integer limit, Integer offset) throws H2ZeroFinderException, SQLException {
		boolean hasConnection = (null != connection);
		String statement = null;

		// first find the statement that we want - or cache it if it doesn't exist

		String cacheKey = limit + ":" + offset;
		if(!findByTxtAddressEmailTxtPassword_limit_statement_cache.containsKey(cacheKey)) {
			// place the cacheKey in the cache for later use

			StringBuilder stringBuilder = new StringBuilder(SQL_FIND_BY_TXT_ADDRESS_EMAIL_TXT_PASSWORD);

			if(null != limit) {
				stringBuilder.append(" limit ");
				stringBuilder.append(limit);
				if(null != offset) {
					stringBuilder.append(" offset ");
					stringBuilder.append(offset);
				}
			}

			statement = stringBuilder.toString();
			findByTxtAddressEmailTxtPassword_limit_statement_cache.put(cacheKey, statement);
		} else {
			statement = findByTxtAddressEmailTxtPassword_limit_statement_cache.get(cacheKey);
		}

		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		UserUser result = null;
		try {
			if(!hasConnection) {
				connection = ConnectionManager.getConnection();
			}
			preparedStatement = connection.prepareStatement(statement);
			ConnectionManager.setVarchar(preparedStatement, 1, txtAddressEmail);
			ConnectionManager.setVarchar(preparedStatement, 2, txtPassword);

			resultSet = preparedStatement.executeQuery();
			result = uniqueResult(resultSet);
			ConnectionManager.closeAll(resultSet, preparedStatement);
		} catch (SQLException ex) {
			throw new SQLException("SQL exception in statement: " + statement, ex);
		} catch (H2ZeroFinderException h2zfex) {
			throw new H2ZeroFinderException(h2zfex.getMessage() + "  Additionally, the parameters were "  + "[txtAddressEmail:" + txtAddressEmail + "], " + "[txtPassword:" + txtPassword + "].");
		} finally {
			if(hasConnection) {
				ConnectionManager.closeAll(resultSet, preparedStatement, null);
			} else {
				ConnectionManager.closeAll(resultSet, preparedStatement, connection);
			}
		}


		if(null == result) {
			throw new H2ZeroFinderException("Could not find result.");
		}
		return(result);
	}

	public static UserUser findByTxtAddressEmailTxtPassword(Connection connection, String txtAddressEmail, String txtPassword) throws H2ZeroFinderException, SQLException {
		return(findByTxtAddressEmailTxtPassword(connection, txtAddressEmail, txtPassword, null, null));
	}

	public static UserUser findByTxtAddressEmailTxtPassword(String txtAddressEmail, String txtPassword, Integer limit, Integer offset) throws H2ZeroFinderException, SQLException {
		return(findByTxtAddressEmailTxtPassword(null, txtAddressEmail, txtPassword, limit, offset));
	}

	public static UserUser findByTxtAddressEmailTxtPassword(String txtAddressEmail, String txtPassword) throws H2ZeroFinderException, SQLException {
		return(findByTxtAddressEmailTxtPassword(null, txtAddressEmail, txtPassword, null, null));
	}

	// silent connection, params..., limit, offset
	public static UserUser findByTxtAddressEmailTxtPasswordSilent(Connection connection, String txtAddressEmail, String txtPassword, Integer limit, Integer offset) {
		try {
			return(findByTxtAddressEmailTxtPassword(connection, txtAddressEmail, txtPassword, limit, offset));
		} catch(H2ZeroFinderException h2zfex) {
			if(LOGGER.isWarnEnabled()) {
				LOGGER.warn("H2ZeroFinderException findByTxtAddressEmailTxtPasswordSilent(connection: " + connection + ", " + txtAddressEmail + ", " + txtPassword + ", limit: " + limit + ", offset: " + offset + "): " + h2zfex.getMessage());
				if(LOGGER.isDebugEnabled()) {
					h2zfex.printStackTrace();
				}
			}
			return(null);
		} catch(SQLException sqlex) {
			if(LOGGER.isWarnEnabled()) {
				LOGGER.warn("SQLException findByTxtAddressEmailTxtPasswordSilent(connection: " + connection + ", " + txtAddressEmail + ", " + txtPassword + ", limit: " + limit + ", offset: " + offset + "): " + sqlex.getMessage());
				if(LOGGER.isDebugEnabled()) {
					sqlex.printStackTrace();
				}
			}
			return(null);
		}
	}

	// silent connection, params...
	public static UserUser findByTxtAddressEmailTxtPasswordSilent(Connection connection, String txtAddressEmail, String txtPassword) {
		return(findByTxtAddressEmailTxtPasswordSilent(connection, txtAddressEmail, txtPassword, null, null));
	}

	// silent params..., limit, offset
	public static UserUser findByTxtAddressEmailTxtPasswordSilent(String txtAddressEmail, String txtPassword, Integer limit, Integer offset) {
		return(findByTxtAddressEmailTxtPasswordSilent(null, txtAddressEmail, txtPassword, limit, offset));
	}

	public static UserUser findByTxtAddressEmailTxtPasswordSilent(String txtAddressEmail, String txtPassword) {
		return(findByTxtAddressEmailTxtPasswordSilent(null, txtAddressEmail, txtPassword, null, null));
	}

	/**
	 * findByNumAgeIn 
	 * <p>
	 * (This finder was generated through the 'finders' JSON key)
	 * <p>
	 * Note that if a limit and offset are passed through, then the generated statement 
	 * will be cached for further use
	 * 
	 * @param connection - the connection to the database
	 * @param numAgeList - maps to the num_age field
	 * @param limit - The maximum number of rows to return
	 * @param offset - The row offset to start with
	 * 
	 * @return the list of UserUser results found
	 * 
	 * @throws H2ZeroFinderException if no results could be found
	 * @throws SQLException if there was an error in the SQL statement
	 */
	public static List<UserUser> findByNumAgeIn(Connection connection, List<Integer> numAgeList, Integer limit, Integer offset) throws H2ZeroFinderException, SQLException {
		boolean hasConnection = (null != connection);
		String statement = null;

		// first find the statement that we want - or cache it if it doesn't exist

		String cacheKey = limit + ":" + offset + ":" + numAgeList.size() + ":" ;
		if(!findByNumAgeIn_limit_statement_cache.containsKey(cacheKey)) {
			// place the cacheKey in the cache for later use

			String preparedStatementTemp = SQL_FIND_BY_NUM_AGE_IN;
			StringBuilder whereFieldStringBuilder = null;
			whereFieldStringBuilder = new StringBuilder();
			for(int i = 0; i < numAgeList.size(); i++) {
				if(i > 0) {
					whereFieldStringBuilder.append(", ");
				}
				whereFieldStringBuilder.append("?");
			}
			preparedStatementTemp = preparedStatementTemp.replaceFirst("\\.\\.\\.", whereFieldStringBuilder.toString());
			StringBuilder stringBuilder = new StringBuilder(preparedStatementTemp);

			if(null != limit) {
				stringBuilder.append(" limit ");
				stringBuilder.append(limit);
				if(null != offset) {
					stringBuilder.append(" offset ");
					stringBuilder.append(offset);
				}
			}

			statement = stringBuilder.toString();
			findByNumAgeIn_limit_statement_cache.put(cacheKey, statement);
		} else {
			statement = findByNumAgeIn_limit_statement_cache.get(cacheKey);
		}

		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		List<UserUser> results = null;
		try {
			if(!hasConnection) {
				connection = ConnectionManager.getConnection();
			}
			preparedStatement = connection.prepareStatement(statement);
			int i = 1;
			for (Integer numAgeIn : numAgeList) {
				ConnectionManager.setInt(preparedStatement, i, numAgeIn);
				i++;
			}

			resultSet = preparedStatement.executeQuery();
			results = list(resultSet);
		} catch (SQLException ex) {
			throw new SQLException("SQL exception in statement: " + statement, ex);
		} finally {
			if(hasConnection) {
				ConnectionManager.closeAll(resultSet, preparedStatement, null);
			} else {
				ConnectionManager.closeAll(resultSet, preparedStatement, connection);
			}
		}


		if(results.size() == 0) {
			throw new H2ZeroFinderException("Could not find result.");
		}
		return(results);
	}

	public static List<UserUser> findByNumAgeIn(Connection connection, List<Integer> numAgeList) throws H2ZeroFinderException, SQLException {
		return(findByNumAgeIn(connection, numAgeList, null, null));
	}

	public static List<UserUser> findByNumAgeIn(List<Integer> numAgeList, Integer limit, Integer offset) throws H2ZeroFinderException, SQLException {
		return(findByNumAgeIn(null, numAgeList, limit, offset));
	}

	public static List<UserUser> findByNumAgeIn(List<Integer> numAgeList) throws H2ZeroFinderException, SQLException {
		return(findByNumAgeIn(null, numAgeList, null, null));
	}

	// silent connection, params..., limit, offset
	public static List<UserUser> findByNumAgeInSilent(Connection connection, List<Integer> numAgeList, Integer limit, Integer offset) {
		try {
			return(findByNumAgeIn(connection, numAgeList, limit, offset));
		} catch(H2ZeroFinderException h2zfex) {
			if(LOGGER.isWarnEnabled()) {
				LOGGER.warn("H2ZeroFinderException findByNumAgeInSilent(connection: " + connection + ", " + numAgeList + ", limit: " + limit + ", offset: " + offset + "): " + h2zfex.getMessage());
				if(LOGGER.isDebugEnabled()) {
					h2zfex.printStackTrace();
				}
			}
			return(new ArrayList<UserUser>());
		} catch(SQLException sqlex) {
			if(LOGGER.isWarnEnabled()) {
				LOGGER.warn("SQLException findByNumAgeInSilent(connection: " + connection + ", " + numAgeList + ", limit: " + limit + ", offset: " + offset + "): " + sqlex.getMessage());
				if(LOGGER.isDebugEnabled()) {
					sqlex.printStackTrace();
				}
			}
			return(new ArrayList<UserUser>());
		}
	}

	// silent connection, params...
	public static List<UserUser> findByNumAgeInSilent(Connection connection, List<Integer> numAgeList) {
		return(findByNumAgeInSilent(connection, numAgeList, null, null));
	}

	// silent params..., limit, offset
	public static List<UserUser> findByNumAgeInSilent(List<Integer> numAgeList, Integer limit, Integer offset) {
		return(findByNumAgeInSilent(null, numAgeList, limit, offset));
	}

	public static List<UserUser> findByNumAgeInSilent(List<Integer> numAgeList) {
		return(findByNumAgeInSilent(null, numAgeList, null, null));
	}

	/**
	 * findByNumAgeBetween 
	 * <p>
	 * (This finder was generated through the 'finders' JSON key)
	 * <p>
	 * Note that if a limit and offset are passed through, then the generated statement 
	 * will be cached for further use
	 * 
	 * @param connection - the connection to the database
	 * @param numAgeMin - maps to the num_age field
	 * @param numAgeMax - maps to the num_age field
	 * @param limit - The maximum number of rows to return
	 * @param offset - The row offset to start with
	 * 
	 * @return the list of UserUser results found
	 * 
	 * @throws H2ZeroFinderException if no results could be found
	 * @throws SQLException if there was an error in the SQL statement
	 */
	public static List<UserUser> findByNumAgeBetween(Connection connection, Integer numAgeMin, Integer numAgeMax, Integer limit, Integer offset) throws H2ZeroFinderException, SQLException {
		boolean hasConnection = (null != connection);
		String statement = null;

		// first find the statement that we want - or cache it if it doesn't exist

		String cacheKey = limit + ":" + offset;
		if(!findByNumAgeBetween_limit_statement_cache.containsKey(cacheKey)) {
			// place the cacheKey in the cache for later use

			StringBuilder stringBuilder = new StringBuilder(SQL_FIND_BY_NUM_AGE_BETWEEN);

			if(null != limit) {
				stringBuilder.append(" limit ");
				stringBuilder.append(limit);
				if(null != offset) {
					stringBuilder.append(" offset ");
					stringBuilder.append(offset);
				}
			}

			statement = stringBuilder.toString();
			findByNumAgeBetween_limit_statement_cache.put(cacheKey, statement);
		} else {
			statement = findByNumAgeBetween_limit_statement_cache.get(cacheKey);
		}

		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		List<UserUser> results = null;
		try {
			if(!hasConnection) {
				connection = ConnectionManager.getConnection();
			}
			preparedStatement = connection.prepareStatement(statement);
			ConnectionManager.setInt(preparedStatement, 1, numAgeMin);
			ConnectionManager.setInt(preparedStatement, 2, numAgeMax);

			resultSet = preparedStatement.executeQuery();
			results = list(resultSet);
		} catch (SQLException ex) {
			throw new SQLException("SQL exception in statement: " + statement, ex);
		} finally {
			if(hasConnection) {
				ConnectionManager.closeAll(resultSet, preparedStatement, null);
			} else {
				ConnectionManager.closeAll(resultSet, preparedStatement, connection);
			}
		}


		if(results.size() == 0) {
			throw new H2ZeroFinderException("Could not find result.");
		}
		return(results);
	}

	public static List<UserUser> findByNumAgeBetween(Connection connection, Integer numAgeMin, Integer numAgeMax) throws H2ZeroFinderException, SQLException {
		return(findByNumAgeBetween(connection, numAgeMin, numAgeMax, null, null));
	}

	public static List<UserUser> findByNumAgeBetween(Integer numAgeMin, Integer numAgeMax, Integer limit, Integer offset) throws H2ZeroFinderException, SQLException {
		return(findByNumAgeBetween(null, numAgeMin, numAgeMax, limit, offset));
	}

	public static List<UserUser> findByNumAgeBetween(Integer numAgeMin, Integer numAgeMax) throws H2ZeroFinderException, SQLException {
		return(findByNumAgeBetween(null, numAgeMin, numAgeMax, null, null));
	}

	// silent connection, params..., limit, offset
	public static List<UserUser> findByNumAgeBetweenSilent(Connection connection, Integer numAgeMin, Integer numAgeMax, Integer limit, Integer offset) {
		try {
			return(findByNumAgeBetween(connection, numAgeMin, numAgeMax, limit, offset));
		} catch(H2ZeroFinderException h2zfex) {
			if(LOGGER.isWarnEnabled()) {
				LOGGER.warn("H2ZeroFinderException findByNumAgeBetweenSilent(connection: " + connection + ", " + numAgeMin + ", " + numAgeMax + ", limit: " + limit + ", offset: " + offset + "): " + h2zfex.getMessage());
				if(LOGGER.isDebugEnabled()) {
					h2zfex.printStackTrace();
				}
			}
			return(new ArrayList<UserUser>());
		} catch(SQLException sqlex) {
			if(LOGGER.isWarnEnabled()) {
				LOGGER.warn("SQLException findByNumAgeBetweenSilent(connection: " + connection + ", " + numAgeMin + ", " + numAgeMax + ", limit: " + limit + ", offset: " + offset + "): " + sqlex.getMessage());
				if(LOGGER.isDebugEnabled()) {
					sqlex.printStackTrace();
				}
			}
			return(new ArrayList<UserUser>());
		}
	}

	// silent connection, params...
	public static List<UserUser> findByNumAgeBetweenSilent(Connection connection, Integer numAgeMin, Integer numAgeMax) {
		return(findByNumAgeBetweenSilent(connection, numAgeMin, numAgeMax, null, null));
	}

	// silent params..., limit, offset
	public static List<UserUser> findByNumAgeBetweenSilent(Integer numAgeMin, Integer numAgeMax, Integer limit, Integer offset) {
		return(findByNumAgeBetweenSilent(null, numAgeMin, numAgeMax, limit, offset));
	}

	public static List<UserUser> findByNumAgeBetweenSilent(Integer numAgeMin, Integer numAgeMax) {
		return(findByNumAgeBetweenSilent(null, numAgeMin, numAgeMax, null, null));
	}

	/**
	 * Return a unique result for the query - in effect just the first result of
	 * query.  If there is a second result (i.e. the query did not return the 
	 * expected unique result), then an exception will be thrown.
	 * 
	 * @param resultSet The result set of the query
	 * 
	 * @return The UserUser that represents this result
	 * 
	 * @throws H2ZeroFinderException if no results were found or more than one result was found
	 * @throws SQLException if there was a problem retrieving the results
	 */
	private static UserUser uniqueResult(ResultSet resultSet) throws H2ZeroFinderException, SQLException {
		if(resultSet.next()) {
			// we have a result
			Long idUserUser = ConnectionManager.getNullableResultLong(resultSet, 1);
			Long idUserType = ConnectionManager.getNullableResultLong(resultSet, 2);
			Boolean flIsAlive = ConnectionManager.getNullableResultBoolean(resultSet, 3);
			String nmUsername = ConnectionManager.getNullableResultString(resultSet, 4);
			String txtAddressEmail = ConnectionManager.getNullableResultString(resultSet, 5);
			String txtPassword = ConnectionManager.getNullableResultString(resultSet, 6);
			Integer numAge = null;
			Timestamp tsSignup = null;

			UserUser userUser = new UserUser(idUserUser, idUserType, flIsAlive, numAge, nmUsername, txtAddressEmail, txtPassword, tsSignup);

			if(resultSet.next()) {
				throw new H2ZeroFinderException("More than one result in resultset for unique finder.");
			} else {
				return(userUser);
			}
		} else {
			// could not get a result
			return(null);
		}
	}

	/**
	 * Return the results as a list of UserUser, this will be empty if
	 * none are found.
	 * 
	 * @param resultSet the results as a list of UserUser
	 * 
	 * @return the list of results
	 * 
	 * @throws SQLException if there was a problem retrieving the results
	 */
	private static List<UserUser> list(ResultSet resultSet) throws SQLException {
		List<UserUser> arrayList = new ArrayList<UserUser>();
		while(resultSet.next()) {
			Long idUserUser = ConnectionManager.getNullableResultLong(resultSet, 1);
			Long idUserType = ConnectionManager.getNullableResultLong(resultSet, 2);
			Boolean flIsAlive = ConnectionManager.getNullableResultBoolean(resultSet, 3);
			String nmUsername = ConnectionManager.getNullableResultString(resultSet, 4);
			String txtAddressEmail = ConnectionManager.getNullableResultString(resultSet, 5);
			String txtPassword = ConnectionManager.getNullableResultString(resultSet, 6);
			Integer numAge = null;
			Timestamp tsSignup = null;
					arrayList.add(new UserUser(
					idUserUser,
					idUserType,
					flIsAlive,
					numAge,
					nmUsername,
					txtAddressEmail,
					txtPassword,
					tsSignup
					));
		}
		return(arrayList);
	}

	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * 
	 * This is the start of the user defined select clause finders which are 
	 * generated through the "finders" JSON key, with a 'selectClause' 
	 * key on the finder.
	 * 
	 * All selectClause finders return a subset of the data from a row of the 
	 * database table (or tables if there is a join statement) as a generated
	 * bean
	 * 
	 * There are 9 defined finders on the user_user table, of those finders
	 * the following are the select clause finders:
	 * 
	 * - findNmUserDtmSignup
	 * - findGroupNumAge
	 * 
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

	// SELECTBEAN - CONNECTION, PARAMS..., LIMIT, OFFSET
	public static List<UserUserFindNmUserDtmSignupBean> findNmUserDtmSignup(Connection connection, Integer limit, Integer offset) throws H2ZeroFinderException, SQLException {
		boolean hasConnection = (null != connection);
		if(!hasConnection) {
			connection = ConnectionManager.getConnection();
		}

		String statement = null;

		// first find the statement that we want

		String cacheKey = limit + ":" + offset;
		if(!findNmUserDtmSignup_limit_statement_cache.containsKey(cacheKey)) {
			// place the cacheKey in the cache for later use

			StringBuilder stringBuilder = new StringBuilder(SQL_FIND_NM_USER_DTM_SIGNUP);

			if(null != limit) {
				stringBuilder.append(" limit ");
				stringBuilder.append(limit);
				if(null != offset) {
					stringBuilder.append(" offset ");
					stringBuilder.append(offset);
				}
			}

			statement = stringBuilder.toString();
			findNmUserDtmSignup_limit_statement_cache.put(cacheKey, statement);
		} else {
			statement = findNmUserDtmSignup_limit_statement_cache.get(cacheKey);
		}

		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		try {
			preparedStatement = connection.prepareStatement(statement);

			resultSet = preparedStatement.executeQuery();
			List<UserUserFindNmUserDtmSignupBean> results = listFindNmUserDtmSignupBean(resultSet);
			return(results);
		} catch (SQLException sqlex) {
			throw new SQLException("SQL exception in statement: " + statement, sqlex);
		} finally {
			if(hasConnection) {
				ConnectionManager.closeAll(resultSet, preparedStatement, null);
			} else {
				ConnectionManager.closeAll(resultSet, preparedStatement, connection);
			}
		}

	}

	// SELECTBEAN - PARAMS..., LIMIT, OFFSET 
	public static List<UserUserFindNmUserDtmSignupBean> findNmUserDtmSignup(Integer limit, Integer offset) throws H2ZeroFinderException, SQLException {
		return(findNmUserDtmSignup(null, limit, offset));
	}

	// SELECTBEAN - CONNECTION, PARAMS...
	public static List<UserUserFindNmUserDtmSignupBean> findNmUserDtmSignup(Connection connection) throws H2ZeroFinderException, SQLException {
		return(findNmUserDtmSignup(null, null, null));
	}

	// SELECTBEAN - PARAMS...
	public static List<UserUserFindNmUserDtmSignupBean> findNmUserDtmSignup() throws H2ZeroFinderException, SQLException {
		return(findNmUserDtmSignup(null, null, null));
	}

	// SILENT SELECTBEAN: CONNECTION, PARAMS..., LIMIT, OFFSET
	public static List<UserUserFindNmUserDtmSignupBean> findNmUserDtmSignupSilent(Connection connection, Integer limit, Integer offset) {
		try {
			return(findNmUserDtmSignup(connection, limit, offset));
		} catch(H2ZeroFinderException h2zfex) {
			if(LOGGER.isWarnEnabled()) {
				LOGGER.warn("H2ZeroFinderException findNmUserDtmSignupSilent(connection: " + connection  + ", limit: " + limit + ", offset: " + offset + "): " + h2zfex.getMessage());
				if(LOGGER.isDebugEnabled()) {
					h2zfex.printStackTrace();
				}
			}
			return(new ArrayList<UserUserFindNmUserDtmSignupBean>());
		} catch(SQLException sqlex) {
			if(LOGGER.isWarnEnabled()) {
				LOGGER.warn("SQLException findNmUserDtmSignupSilent(connection: " + connection  + ", limit: " + limit + ", offset: " + offset + "): " + sqlex.getMessage());
				if(LOGGER.isDebugEnabled()) {
					sqlex.printStackTrace();
				}
			}
			return(new ArrayList<UserUserFindNmUserDtmSignupBean>());
		}
	}

// CONNECTION, PARAMS...
	public static List<UserUserFindNmUserDtmSignupBean> findNmUserDtmSignupSilent(Connection connection) {
		return(findNmUserDtmSignupSilent(connection, null, null));
	}

// PARAMS..., LIMIT, OFFSET
	public static List<UserUserFindNmUserDtmSignupBean> findNmUserDtmSignupSilent(Integer limit, Integer offset) {
		return(findNmUserDtmSignupSilent(null, limit, offset));
	}

// PARAMS...
	public static List<UserUserFindNmUserDtmSignupBean> findNmUserDtmSignupSilent() {
		return(findNmUserDtmSignupSilent(null, null, null));
	}

	// SELECTBEAN - CONNECTION, PARAMS..., LIMIT, OFFSET
	public static List<UserUserFindGroupNumAgeBean> findGroupNumAge(Connection connection, Integer limit, Integer offset) throws H2ZeroFinderException, SQLException {
		boolean hasConnection = (null != connection);
		if(!hasConnection) {
			connection = ConnectionManager.getConnection();
		}

		String statement = null;

		// first find the statement that we want

		String cacheKey = limit + ":" + offset;
		if(!findGroupNumAge_limit_statement_cache.containsKey(cacheKey)) {
			// place the cacheKey in the cache for later use

			StringBuilder stringBuilder = new StringBuilder(SQL_FIND_GROUP_NUM_AGE);

			if(null != limit) {
				stringBuilder.append(" limit ");
				stringBuilder.append(limit);
				if(null != offset) {
					stringBuilder.append(" offset ");
					stringBuilder.append(offset);
				}
			}

			statement = stringBuilder.toString();
			findGroupNumAge_limit_statement_cache.put(cacheKey, statement);
		} else {
			statement = findGroupNumAge_limit_statement_cache.get(cacheKey);
		}

		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		try {
			preparedStatement = connection.prepareStatement(statement);

			resultSet = preparedStatement.executeQuery();
			List<UserUserFindGroupNumAgeBean> results = listFindGroupNumAgeBean(resultSet);
			return(results);
		} catch (SQLException sqlex) {
			throw new SQLException("SQL exception in statement: " + statement, sqlex);
		} finally {
			if(hasConnection) {
				ConnectionManager.closeAll(resultSet, preparedStatement, null);
			} else {
				ConnectionManager.closeAll(resultSet, preparedStatement, connection);
			}
		}

	}

	// SELECTBEAN - PARAMS..., LIMIT, OFFSET 
	public static List<UserUserFindGroupNumAgeBean> findGroupNumAge(Integer limit, Integer offset) throws H2ZeroFinderException, SQLException {
		return(findGroupNumAge(null, limit, offset));
	}

	// SELECTBEAN - CONNECTION, PARAMS...
	public static List<UserUserFindGroupNumAgeBean> findGroupNumAge(Connection connection) throws H2ZeroFinderException, SQLException {
		return(findGroupNumAge(null, null, null));
	}

	// SELECTBEAN - PARAMS...
	public static List<UserUserFindGroupNumAgeBean> findGroupNumAge() throws H2ZeroFinderException, SQLException {
		return(findGroupNumAge(null, null, null));
	}

	// SILENT SELECTBEAN: CONNECTION, PARAMS..., LIMIT, OFFSET
	public static List<UserUserFindGroupNumAgeBean> findGroupNumAgeSilent(Connection connection, Integer limit, Integer offset) {
		try {
			return(findGroupNumAge(connection, limit, offset));
		} catch(H2ZeroFinderException h2zfex) {
			if(LOGGER.isWarnEnabled()) {
				LOGGER.warn("H2ZeroFinderException findGroupNumAgeSilent(connection: " + connection  + ", limit: " + limit + ", offset: " + offset + "): " + h2zfex.getMessage());
				if(LOGGER.isDebugEnabled()) {
					h2zfex.printStackTrace();
				}
			}
			return(new ArrayList<UserUserFindGroupNumAgeBean>());
		} catch(SQLException sqlex) {
			if(LOGGER.isWarnEnabled()) {
				LOGGER.warn("SQLException findGroupNumAgeSilent(connection: " + connection  + ", limit: " + limit + ", offset: " + offset + "): " + sqlex.getMessage());
				if(LOGGER.isDebugEnabled()) {
					sqlex.printStackTrace();
				}
			}
			return(new ArrayList<UserUserFindGroupNumAgeBean>());
		}
	}

// CONNECTION, PARAMS...
	public static List<UserUserFindGroupNumAgeBean> findGroupNumAgeSilent(Connection connection) {
		return(findGroupNumAgeSilent(connection, null, null));
	}

// PARAMS..., LIMIT, OFFSET
	public static List<UserUserFindGroupNumAgeBean> findGroupNumAgeSilent(Integer limit, Integer offset) {
		return(findGroupNumAgeSilent(null, limit, offset));
	}

// PARAMS...
	public static List<UserUserFindGroupNumAgeBean> findGroupNumAgeSilent() {
		return(findGroupNumAgeSilent(null, null, null));
	}

	/**
	 * Return the results as a list of UserUserFindNmUserDtmSignupBeans, this will be empty if
	 * none are found.
	 * 
	 * @param resultSet the results as a list of UserUserFindNmUserDtmSignupBean
	 * 
	 * @return the list of results
	 * 
	 * @throws SQLException if there was a problem retrieving the results
	 */
	private static List<UserUserFindNmUserDtmSignupBean> listFindNmUserDtmSignupBean(ResultSet resultSet) throws SQLException {
		List<UserUserFindNmUserDtmSignupBean> arrayList = new ArrayList<UserUserFindNmUserDtmSignupBean>();
		while(resultSet.next()) {
			arrayList.add(new UserUserFindNmUserDtmSignupBean(
					resultSet.getString(1),
					resultSet.getTimestamp(2)));
		}
		return(arrayList);
	}

	/**
	 * Return the results as a list of UserUserFindGroupNumAgeBeans, this will be empty if
	 * none are found.
	 * 
	 * @param resultSet the results as a list of UserUserFindGroupNumAgeBean
	 * 
	 * @return the list of results
	 * 
	 * @throws SQLException if there was a problem retrieving the results
	 */
	private static List<UserUserFindGroupNumAgeBean> listFindGroupNumAgeBean(ResultSet resultSet) throws SQLException {
		List<UserUserFindGroupNumAgeBean> arrayList = new ArrayList<UserUserFindGroupNumAgeBean>();
		while(resultSet.next()) {
			arrayList.add(new UserUserFindGroupNumAgeBean(
					resultSet.getInt(1),
					resultSet.getInt(2)));
		}
		return(arrayList);
	}

}