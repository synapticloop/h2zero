package synapticloop.sample.h2zero.sqlite3.deleter;

// - - - - thoughtfully generated by synapticloop h2zero - - - - 
//    with the use of synapticloop templar templating language
//                (java-create-deleter.templar)

import java.sql.Connection;
import java.sql.Timestamp;
import java.sql.PreparedStatement;
import java.sql.SQLException;

import synapticloop.h2zero.base.manager.sqlite3.ConnectionManager;


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


import synapticloop.sample.h2zero.sqlite3.model.util.Constants;

public class UserDeleter {
	// the binder is unused in code, but will generate compile problems if this 
	// class is no longer referenced in the h2zero file. Just a nicety for
	// removing dead code
	@SuppressWarnings("unused")
	private static final String BINDER = Constants.USER_BINDER;

	private static final Logger LOGGER = LoggerFactory.getLogger(UserDeleter.class);

	// static fields generated by synapticloop h2zero
	private static final String SQL_BUILTIN_DELETE_ALL = "delete from user";
	private static final String SQL_DELETE_START = "delete from user ";
	private static final String SQL_BUILTIN_DELETE_BY_PRIMARY_KEY = SQL_DELETE_START + "where id_user = ?";

	// static fields generated from the user input
	private static final String SQL_DELETE_BY_NUM_AGE = SQL_DELETE_START + " where num_age = ?";
	private static final String SQL_DELETE_BY_FL_IS_ALIVE_ID_USER_TYPE = SQL_DELETE_START + " where fl_is_alive = ? and id_user_type = ?";
	private static final String SQL_DELETE_BY_NUM_AGE_TEST = SQL_DELETE_START + " where num_age = ?";

	private UserDeleter() {}

	/**
	 * Delete a row in the USER table by its primary key
	 * 
	 * @param connection The connection
	 * @param idUser the primary key to delete
	 * @return the number of rows deleted
	 * 
	 * @throws SQLException if there was an error in the delete
	 */
	public static int deleteByPrimaryKey(Connection connection, Long idUser) throws SQLException {
		PreparedStatement preparedStatement = connection.prepareStatement(SQL_BUILTIN_DELETE_BY_PRIMARY_KEY);
		preparedStatement.setLong(1, idUser);
		int numResults = preparedStatement.executeUpdate();
		ConnectionManager.closeAll(preparedStatement);
		return(numResults);
	}

	/**
	 * Delete a row in the USER table by its primary key
	 * 
	 * @param idUser the primary key to delete
	 * @return the number of rows deleted
	 * 
	 * @throws SQLException if there was an error in the delete
	 */
	public static int deleteByPrimaryKey(Long idUser) throws SQLException {
		Connection connection = ConnectionManager.getConnection();
		int numResults = deleteByPrimaryKey(connection, idUser);
		ConnectionManager.closeAll(connection);
		return(numResults);
	}

	/**
	 * Delete a row in the USER table by its primary key silently
	 * (i.e. don't throw an exception if it coudn't be deleted).
	 * 
	 * @param idUser the primary key to delete
	 * @return the number of rows deleted
	 * 
	 * @throws SQLException if there was an error in the delete
	 */
	public static int deleteByPrimaryKeySilent(Connection connection, Long idUser) {
		int numResults = 0;
		try {
			numResults = deleteByPrimaryKey(connection, idUser);
		} catch (SQLException sqlex) {
			LOGGER.error("Could not deleteByPrimaryKey, a SQL Exception occured.", sqlex);
			return(-1);
		}
		return(numResults);
	}

	/**
	 * Delete a row in the USER table by its primary key silently
	 * (i.e. don't throw an exception if it coudn't be deleted).
	 * 
	 * @param idUser the primary key to delete
	 * @return the number of rows deleted
	 * 
	 * @throws SQLException if there was an error in the delete
	 */
	public static int deleteByPrimaryKeySilent(Long idUser) {
		int numResults = 0;
		Connection connection = null;
		try {
			connection = ConnectionManager.getConnection();
			numResults = deleteByPrimaryKeySilent(connection, idUser);
		} catch (SQLException sqlex) {
			LOGGER.error("Could not deleteByPrimaryKey, a SQL Exception occured.", sqlex);
			return(-1);
		} finally {
			ConnectionManager.closeAll(connection);
		}
		return(numResults);
	}

	/**
	 * Delete all of the rows in the table 'user'.
	 * 
	 * This database does not have the 'truncate' keywork hence the 'DELETE FROM' SQL
	 * statement is used
	 * 
	 * 
	 * @return The number of rows affected by this statement
	 */
	public static int deleteAll(Connection connection) throws SQLException {
		PreparedStatement preparedStatement = null;
		int numResults = -1;
		try {
			preparedStatement = connection.prepareStatement(SQL_BUILTIN_DELETE_ALL);
			numResults = preparedStatement.executeUpdate();
		} catch (SQLException sqlex) {
			LOGGER.error("Could not deleteAll, a SQL Exception occured.", sqlex);
			ConnectionManager.closeAll(preparedStatement);
		}
		return(numResults);
	}

	public static int deleteAll() throws SQLException {
		Connection connection = null;
		int numResults = -1;
		try {
			connection = ConnectionManager.getConnection();
			numResults = deleteAll(connection);
		} catch (SQLException sqlex) {
			throw sqlex;
		} finally {
			ConnectionManager.closeAll(connection);
		}
		return(numResults);
	}

	public static int deleteAllSilent(Connection connection) {
		int numResults = -1;
		try {
			numResults = deleteAll(connection);
		} catch (SQLException sqlex) {
			LOGGER.error("Could not deleteAll, a SQL Exception occured.", sqlex);
		}
		return(numResults);
	}

	public static int deleteAllSilent() {
		Connection connection = null;
		int numResults = -1;
		try {
			connection = ConnectionManager.getConnection();
			numResults = deleteAll(connection);
		} catch (SQLException sqlex) {
			LOGGER.error("Could not deleteAll, a SQL Exception occured.", sqlex);
		} finally {
			ConnectionManager.closeAll(connection);
		}
		return(numResults);
	}

	public static int deleteByNumAge(Connection connection,  Integer numAge) throws SQLException {
		PreparedStatement preparedStatement = connection.prepareStatement(SQL_DELETE_BY_NUM_AGE);
		ConnectionManager.setInt(preparedStatement, 1, numAge);

		int numResults = preparedStatement.executeUpdate();
		ConnectionManager.closeAll(preparedStatement);
		return(numResults);
	}

	public static int deleteByFlIsAliveIdUserType(Connection connection,  Boolean flIsAlive,Long idUserType) throws SQLException {
		PreparedStatement preparedStatement = connection.prepareStatement(SQL_DELETE_BY_FL_IS_ALIVE_ID_USER_TYPE);
		ConnectionManager.setBoolean(preparedStatement, 1, flIsAlive);
		ConnectionManager.setBigint(preparedStatement, 2, idUserType);

		int numResults = preparedStatement.executeUpdate();
		ConnectionManager.closeAll(preparedStatement);
		return(numResults);
	}

	public static int deleteByNumAgeTest(Connection connection,  Integer numAge) throws SQLException {
		PreparedStatement preparedStatement = connection.prepareStatement(SQL_DELETE_BY_NUM_AGE_TEST);
		ConnectionManager.setInt(preparedStatement, 1, numAge);

		int numResults = preparedStatement.executeUpdate();
		ConnectionManager.closeAll(preparedStatement);
		return(numResults);
	}

	public static int deleteByNumAge(Integer numAge) {
		Connection connection;
		try {
			connection = ConnectionManager.getConnection();
			int numRowsDeleted = deleteByNumAge(connection, numAge);
			ConnectionManager.closeAll(connection);
			return(numRowsDeleted);
		} catch (SQLException sqlex) {
			LOGGER.error("Could not deleteByNumAge, a SQL Exception occured.", sqlex);
			return(-1);
		}
	}
	public static int deleteByNumAgeSilent(Integer numAge) {
		Connection connection;
		try {
			connection = ConnectionManager.getConnection();
			int numRowsDeleted = deleteByNumAge(connection, numAge);
			ConnectionManager.closeAll(connection);
			return(numRowsDeleted);
		} catch (SQLException sqlex) {
			LOGGER.error("Could not deleteByNumAge, a SQL Exception occured.", sqlex);
			return(-1);
		}
	}

	public static int deleteByNumAgeSilent(Connection connection, Integer numAge) {
		try {
			return(deleteByNumAge(connection, numAge));
		} catch (SQLException sqlex) {
			LOGGER.error("Could not deleteByNumAge, a SQL Exception occured.", sqlex);
			return(-1);
		}
	}
	public static int deleteByFlIsAliveIdUserType(Boolean flIsAlive,Long idUserType) {
		Connection connection;
		try {
			connection = ConnectionManager.getConnection();
			int numRowsDeleted = deleteByFlIsAliveIdUserType(connection, flIsAlive,idUserType);
			ConnectionManager.closeAll(connection);
			return(numRowsDeleted);
		} catch (SQLException sqlex) {
			LOGGER.error("Could not deleteByFlIsAliveIdUserType, a SQL Exception occured.", sqlex);
			return(-1);
		}
	}
	public static int deleteByFlIsAliveIdUserTypeSilent(Boolean flIsAlive,Long idUserType) {
		Connection connection;
		try {
			connection = ConnectionManager.getConnection();
			int numRowsDeleted = deleteByFlIsAliveIdUserType(connection, flIsAlive,idUserType);
			ConnectionManager.closeAll(connection);
			return(numRowsDeleted);
		} catch (SQLException sqlex) {
			LOGGER.error("Could not deleteByFlIsAliveIdUserType, a SQL Exception occured.", sqlex);
			return(-1);
		}
	}

	public static int deleteByFlIsAliveIdUserTypeSilent(Connection connection, Boolean flIsAlive, Long idUserType) {
		try {
			return(deleteByFlIsAliveIdUserType(connection, flIsAlive,idUserType));
		} catch (SQLException sqlex) {
			LOGGER.error("Could not deleteByFlIsAliveIdUserType, a SQL Exception occured.", sqlex);
			return(-1);
		}
	}
	public static int deleteByNumAgeTest(Integer numAge) {
		Connection connection;
		try {
			connection = ConnectionManager.getConnection();
			int numRowsDeleted = deleteByNumAgeTest(connection, numAge);
			ConnectionManager.closeAll(connection);
			return(numRowsDeleted);
		} catch (SQLException sqlex) {
			LOGGER.error("Could not deleteByNumAgeTest, a SQL Exception occured.", sqlex);
			return(-1);
		}
	}
	public static int deleteByNumAgeTestSilent(Integer numAge) {
		Connection connection;
		try {
			connection = ConnectionManager.getConnection();
			int numRowsDeleted = deleteByNumAgeTest(connection, numAge);
			ConnectionManager.closeAll(connection);
			return(numRowsDeleted);
		} catch (SQLException sqlex) {
			LOGGER.error("Could not deleteByNumAgeTest, a SQL Exception occured.", sqlex);
			return(-1);
		}
	}

	public static int deleteByNumAgeTestSilent(Connection connection, Integer numAge) {
		try {
			return(deleteByNumAgeTest(connection, numAge));
		} catch (SQLException sqlex) {
			LOGGER.error("Could not deleteByNumAgeTest, a SQL Exception occured.", sqlex);
			return(-1);
		}
	}
}