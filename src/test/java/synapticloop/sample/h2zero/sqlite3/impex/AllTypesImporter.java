package synapticloop.sample.h2zero.sqlite3.impex;

// - - - - thoughtfully generated by synapticloop h2zero - - - - 
//    with the use of synapticloop templar templating language
//                 (/impex/impex-importer.templar)

import synapticloop.h2zero.exception.H2ZeroParseException;
import java.math.*;
import java.sql.*;

public class AllTypesImporter {
	public static void importLine(String line) throws H2ZeroParseException {
		String[] splits = line.split("\t");
		if(splits.length != 15) {
			// we don't have enough tokens to import - we always import every field
			throw new H2ZeroParseException(String.format("Insufficient fields, found '%d', required '%d'",15 , splits.length));
		}

		// we are good to go
		// for each field - we parse the value
		Long idAllTypes = ImpexConverter.convertLong(splits[0], false);
		Long testBigint = ImpexConverter.convertLong(splits[1], true);
		Boolean testBoolean = ImpexConverter.convertBoolean(splits[2], true);
		Date testDate = ImpexConverter.convertDate(splits[3], true);
		Timestamp testDatetime = ImpexConverter.convertTimestamp(splits[4], true);
		Double testDouble = ImpexConverter.convertDouble(splits[5], true);
		Float testFloat = ImpexConverter.convertFloat(splits[6], true);
		Integer testInt = ImpexConverter.convertInteger(splits[7], true);
		Integer testInteger = ImpexConverter.convertInteger(splits[8], true);
		Integer testMediumint = ImpexConverter.convertInteger(splits[9], true);
		BigDecimal testNumeric = ImpexConverter.convertBigDecimal(splits[10], true);
		Short testSmallint = ImpexConverter.convertShort(splits[11], true);
		String testText = ImpexConverter.convertString(splits[12], true);
		Boolean testTinyint = ImpexConverter.convertBoolean(splits[13], true);
		String testVarchar = ImpexConverter.convertString(splits[14], true);
	}

}