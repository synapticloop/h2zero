package synapticloop.sample.h2zero.sqlite3.model;

// - - - - thoughtfully generated by synapticloop h2zero - - - - 
//    with the use of synapticloop templar templating language
//                  (java-create-model.templar)

import java.util.HashMap;

import java.util.Map;


import org.json.JSONObject;
import synapticloop.h2zero.util.XmlHelper;

import synapticloop.h2zero.base.model.ModelBaseHelper;
import synapticloop.sample.h2zero.sqlite3.model.util.Constants;


/**
 * <p>This is the model for the <code>AuthorStatus</code> which maps to the <code>author_status</code> database table.</p>
 * <p><strong>NOTE:</strong> This is a constant table which cannot be changed and no CRUD methods are available.</p>
  * 
 * @author synapticloop h2zero
 * 
 * <p>@see <a href="https://github.com/synapticloop/h2zero">Synapticloop h2zero GitHub repository</a></p>
 */
public class AuthorStatus  {
	// the binder is unused in code, but will generate compile problems if this 
	// class is no longer referenced in the h2zero file. Just a nicety for
	// removing dead code
	@SuppressWarnings("unused")
	private static final String BINDER = Constants.AUTHOR_STATUS_BINDER;

	public static final AuthorStatus WAITING = new AuthorStatus(Long.valueOf(1), "WAITING", "Waiting for the number of followers for the author to be hit");
	public static final AuthorStatus TO_BE_EVALUATED = new AuthorStatus(Long.valueOf(2), "TO_BE_EVALUATED", "Author is waiting to be evaluated.");
	public static final AuthorStatus IGNORED = new AuthorStatus(Long.valueOf(3), "IGNORED", "Author is being ignored.");
	public static final AuthorStatus FOLLOWED = new AuthorStatus(Long.valueOf(4), "FOLLOWED", "Author is followed.");
 	public static final Long WAITING_PRIMARY_KEY_VALUE = Long.valueOf(1);
 	public static final Long TO_BE_EVALUATED_PRIMARY_KEY_VALUE = Long.valueOf(2);
 	public static final Long IGNORED_PRIMARY_KEY_VALUE = Long.valueOf(3);
 	public static final Long FOLLOWED_PRIMARY_KEY_VALUE = Long.valueOf(4);

	public static final AuthorStatus[] ALL =  {
		AuthorStatus.WAITING, AuthorStatus.TO_BE_EVALUATED, AuthorStatus.IGNORED, AuthorStatus.FOLLOWED
	};

	public static final Map<Long, AuthorStatus> ALL_LOOKUP = new HashMap<>();
	static{
		ALL_LOOKUP.put(Long.valueOf(1), AuthorStatus.WAITING);
		ALL_LOOKUP.put(Long.valueOf(2), AuthorStatus.TO_BE_EVALUATED);
		ALL_LOOKUP.put(Long.valueOf(3), AuthorStatus.IGNORED);
		ALL_LOOKUP.put(Long.valueOf(4), AuthorStatus.FOLLOWED);

	};

	public static final String PRIMARY_KEY_FIELD = "id_author_status";  // the primary key - a convenience field



	private Long idAuthorStatus = null; // maps to the id_author_status field
	private String txtAuthorStatus = null; // maps to the txt_author_status field
	private String txtDescAuthorStatus = null; // maps to the txt_desc_author_status field

	/**
	 * Instantiate the AuthorStatus object with all the fields within the table.
	 * 
	 * <p>You have a primary key field of <code>synapticloop.h2zero.model.field.BigintField@635e96e3</code>
	 * Note, that if the primary key on this table is an <code>auto_increment</code> field
	 * then, passing in <code>null</code> will automatically generate this field value
	 * and will set the value.</p>
	 * 
	 * @param idAuthorStatus - maps to the <code>id_author_status</code>
	 * @param txtAuthorStatus - maps to the <code>txt_author_status</code>
	 * @param txtDescAuthorStatus - maps to the <code>txt_desc_author_status</code>
	 */
	public AuthorStatus(Long idAuthorStatus, String txtAuthorStatus, String txtDescAuthorStatus) {
		this.idAuthorStatus = idAuthorStatus;
		this.txtAuthorStatus = txtAuthorStatus;
		this.txtDescAuthorStatus = txtDescAuthorStatus;
	}

	/*
	 * Boring ol' getters and setters 
	 * 
	 * On setting any of these fields - the 'isDirty' flag will be set
	 * 
	 */

	public Long getPrimaryKey() { return(this.idAuthorStatus); }
	public Long getIdAuthorStatus() { return(this.idAuthorStatus); }
	public String getTxtAuthorStatus() { return(this.txtAuthorStatus); }
	public String getTxtDescAuthorStatus() { return(this.txtDescAuthorStatus); }

	@Override
	public String toString() {
		StringBuilder stringBuilder = new StringBuilder();
		stringBuilder
			.append("{\"AuthorStatus\": {\n")
			.append("\"idAuthorStatus\":\"").append(this.idAuthorStatus).append("\"")
			.append("\"txtAuthorStatus\":\"").append(this.txtAuthorStatus).append("\"")
			.append("\"txtDescAuthorStatus\":\"").append(this.txtDescAuthorStatus).append("\"")
			.append("}");
		return(stringBuilder.toString());
	}
	public JSONObject getToJSON() {
		return(toJSON());
	}

	public JSONObject toJSON() {
		JSONObject jsonObject = new JSONObject();

		jsonObject.put("type", "table");
		jsonObject.put("name", "AuthorStatus");
		JSONObject fieldsObject = new JSONObject();

		ModelBaseHelper.addtoJSONObject(fieldsObject, "idAuthorStatus", this.getIdAuthorStatus());
		ModelBaseHelper.addtoJSONObject(fieldsObject, "txtAuthorStatus", this.getTxtAuthorStatus());
		ModelBaseHelper.addtoJSONObject(fieldsObject, "txtDescAuthorStatus", this.getTxtDescAuthorStatus());

		jsonObject.put("fields", fieldsObject);

		return(jsonObject);
	}


	public String toJsonString() {
		return(toJSON().toString());
	}

	public String getJsonString() {
		return(toJsonString());
	}

	/**
	 * <p>Return an XML representation of the <code>AuthorStatus</code> model as a <code>String</code>, 
	 * with the root node being the name of the table - i.e. <code>&lt;author_status /&gt;</code> 
	 * and the child nodes the name of the fields.</p>
	 * 
	 * <p><strong>NOTE:</strong> Any field marked as secure will not be included as
	 * part of the XML document</p>
	 * 
	 * @return An XML representation of the model as a <code>String</code>.
	 */
	public String toXMLString() {
		return("<author_status>" + 
			String.format("<id_author_status null=\"%b\">%s</id_author_status>", (this.getIdAuthorStatus() == null), (this.getIdAuthorStatus() != null ? this.getIdAuthorStatus() : "")) + 
			String.format("<txt_author_status null=\"%b\">%s</txt_author_status>", (this.getTxtAuthorStatus() == null), (this.getTxtAuthorStatus() != null ? XmlHelper.escapeXml(this.getTxtAuthorStatus()) : "")) + 
			String.format("<txt_desc_author_status null=\"%b\">%s</txt_desc_author_status>", (this.getTxtDescAuthorStatus() == null), (this.getTxtDescAuthorStatus() != null ? XmlHelper.escapeXml(this.getTxtDescAuthorStatus()) : "")) + 
			"</author_status>");
	}

}