package synapticloop.sample.h2zero.sqlite3.model;

// - - - - thoughtfully generated by synapticloop h2zero - - - - 
//    with the use of synapticloop templar templating language
//                  (java-create-model.templar)

import synapticloop.h2zero.base.manager.sqlite3.ConnectionManager;
import synapticloop.h2zero.base.validator.bean.ValidationBean;
import synapticloop.h2zero.base.validator.bean.ValidationFieldBean;
import synapticloop.sample.h2zero.sqlite3.question.AuthorStatusQuestion;
import synapticloop.h2zero.base.validator.*;
import synapticloop.h2zero.base.model.sqlite3.ModelBase;
import synapticloop.h2zero.base.exception.H2ZeroPrimaryKeyException;
import java.lang.StringBuilder;
import java.sql.Connection;
import java.math.BigDecimal;
import java.sql.Timestamp;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.PreparedStatement;
import java.sql.SQLException;

import org.json.JSONObject;

import synapticloop.h2zero.base.model.ModelBaseHelper;
import synapticloop.sample.h2zero.sqlite3.model.util.Constants;

import synapticloop.sample.h2zero.sqlite3.finder.AuthorFinder;


public class Author extends ModelBase {
	// the binder is unused in code, but will generate compile problems if this 
	// class is no longer referenced in the h2zero file. Just a nicety for
	// removing dead code
	@SuppressWarnings("unused")
	private static final String BINDER = Constants.AUTHOR_BINDER;

	public static final String PRIMARY_KEY_FIELD = "id_author";

	private static final String SQL_INSERT = "insert into author (id_author_status, txt_id_author, nm_author, nm_username, txt_bio, txt_url_cache_image, num_following, num_followers, dtm_started_following, fl_is_updating, fl_author_is_following_user, fl_author_is_followed_by_user) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
	private static final String SQL_UPDATE = "update author set id_author_status = ?, txt_id_author = ?, nm_author = ?, nm_username = ?, txt_bio = ?, txt_url_cache_image = ?, num_following = ?, num_followers = ?, dtm_started_following = ?, fl_is_updating = ?, fl_author_is_following_user = ?, fl_author_is_followed_by_user = ? where " + PRIMARY_KEY_FIELD + " = ?";
	private static final String SQL_DELETE = "delete from author where " + PRIMARY_KEY_FIELD + " = ?";
	private static final String SQL_ENSURE = "select " + PRIMARY_KEY_FIELD + " from author where id_author_status = ? and txt_id_author = ? and nm_author = ? and nm_username = ? and txt_bio = ? and txt_url_cache_image = ? and num_following = ? and num_followers = ? and dtm_started_following = ? and fl_is_updating = ? and fl_author_is_following_user = ? and fl_author_is_followed_by_user = ?";


// Static lookups for fields in the hit counter.
	public static final int HIT_TOTAL = 0;
	public static final int HIT_ID_AUTHOR = 1;
	public static final int HIT_ID_AUTHOR_STATUS = 2;
	public static final int HIT_TXT_ID_AUTHOR = 3;
	public static final int HIT_NM_AUTHOR = 4;
	public static final int HIT_NM_USERNAME = 5;
	public static final int HIT_TXT_BIO = 6;
	public static final int HIT_TXT_URL_CACHE_IMAGE = 7;
	public static final int HIT_NUM_FOLLOWING = 8;
	public static final int HIT_NUM_FOLLOWERS = 9;
	public static final int HIT_DTM_STARTED_FOLLOWING = 10;
	public static final int HIT_FL_IS_UPDATING = 11;
	public static final int HIT_FL_AUTHOR_IS_FOLLOWING_USER = 12;
	public static final int HIT_FL_AUTHOR_IS_FOLLOWED_BY_USER = 13;


	// the list of fields for the hit - starting with 'TOTAL'
	private static final String[] HIT_FIELDS = { "TOTAL", "id_author", "id_author_status", "txt_id_author", "nm_author", "nm_username", "txt_bio", "txt_url_cache_image", "num_following", "num_followers", "dtm_started_following", "fl_is_updating", "fl_author_is_following_user", "fl_author_is_followed_by_user" };
	// the number of read-hits for a particular field
	private static int[] HIT_COUNTS = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };


	private Long idAuthor = null;
	private Long idAuthorStatus = null;
	private String txtIdAuthor = null;
	private String nmAuthor = null;
	private String nmUsername = null;
	private String txtBio = null;
	private String txtUrlCacheImage = null;
	private Long numFollowing = null;
	private Long numFollowers = null;
	private Timestamp dtmStartedFollowing = null;
	private Boolean flIsUpdating = null;
	private Boolean flAuthorIsFollowingUser = null;
	private Boolean flAuthorIsFollowedByUser = null;

	public Author(Long idAuthor, Long idAuthorStatus, String txtIdAuthor, String nmAuthor, String nmUsername, String txtBio, String txtUrlCacheImage, Long numFollowing, Long numFollowers, Timestamp dtmStartedFollowing, Boolean flIsUpdating, Boolean flAuthorIsFollowingUser, Boolean flAuthorIsFollowedByUser) {
		this.idAuthor = idAuthor;
		this.idAuthorStatus = idAuthorStatus;
		this.txtIdAuthor = txtIdAuthor;
		this.nmAuthor = nmAuthor;
		this.nmUsername = nmUsername;
		this.txtBio = txtBio;
		this.txtUrlCacheImage = txtUrlCacheImage;
		this.numFollowing = numFollowing;
		this.numFollowers = numFollowers;
		this.dtmStartedFollowing = dtmStartedFollowing;
		this.flIsUpdating = flIsUpdating;
		this.flAuthorIsFollowingUser = flAuthorIsFollowingUser;
		this.flAuthorIsFollowedByUser = flAuthorIsFollowedByUser;
	}

	public Author(Long idAuthor, String txtIdAuthor, String nmAuthor, String nmUsername, String txtBio, String txtUrlCacheImage) {
		this.idAuthor = idAuthor;
		this.idAuthorStatus = null;
		this.txtIdAuthor = txtIdAuthor;
		this.nmAuthor = nmAuthor;
		this.nmUsername = nmUsername;
		this.txtBio = txtBio;
		this.txtUrlCacheImage = txtUrlCacheImage;
		this.numFollowing = null;
		this.numFollowers = null;
		this.dtmStartedFollowing = null;
		this.flIsUpdating = null;
		this.flAuthorIsFollowingUser = null;
		this.flAuthorIsFollowedByUser = null;
	}

	@Override
	public boolean primaryKeySet() {
		return(null != idAuthor);
	}


	@Override
	public void insert(Connection connection) throws SQLException, H2ZeroPrimaryKeyException {
		if(primaryKeySet()) {
			throw new H2ZeroPrimaryKeyException("Cannot insert author model when primary key is not null.");
		}
		// create this bean 
		PreparedStatement preparedStatement = connection.prepareStatement(SQL_INSERT, Statement.RETURN_GENERATED_KEYS);
		ConnectionManager.setBigint(preparedStatement, 1, idAuthorStatus);
		ConnectionManager.setVarchar(preparedStatement, 2, txtIdAuthor);
		ConnectionManager.setVarchar(preparedStatement, 3, nmAuthor);
		ConnectionManager.setVarchar(preparedStatement, 4, nmUsername);
		ConnectionManager.setVarchar(preparedStatement, 5, txtBio);
		ConnectionManager.setVarchar(preparedStatement, 6, txtUrlCacheImage);
		ConnectionManager.setBigint(preparedStatement, 7, numFollowing);
		ConnectionManager.setBigint(preparedStatement, 8, numFollowers);
		ConnectionManager.setDatetime(preparedStatement, 9, dtmStartedFollowing);
		ConnectionManager.setBoolean(preparedStatement, 10, flIsUpdating);
		ConnectionManager.setBoolean(preparedStatement, 11, flAuthorIsFollowingUser);
		ConnectionManager.setBoolean(preparedStatement, 12, flAuthorIsFollowedByUser);
		preparedStatement.executeUpdate();
		ResultSet resultSet = preparedStatement.getGeneratedKeys();
		if(resultSet.next()) {
			this.idAuthor = resultSet.getLong(1);
		} else {
			throw new H2ZeroPrimaryKeyException("Could not get return value for primary key!");
		}
		ConnectionManager.closeAll(resultSet, preparedStatement);
	}

	@Override
	public void ensure(Connection connection) throws SQLException, H2ZeroPrimaryKeyException {
		PreparedStatement preparedStatement = connection.prepareStatement(SQL_ENSURE);
		ConnectionManager.setBigint(preparedStatement, 1, idAuthorStatus);
		ConnectionManager.setVarchar(preparedStatement, 2, txtIdAuthor);
		ConnectionManager.setVarchar(preparedStatement, 3, nmAuthor);
		ConnectionManager.setVarchar(preparedStatement, 4, nmUsername);
		ConnectionManager.setVarchar(preparedStatement, 5, txtBio);
		ConnectionManager.setVarchar(preparedStatement, 6, txtUrlCacheImage);
		ConnectionManager.setBigint(preparedStatement, 7, numFollowing);
		ConnectionManager.setBigint(preparedStatement, 8, numFollowers);
		ConnectionManager.setDatetime(preparedStatement, 9, dtmStartedFollowing);
		ConnectionManager.setBoolean(preparedStatement, 10, flIsUpdating);
		ConnectionManager.setBoolean(preparedStatement, 11, flAuthorIsFollowingUser);
		ConnectionManager.setBoolean(preparedStatement, 12, flAuthorIsFollowedByUser);
		ResultSet resultSet = preparedStatement.executeQuery();
		if(resultSet.next()) {
			this.idAuthor = resultSet.getLong(1);
		} else {
			// could not find the value - need to insert it - null is the primary key
			insert(connection);
		}
		ConnectionManager.closeAll(resultSet, preparedStatement);
	}

	@Override
	public void update(Connection connection) throws SQLException, H2ZeroPrimaryKeyException {
		if(!primaryKeySet()) {
			throw new H2ZeroPrimaryKeyException("Cannot update bean when primary key is null.");
		}
		if(isDirty) {
			// update this bean, but only if dirty
			PreparedStatement preparedStatement = connection.prepareStatement(SQL_UPDATE);
			ConnectionManager.setBigint(preparedStatement, 1, idAuthorStatus);
			ConnectionManager.setVarchar(preparedStatement, 2, txtIdAuthor);
			ConnectionManager.setVarchar(preparedStatement, 3, nmAuthor);
			ConnectionManager.setVarchar(preparedStatement, 4, nmUsername);
			ConnectionManager.setVarchar(preparedStatement, 5, txtBio);
			ConnectionManager.setVarchar(preparedStatement, 6, txtUrlCacheImage);
			ConnectionManager.setBigint(preparedStatement, 7, numFollowing);
			ConnectionManager.setBigint(preparedStatement, 8, numFollowers);
			ConnectionManager.setDatetime(preparedStatement, 9, dtmStartedFollowing);
			ConnectionManager.setBoolean(preparedStatement, 10, flIsUpdating);
			ConnectionManager.setBoolean(preparedStatement, 11, flAuthorIsFollowingUser);
			ConnectionManager.setBoolean(preparedStatement, 12, flAuthorIsFollowedByUser);
			// now set the primary key
			preparedStatement.setLong(13, idAuthor);
			preparedStatement.executeUpdate();
			ConnectionManager.closeAll(preparedStatement);
			isDirty = false;
		}
	}

	@Override
	public void delete(Connection connection) throws SQLException, H2ZeroPrimaryKeyException{
		if(!primaryKeySet()) {
			throw new H2ZeroPrimaryKeyException("Cannot delete bean when primary key is null.");
		}
		PreparedStatement preparedStatement = connection.prepareStatement(SQL_DELETE);
		preparedStatement.setLong(1, idAuthor);
		preparedStatement.executeUpdate();
		ConnectionManager.closeAll(preparedStatement);
	}

	@Override
	public void refresh(Connection connection) throws H2ZeroPrimaryKeyException {
		if(!primaryKeySet()) {
			throw new H2ZeroPrimaryKeyException("Cannot refresh bean when primary key is null.");
		}
		Author author = AuthorFinder.findByPrimaryKeySilent(connection, this.idAuthor);
		this.idAuthor = author.getIdAuthor();
		this.idAuthorStatus = author.getIdAuthorStatus();
		this.txtIdAuthor = author.getTxtIdAuthor();
		this.nmAuthor = author.getNmAuthor();
		this.nmUsername = author.getNmUsername();
		this.txtBio = author.getTxtBio();
		this.txtUrlCacheImage = author.getTxtUrlCacheImage();
		this.numFollowing = author.getNumFollowing();
		this.numFollowers = author.getNumFollowers();
		this.dtmStartedFollowing = author.getDtmStartedFollowing();
		this.flIsUpdating = author.getFlIsUpdating();
		this.flAuthorIsFollowingUser = author.getFlAuthorIsFollowingUser();
		this.flAuthorIsFollowedByUser = author.getFlAuthorIsFollowedByUser();
	}

	public static String[] getHitFields() { return(HIT_FIELDS); }
	public static int[] getHitCounts() { return(HIT_COUNTS); }

	public AuthorStatus getAuthorStatus() {
		return(AuthorStatus.ALL_LOOKUP.get(this.idAuthorStatus));
	}

	public static void updateHitCount(int offset) {
		HIT_COUNTS[0]++;
		HIT_COUNTS[offset]++;
	}

	/*
	 * Boring ol' getters and setters 
	 */

	public Long getPrimaryKey() { updateHitCount(1); return(this.idAuthor); }
	public void setPrimaryKey(Long idAuthor) { if(isDifferent(this.idAuthor, idAuthor)) { this.idAuthor = idAuthor;this.isDirty = true; }}
	public Long getIdAuthor() { updateHitCount(1); return(this.idAuthor); }
	public void setIdAuthor(Long idAuthor) { if(isDifferent(this.idAuthor, idAuthor)) { this.idAuthor = idAuthor;this.isDirty = true; }}
	public Long getIdAuthorStatus() { updateHitCount(2); return(this.idAuthorStatus); }
	public void setIdAuthorStatus(Long idAuthorStatus) { if(isDifferent(this.idAuthorStatus, idAuthorStatus)) { this.idAuthorStatus = idAuthorStatus;this.isDirty = true; }}
	public String getTxtIdAuthor() { updateHitCount(3); return(this.txtIdAuthor); }
	public void setTxtIdAuthor(String txtIdAuthor) { if(isDifferent(this.txtIdAuthor, txtIdAuthor)) { this.txtIdAuthor = txtIdAuthor;this.isDirty = true; }}
	public String getNmAuthor() { updateHitCount(4); return(this.nmAuthor); }
	public void setNmAuthor(String nmAuthor) { if(isDifferent(this.nmAuthor, nmAuthor)) { this.nmAuthor = nmAuthor;this.isDirty = true; }}
	public String getNmUsername() { updateHitCount(5); return(this.nmUsername); }
	public void setNmUsername(String nmUsername) { if(isDifferent(this.nmUsername, nmUsername)) { this.nmUsername = nmUsername;this.isDirty = true; }}
	public String getTxtBio() { updateHitCount(6); return(this.txtBio); }
	public void setTxtBio(String txtBio) { if(isDifferent(this.txtBio, txtBio)) { this.txtBio = txtBio;this.isDirty = true; }}
	public String getTxtUrlCacheImage() { updateHitCount(7); return(this.txtUrlCacheImage); }
	public void setTxtUrlCacheImage(String txtUrlCacheImage) { if(isDifferent(this.txtUrlCacheImage, txtUrlCacheImage)) { this.txtUrlCacheImage = txtUrlCacheImage;this.isDirty = true; }}
	public Long getNumFollowing() { updateHitCount(8); return(this.numFollowing); }
	public void setNumFollowing(Long numFollowing) { if(isDifferent(this.numFollowing, numFollowing)) { this.numFollowing = numFollowing;this.isDirty = true; }}
	public Long getNumFollowers() { updateHitCount(9); return(this.numFollowers); }
	public void setNumFollowers(Long numFollowers) { if(isDifferent(this.numFollowers, numFollowers)) { this.numFollowers = numFollowers;this.isDirty = true; }}
	public Timestamp getDtmStartedFollowing() { updateHitCount(10); return(this.dtmStartedFollowing); }
	public void setDtmStartedFollowing(Timestamp dtmStartedFollowing) { if(isDifferent(this.dtmStartedFollowing, dtmStartedFollowing)) { this.dtmStartedFollowing = dtmStartedFollowing;this.isDirty = true; }}
	public Boolean getFlIsUpdating() { updateHitCount(11); return(this.flIsUpdating); }
	public void setFlIsUpdating(Boolean flIsUpdating) { if(isDifferent(this.flIsUpdating, flIsUpdating)) { this.flIsUpdating = flIsUpdating;this.isDirty = true; }}
	public Boolean getFlAuthorIsFollowingUser() { updateHitCount(12); return(this.flAuthorIsFollowingUser); }
	public void setFlAuthorIsFollowingUser(Boolean flAuthorIsFollowingUser) { if(isDifferent(this.flAuthorIsFollowingUser, flAuthorIsFollowingUser)) { this.flAuthorIsFollowingUser = flAuthorIsFollowingUser;this.isDirty = true; }}
	public Boolean getFlAuthorIsFollowedByUser() { updateHitCount(13); return(this.flAuthorIsFollowedByUser); }
	public void setFlAuthorIsFollowedByUser(Boolean flAuthorIsFollowedByUser) { if(isDifferent(this.flAuthorIsFollowedByUser, flAuthorIsFollowedByUser)) { this.flAuthorIsFollowedByUser = flAuthorIsFollowedByUser;this.isDirty = true; }}

	@Override
	public ValidationBean validate() {
		ValidationBean validationBean = new ValidationBean();

		ValidationFieldBean idAuthorStatusValidationFieldBean = new BigintValidator("id_author_status", idAuthorStatus.toString(), 0, 0, true).validate();
		idAuthorStatusValidationFieldBean.setIsIncorrectForeignKey(!AuthorStatusQuestion.internalDoesPrimaryKeyExist(idAuthorStatus));
		validationBean.addValidationFieldBean(idAuthorStatusValidationFieldBean);

		validationBean.addValidationFieldBean(new VarcharValidator("txt_id_author", txtIdAuthor.toString(), 0, 256, false).validate());
		validationBean.addValidationFieldBean(new VarcharValidator("nm_author", nmAuthor.toString(), 0, 256, false).validate());
		validationBean.addValidationFieldBean(new VarcharValidator("nm_username", nmUsername.toString(), 0, 256, false).validate());
		validationBean.addValidationFieldBean(new VarcharValidator("txt_bio", txtBio.toString(), 0, 512, false).validate());
		validationBean.addValidationFieldBean(new VarcharValidator("txt_url_cache_image", txtUrlCacheImage.toString(), 0, 512, false).validate());
		validationBean.addValidationFieldBean(new BigintValidator("num_following", numFollowing.toString(), 0, 0, true).validate());
		validationBean.addValidationFieldBean(new BigintValidator("num_followers", numFollowers.toString(), 0, 0, true).validate());
		validationBean.addValidationFieldBean(new DatetimeValidator("dtm_started_following", dtmStartedFollowing.toString(), 0, 0, true).validate());
		validationBean.addValidationFieldBean(new BooleanValidator("fl_is_updating", flIsUpdating.toString(), 0, 0, true).validate());
		validationBean.addValidationFieldBean(new BooleanValidator("fl_author_is_following_user", flAuthorIsFollowingUser.toString(), 0, 0, true).validate());
		validationBean.addValidationFieldBean(new BooleanValidator("fl_author_is_followed_by_user", flAuthorIsFollowedByUser.toString(), 0, 0, true).validate());
		return(validationBean);
	}


	@Override
	public String toString() {
		StringBuilder stringBuilder = new StringBuilder();
		stringBuilder
			.append("Model: 'Author'\n")
			.append("  Field: 'idAuthor:").append(this.idAuthor).append("'\n")
			.append("  Field: 'idAuthorStatus:").append(this.idAuthorStatus).append("'\n")
			.append("  Field: 'txtIdAuthor:").append(this.txtIdAuthor).append("'\n")
			.append("  Field: 'nmAuthor:").append(this.nmAuthor).append("'\n")
			.append("  Field: 'nmUsername:").append(this.nmUsername).append("'\n")
			.append("  Field: 'txtBio:").append(this.txtBio).append("'\n")
			.append("  Field: 'txtUrlCacheImage:").append(this.txtUrlCacheImage).append("'\n")
			.append("  Field: 'numFollowing:").append(this.numFollowing).append("'\n")
			.append("  Field: 'numFollowers:").append(this.numFollowers).append("'\n")
			.append("  Field: 'dtmStartedFollowing:").append(this.dtmStartedFollowing).append("'\n")
			.append("  Field: 'flIsUpdating:").append(this.flIsUpdating).append("'\n")
			.append("  Field: 'flAuthorIsFollowingUser:").append(this.flAuthorIsFollowingUser).append("'\n")
			.append("  Field: 'flAuthorIsFollowedByUser:").append(this.flAuthorIsFollowedByUser).append("'\n")
			;
		return(stringBuilder.toString());
	}
	public JSONObject getToJSON() {
		return(toJSON());
	}

	public JSONObject toJSON() {
		JSONObject jsonObject = new JSONObject();

		jsonObject.put("type", "table");
		jsonObject.put("name", "Author");
		JSONObject fieldsObject = new JSONObject();

		ModelBaseHelper.addtoJSONObject(fieldsObject, "idAuthor", this.getIdAuthor());
		ModelBaseHelper.addtoJSONObject(fieldsObject, "idAuthorStatus", this.getIdAuthorStatus());
		ModelBaseHelper.addtoJSONObject(fieldsObject, "txtIdAuthor", this.getTxtIdAuthor());
		ModelBaseHelper.addtoJSONObject(fieldsObject, "nmAuthor", this.getNmAuthor());
		ModelBaseHelper.addtoJSONObject(fieldsObject, "nmUsername", this.getNmUsername());
		ModelBaseHelper.addtoJSONObject(fieldsObject, "txtBio", this.getTxtBio());
		ModelBaseHelper.addtoJSONObject(fieldsObject, "txtUrlCacheImage", this.getTxtUrlCacheImage());
		ModelBaseHelper.addtoJSONObject(fieldsObject, "numFollowing", this.getNumFollowing());
		ModelBaseHelper.addtoJSONObject(fieldsObject, "numFollowers", this.getNumFollowers());
		ModelBaseHelper.addtoJSONObject(fieldsObject, "dtmStartedFollowing", this.getDtmStartedFollowing());
		ModelBaseHelper.addtoJSONObject(fieldsObject, "flIsUpdating", this.getFlIsUpdating());
		ModelBaseHelper.addtoJSONObject(fieldsObject, "flAuthorIsFollowingUser", this.getFlAuthorIsFollowingUser());
		ModelBaseHelper.addtoJSONObject(fieldsObject, "flAuthorIsFollowedByUser", this.getFlAuthorIsFollowedByUser());

		jsonObject.put("fields", fieldsObject);

		return(jsonObject);
	}


	public String toJsonString() {
		return(toJSON().toString());
	}

	public String getJsonString() {
		return(toJsonString());
	}

	public static String getHitCountJson() {
		JSONObject jsonObject = new JSONObject();
		jsonObject.put("type", "Author");
		jsonObject.put("total", HIT_COUNTS[0]);
		jsonObject.put("idAuthor", HIT_COUNTS[1]);
		jsonObject.put("idAuthorStatus", HIT_COUNTS[2]);
		jsonObject.put("txtIdAuthor", HIT_COUNTS[3]);
		jsonObject.put("nmAuthor", HIT_COUNTS[4]);
		jsonObject.put("nmUsername", HIT_COUNTS[5]);
		jsonObject.put("txtBio", HIT_COUNTS[6]);
		jsonObject.put("txtUrlCacheImage", HIT_COUNTS[7]);
		jsonObject.put("numFollowing", HIT_COUNTS[8]);
		jsonObject.put("numFollowers", HIT_COUNTS[9]);
		jsonObject.put("dtmStartedFollowing", HIT_COUNTS[10]);
		jsonObject.put("flIsUpdating", HIT_COUNTS[11]);
		jsonObject.put("flAuthorIsFollowingUser", HIT_COUNTS[12]);
		jsonObject.put("flAuthorIsFollowedByUser", HIT_COUNTS[13]);
		return(jsonObject.toString());
	}

}