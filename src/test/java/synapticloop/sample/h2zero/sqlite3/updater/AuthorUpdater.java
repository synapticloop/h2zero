package synapticloop.sample.h2zero.sqlite3.updater;

// - - - - thoughtfully generated by synapticloop h2zero - - - - 
//    with the use of synapticloop templar templating language
//              (java-create-updater.templar)

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Types;
import java.sql.Timestamp;

import synapticloop.h2zero.base.manager.sqlite3.ConnectionManager;
import synapticloop.sample.h2zero.sqlite3.finder.AuthorFinder;
import synapticloop.sample.h2zero.sqlite3.model.util.Constants;

public class AuthorUpdater {
	// the binder is unused in code, but will generate compile problems if this 
	// class is no longer referenced in the h2zero file. Just a nicety for
	// removing dead code
	@SuppressWarnings("unused")
	private static final String BINDER = Constants.AUTHOR_BINDER;

	// static fields generated by synapticloop h2zero
	private static final String SQL_UPDATE_START = "update author ";

	// static fields generated from the user input
	private static final String SQL_RESET_AUTHORS_TO_BE_FOLLOWED = SQL_UPDATE_START + " set id_author_status = (select id_author_status from author_status where txt_author_status = 'FOLLOWED')" + " where id_author_status = (select id_author_status from author_status where txt_author_status = 'TO_BE_EVALUATED') and dtm_started_following < ? order by dtm_started_following";
	private static final String SQL_SET_FL_IS_UPDATING = SQL_UPDATE_START + " set fl_is_updating = ?";
	private static final String SQL_SET_FL_IS_UPDATING_WHERE_FL_AUTHOR_IS_FOLLOWED_BY_USER = SQL_UPDATE_START + " set fl_is_updating = ?" + " where fl_author_is_followed_by_user = 1";
	private static final String SQL_SET_FL_AUTHOR_IS_FOLLOWED_BY_USER_WHERE_FL_IS_UPDATING = SQL_UPDATE_START + " set fl_author_is_followed_by_user = ?, fl_is_updating = 1" + "  where fl_is_updating = 1";
	private static final String SQL_SET_FL_IS_UPDATING_WHERE_FL_AUTHOR_IS_FOLLOWING_USER = SQL_UPDATE_START + " set fl_is_updating = ?" + " where fl_author_is_following_user = 1";
	private static final String SQL_SET_FL_AUTHOR_IS_FOLLOWING_USER_WHERE_FL_IS_UPDATING = SQL_UPDATE_START + " set fl_author_is_following_user = ?, fl_is_updating = 1" + "  where fl_is_updating = 1";
	private static final String SQL_UPDATE_FL_IS_FOLLOWING = SQL_UPDATE_START + " set fl_is = ?";
	private static final String SQL_UPDATE_ALL_TO_BE_EVALUATED_TO_FOLLOWED = SQL_UPDATE_START + " set id_status_author = (select id_author_status from author_status where txt_author_status = 'FOLLOWED')" + " where id_author_status = (select id_author_status from author_status where txt_author_status = 'TO_BE_EVALUATED') and dtm_started_following < ?";

	private AuthorUpdater() {}

	/**
	 * This is the updater for 'resetAuthorsToBeFollowed' and will throw a SQLException on error
	 * See the ''resetAuthorsToBeFollowedSilent' method for a non-throwing method.
	 * 
	 * @param connection the connection to the database
	 * 
	 * @return The number of rows that were updated
	 * @throws SQLException if there was an error in the statement or database connection
	 */ 
	public static int resetAuthorsToBeFollowed(Connection connection, Timestamp dtmStartedFollowing) throws SQLException {
		try (PreparedStatement preparedStatement = connection.prepareStatement(SQL_RESET_AUTHORS_TO_BE_FOLLOWED)) {
			ConnectionManager.setDatetime(preparedStatement, 1, dtmStartedFollowing);

			return(preparedStatement.executeUpdate());
		}
	}

	public static int resetAuthorsToBeFollowed(Timestamp dtmStartedFollowing) throws SQLException {
		int numRowsUpdated = -1;
		try (Connection connection = ConnectionManager.getConnection()) {
			numRowsUpdated = resetAuthorsToBeFollowed(connection, dtmStartedFollowing);
		}
		return(numRowsUpdated);
	}

	public static int resetAuthorsToBeFollowedSilent(Timestamp dtmStartedFollowing) {
		int numRowsUpdated = -1;
		try (Connection connection = ConnectionManager.getConnection()) {
			numRowsUpdated = resetAuthorsToBeFollowed(connection, dtmStartedFollowing);
		} catch (SQLException sqlex) {
			sqlex.printStackTrace();
			return(-1);
		}
		return(numRowsUpdated);
	}

	/**
	 * This is the updater for 'setFlIsUpdating' and will throw a SQLException on error
	 * See the ''setFlIsUpdatingSilent' method for a non-throwing method.
	 * 
	 * @param connection the connection to the database
	 * 
	 * @return The number of rows that were updated
	 * @throws SQLException if there was an error in the statement or database connection
	 */ 
	public static int setFlIsUpdating(Connection connection, Boolean flIsUpdatingSet) throws SQLException {
		try (PreparedStatement preparedStatement = connection.prepareStatement(SQL_SET_FL_IS_UPDATING)) {
			ConnectionManager.setBoolean(preparedStatement, 1, flIsUpdatingSet);

			return(preparedStatement.executeUpdate());
		}
	}

	public static int setFlIsUpdating(Boolean flIsUpdatingSet) throws SQLException {
		int numRowsUpdated = -1;
		try (Connection connection = ConnectionManager.getConnection()) {
			numRowsUpdated = setFlIsUpdating(connection, flIsUpdatingSet);
		}
		return(numRowsUpdated);
	}

	public static int setFlIsUpdatingSilent(Boolean flIsUpdatingSet) {
		int numRowsUpdated = -1;
		try (Connection connection = ConnectionManager.getConnection()) {
			numRowsUpdated = setFlIsUpdating(connection, flIsUpdatingSet);
		} catch (SQLException sqlex) {
			sqlex.printStackTrace();
			return(-1);
		}
		return(numRowsUpdated);
	}

	/**
	 * This is the updater for 'setFlIsUpdatingWhereFlAuthorIsFollowedByUser' and will throw a SQLException on error
	 * See the ''setFlIsUpdatingWhereFlAuthorIsFollowedByUserSilent' method for a non-throwing method.
	 * 
	 * @param connection the connection to the database
	 * 
	 * @return The number of rows that were updated
	 * @throws SQLException if there was an error in the statement or database connection
	 */ 
	public static int setFlIsUpdatingWhereFlAuthorIsFollowedByUser(Connection connection, Boolean flIsUpdatingSet) throws SQLException {
		try (PreparedStatement preparedStatement = connection.prepareStatement(SQL_SET_FL_IS_UPDATING_WHERE_FL_AUTHOR_IS_FOLLOWED_BY_USER)) {
			ConnectionManager.setBoolean(preparedStatement, 1, flIsUpdatingSet);

			return(preparedStatement.executeUpdate());
		}
	}

	public static int setFlIsUpdatingWhereFlAuthorIsFollowedByUser(Boolean flIsUpdatingSet) throws SQLException {
		int numRowsUpdated = -1;
		try (Connection connection = ConnectionManager.getConnection()) {
			numRowsUpdated = setFlIsUpdatingWhereFlAuthorIsFollowedByUser(connection, flIsUpdatingSet);
		}
		return(numRowsUpdated);
	}

	public static int setFlIsUpdatingWhereFlAuthorIsFollowedByUserSilent(Boolean flIsUpdatingSet) {
		int numRowsUpdated = -1;
		try (Connection connection = ConnectionManager.getConnection()) {
			numRowsUpdated = setFlIsUpdatingWhereFlAuthorIsFollowedByUser(connection, flIsUpdatingSet);
		} catch (SQLException sqlex) {
			sqlex.printStackTrace();
			return(-1);
		}
		return(numRowsUpdated);
	}

	/**
	 * This is the updater for 'setFlAuthorIsFollowedByUserWhereFlIsUpdating' and will throw a SQLException on error
	 * See the ''setFlAuthorIsFollowedByUserWhereFlIsUpdatingSilent' method for a non-throwing method.
	 * 
	 * @param connection the connection to the database
	 * 
	 * @return The number of rows that were updated
	 * @throws SQLException if there was an error in the statement or database connection
	 */ 
	public static int setFlAuthorIsFollowedByUserWhereFlIsUpdating(Connection connection, Boolean flAuthorIsFollowedByUserSet) throws SQLException {
		try (PreparedStatement preparedStatement = connection.prepareStatement(SQL_SET_FL_AUTHOR_IS_FOLLOWED_BY_USER_WHERE_FL_IS_UPDATING)) {
			ConnectionManager.setBoolean(preparedStatement, 1, flAuthorIsFollowedByUserSet);

			return(preparedStatement.executeUpdate());
		}
	}

	public static int setFlAuthorIsFollowedByUserWhereFlIsUpdating(Boolean flAuthorIsFollowedByUserSet) throws SQLException {
		int numRowsUpdated = -1;
		try (Connection connection = ConnectionManager.getConnection()) {
			numRowsUpdated = setFlAuthorIsFollowedByUserWhereFlIsUpdating(connection, flAuthorIsFollowedByUserSet);
		}
		return(numRowsUpdated);
	}

	public static int setFlAuthorIsFollowedByUserWhereFlIsUpdatingSilent(Boolean flAuthorIsFollowedByUserSet) {
		int numRowsUpdated = -1;
		try (Connection connection = ConnectionManager.getConnection()) {
			numRowsUpdated = setFlAuthorIsFollowedByUserWhereFlIsUpdating(connection, flAuthorIsFollowedByUserSet);
		} catch (SQLException sqlex) {
			sqlex.printStackTrace();
			return(-1);
		}
		return(numRowsUpdated);
	}

	/**
	 * This is the updater for 'setFlIsUpdatingWhereFlAuthorIsFollowingUser' and will throw a SQLException on error
	 * See the ''setFlIsUpdatingWhereFlAuthorIsFollowingUserSilent' method for a non-throwing method.
	 * 
	 * @param connection the connection to the database
	 * 
	 * @return The number of rows that were updated
	 * @throws SQLException if there was an error in the statement or database connection
	 */ 
	public static int setFlIsUpdatingWhereFlAuthorIsFollowingUser(Connection connection, Boolean flIsUpdatingSet) throws SQLException {
		try (PreparedStatement preparedStatement = connection.prepareStatement(SQL_SET_FL_IS_UPDATING_WHERE_FL_AUTHOR_IS_FOLLOWING_USER)) {
			ConnectionManager.setBoolean(preparedStatement, 1, flIsUpdatingSet);

			return(preparedStatement.executeUpdate());
		}
	}

	public static int setFlIsUpdatingWhereFlAuthorIsFollowingUser(Boolean flIsUpdatingSet) throws SQLException {
		int numRowsUpdated = -1;
		try (Connection connection = ConnectionManager.getConnection()) {
			numRowsUpdated = setFlIsUpdatingWhereFlAuthorIsFollowingUser(connection, flIsUpdatingSet);
		}
		return(numRowsUpdated);
	}

	public static int setFlIsUpdatingWhereFlAuthorIsFollowingUserSilent(Boolean flIsUpdatingSet) {
		int numRowsUpdated = -1;
		try (Connection connection = ConnectionManager.getConnection()) {
			numRowsUpdated = setFlIsUpdatingWhereFlAuthorIsFollowingUser(connection, flIsUpdatingSet);
		} catch (SQLException sqlex) {
			sqlex.printStackTrace();
			return(-1);
		}
		return(numRowsUpdated);
	}

	/**
	 * This is the updater for 'setFlAuthorIsFollowingUserWhereFlIsUpdating' and will throw a SQLException on error
	 * See the ''setFlAuthorIsFollowingUserWhereFlIsUpdatingSilent' method for a non-throwing method.
	 * 
	 * @param connection the connection to the database
	 * 
	 * @return The number of rows that were updated
	 * @throws SQLException if there was an error in the statement or database connection
	 */ 
	public static int setFlAuthorIsFollowingUserWhereFlIsUpdating(Connection connection, Boolean flAuthorIsFollowingUserSet) throws SQLException {
		try (PreparedStatement preparedStatement = connection.prepareStatement(SQL_SET_FL_AUTHOR_IS_FOLLOWING_USER_WHERE_FL_IS_UPDATING)) {
			ConnectionManager.setBoolean(preparedStatement, 1, flAuthorIsFollowingUserSet);

			return(preparedStatement.executeUpdate());
		}
	}

	public static int setFlAuthorIsFollowingUserWhereFlIsUpdating(Boolean flAuthorIsFollowingUserSet) throws SQLException {
		int numRowsUpdated = -1;
		try (Connection connection = ConnectionManager.getConnection()) {
			numRowsUpdated = setFlAuthorIsFollowingUserWhereFlIsUpdating(connection, flAuthorIsFollowingUserSet);
		}
		return(numRowsUpdated);
	}

	public static int setFlAuthorIsFollowingUserWhereFlIsUpdatingSilent(Boolean flAuthorIsFollowingUserSet) {
		int numRowsUpdated = -1;
		try (Connection connection = ConnectionManager.getConnection()) {
			numRowsUpdated = setFlAuthorIsFollowingUserWhereFlIsUpdating(connection, flAuthorIsFollowingUserSet);
		} catch (SQLException sqlex) {
			sqlex.printStackTrace();
			return(-1);
		}
		return(numRowsUpdated);
	}

	/**
	 * This is the updater for 'updateFlIsFollowing' and will throw a SQLException on error
	 * See the ''updateFlIsFollowingSilent' method for a non-throwing method.
	 * 
	 * @param connection the connection to the database
	 * 
	 * @return The number of rows that were updated
	 * @throws SQLException if there was an error in the statement or database connection
	 */ 
	public static int updateFlIsFollowing(Connection connection, Boolean flIsUpdatingSet) throws SQLException {
		try (PreparedStatement preparedStatement = connection.prepareStatement(SQL_UPDATE_FL_IS_FOLLOWING)) {
			ConnectionManager.setBoolean(preparedStatement, 1, flIsUpdatingSet);

			return(preparedStatement.executeUpdate());
		}
	}

	public static int updateFlIsFollowing(Boolean flIsUpdatingSet) throws SQLException {
		int numRowsUpdated = -1;
		try (Connection connection = ConnectionManager.getConnection()) {
			numRowsUpdated = updateFlIsFollowing(connection, flIsUpdatingSet);
		}
		return(numRowsUpdated);
	}

	public static int updateFlIsFollowingSilent(Boolean flIsUpdatingSet) {
		int numRowsUpdated = -1;
		try (Connection connection = ConnectionManager.getConnection()) {
			numRowsUpdated = updateFlIsFollowing(connection, flIsUpdatingSet);
		} catch (SQLException sqlex) {
			sqlex.printStackTrace();
			return(-1);
		}
		return(numRowsUpdated);
	}

	/**
	 * This is the updater for 'updateAllToBeEvaluatedToFollowed' and will throw a SQLException on error
	 * See the ''updateAllToBeEvaluatedToFollowedSilent' method for a non-throwing method.
	 * 
	 * @param connection the connection to the database
	 * 
	 * @return The number of rows that were updated
	 * @throws SQLException if there was an error in the statement or database connection
	 */ 
	public static int updateAllToBeEvaluatedToFollowed(Connection connection, Timestamp dtmStartedFollowing) throws SQLException {
		try (PreparedStatement preparedStatement = connection.prepareStatement(SQL_UPDATE_ALL_TO_BE_EVALUATED_TO_FOLLOWED)) {
			ConnectionManager.setDatetime(preparedStatement, 1, dtmStartedFollowing);

			return(preparedStatement.executeUpdate());
		}
	}

	public static int updateAllToBeEvaluatedToFollowed(Timestamp dtmStartedFollowing) throws SQLException {
		int numRowsUpdated = -1;
		try (Connection connection = ConnectionManager.getConnection()) {
			numRowsUpdated = updateAllToBeEvaluatedToFollowed(connection, dtmStartedFollowing);
		}
		return(numRowsUpdated);
	}

	public static int updateAllToBeEvaluatedToFollowedSilent(Timestamp dtmStartedFollowing) {
		int numRowsUpdated = -1;
		try (Connection connection = ConnectionManager.getConnection()) {
			numRowsUpdated = updateAllToBeEvaluatedToFollowed(connection, dtmStartedFollowing);
		} catch (SQLException sqlex) {
			sqlex.printStackTrace();
			return(-1);
		}
		return(numRowsUpdated);
	}

}