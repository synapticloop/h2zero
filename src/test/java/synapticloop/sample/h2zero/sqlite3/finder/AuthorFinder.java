package synapticloop.sample.h2zero.sqlite3.finder;

// - - - - thoughtfully generated by synapticloop h2zero - - - - 
//    with the use of synapticloop templar templating language
//                (java-create-finder.templar)

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.math.BigDecimal;
import java.util.List;
import java.util.ArrayList;

import synapticloop.h2zero.base.exception.H2ZeroFinderException;
import synapticloop.h2zero.base.manager.sqlite3.ConnectionManager;
import synapticloop.h2zero.util.LruCache;


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


import synapticloop.sample.h2zero.sqlite3.model.util.Constants;

import synapticloop.sample.h2zero.sqlite3.model.Author;

public class AuthorFinder {
	// the binder is unused in code, but will generate compile problems if this 
	// class is no longer referenced in the h2zero file. Just a nicety for
	// removing dead code
	@SuppressWarnings("unused")
	private static final String BINDER = Constants.AUTHOR_BINDER;

	private static final Logger LOGGER = LoggerFactory.getLogger(AuthorFinder.class);
	private static final String SQL_SELECT_START = "select id_author, id_author_status, txt_id_author, nm_author, nm_username, txt_bio, txt_url_cache_image, num_following, num_followers, dtm_started_following, fl_is_updating, fl_author_is_following_user, fl_author_is_followed_by_user from author";
	private static final String SQL_BUILTIN_FIND_BY_PRIMARY_KEY = SQL_SELECT_START + " where id_author = ?";

	private static final String SQL_FIND_BY_ID_AUTHOR_STATUS = SQL_SELECT_START + " where id_author_status = ?";
	private static final String SQL_FIND_BY_FL_IS_UPDATING = SQL_SELECT_START + " where fl_is_updating = ?";
	private static final String SQL_FIND_BY_TXT_ID_AUTHOR = SQL_SELECT_START + " where txt_id_author = ?";
	private static final String SQL_FIND_ALL_TO_BE_EVALUATED = SQL_SELECT_START + " where id_author_status = (select id_author_status from author_status where txt_author_status = 'TO_BE_EVALUATED') and dtm_started_following <= ? ";
	private static final String SQL_FIND_FIRST_TO_BE_EVALUATED = SQL_SELECT_START + " where id_author_status = (select id_author_status from author_status where txt_author_status = 'TO_BE_EVALUATED') and dtm_started_following < ? order by dtm_started_following asc limit 1";
	private static final String SQL_FIND_LIMITED_TO_BE_EVALUATED = SQL_SELECT_START + " where id_author_status = (select id_author_status from author_status where txt_author_status = 'TO_BE_EVALUATED') and dtm_started_following < ? order by dtm_started_following";

	// now for the statement limit cache(s)
	private static LruCache<String, String> findAll_limit_statement_cache = new LruCache<String, String>(1024);
	private static LruCache<String, String> findByIdAuthorStatus_limit_statement_cache = new LruCache<String, String>(1024);
	private static LruCache<String, String> findByFlIsUpdating_limit_statement_cache = new LruCache<String, String>(1024);
	private static LruCache<String, String> findByTxtIdAuthor_limit_statement_cache = new LruCache<String, String>(1024);
	private static LruCache<String, String> findAllToBeEvaluated_limit_statement_cache = new LruCache<String, String>(1024);
	private static LruCache<String, String> findFirstToBeEvaluated_limit_statement_cache = new LruCache<String, String>(1024);
	private static LruCache<String, String> findLimitedToBeEvaluated_limit_statement_cache = new LruCache<String, String>(1024);

	private AuthorFinder() {}

	/**
	 * Find a Author by its primary key
	 * 
	 * @param connection the connection item
	 * @param idAuthor the primary key
	 * 
	 * @return the unique result or throw an exception if one couldn't be found
	 * 
	 * @throws H2ZeroFinderException if one couldn't be found
	 */
	public static Author findByPrimaryKey(Connection connection, Long idAuthor) throws H2ZeroFinderException {
		Author author = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;

		if(null == idAuthor) {
			throw new H2ZeroFinderException("Could not find result as the primary key field [idAuthor] was null.");
		}

		try {
			preparedStatement = connection.prepareStatement(SQL_BUILTIN_FIND_BY_PRIMARY_KEY);
			preparedStatement.setLong(1, idAuthor);
			resultSet = preparedStatement.executeQuery();
			author = uniqueResult(resultSet);
		} catch (SQLException sqlex) {
			throw new H2ZeroFinderException(sqlex);
		} catch (H2ZeroFinderException h2zfex) {
			throw new H2ZeroFinderException(h2zfex.getMessage() + "  Additionally, the parameters were [idAuthor:" + idAuthor + "].");
		} finally {
			ConnectionManager.closeAll(resultSet, preparedStatement);
		}

		if(null == author) {
			throw new H2ZeroFinderException("Could not find result the parameters were [idAuthor:" + idAuthor + "].");
		}
		return(author);
	}

	/**
	 * Find a Author by its primary key
	 * 
	 * @param idAuthor the primary key
	 * 
	 * @return the unique result or throw an exception if one coudn't be found.
	 * 
	 * @throws H2ZeroFinderException if one couldn't be found
	 */
	public static Author findByPrimaryKey(Long idAuthor) throws H2ZeroFinderException {
		Author author = null;
		Connection connection = null;

		if(null == idAuthor) {
			throw new H2ZeroFinderException("Could not find result as the primary key field [idAuthor] was null.");
		}

		try {
			connection = ConnectionManager.getConnection();
			author = findByPrimaryKey(connection, idAuthor);
		} catch (SQLException sqlex) {
			throw new H2ZeroFinderException(sqlex);
		} catch (H2ZeroFinderException h2zfex) {
			throw new H2ZeroFinderException(h2zfex.getMessage() + "  Additionally, the parameters were [idAuthor:" + idAuthor + "].");
		} finally {
			ConnectionManager.closeAll(connection);
		}

		if(null == author) {
			throw new H2ZeroFinderException("Could not find result the parameters were [idAuthor:" + idAuthor + "].");
		}
		return(author);
	}

	/**
	 * Find a Author by its primary key and silently fail.
	 * I.e. Do not throw an exception on error.
	 * 
	 * @param connection the connection item
	 * @param idAuthor the primary key
	 * 
	 * @return the unique result or null if it couldn't be found
	 * 
	 */
	public static Author findByPrimaryKeySilent(Connection connection, Long idAuthor) {
		try {
			return(findByPrimaryKey(connection, idAuthor));
		} catch(H2ZeroFinderException h2zfex){
			if(LOGGER.isWarnEnabled()) {
				LOGGER.warn("H2ZeroFinderException findByPrimaryKeySilent(" + idAuthor + "): " + h2zfex.getMessage());
				if(LOGGER.isDebugEnabled()) {
					h2zfex.printStackTrace();
				}
			}
			return(null);
		}
	}

	/**
	 * Find a Author by its primary key and silently fail.
	 * I.e. Do not throw an exception on error.
	 * 
	 * @param idAuthor the primary key
	 * 
	 * @return the unique result or null if it couldn't be found
	 * 
	 */
	public static Author findByPrimaryKeySilent(Long idAuthor) {
		try {
			return(findByPrimaryKey(idAuthor));
		} catch(H2ZeroFinderException h2zfex){
			if(LOGGER.isWarnEnabled()) {
				LOGGER.warn("H2ZeroFinderException findByPrimaryKeySilent(" + idAuthor + "): " + h2zfex.getMessage());
				if(LOGGER.isDebugEnabled()) {
					h2zfex.printStackTrace();
				}
			}
			return(null);
		}
	}

	/**
	 * Find all UserTitle objects with the passed in connection, with limited
	 * results starting at a particular offset.
	 * 
	 * If the limit parameter is null, there will be no limit applied.
	 * 
	 * If the offset is null, then this will be set to 0
	 * 
	 * If both limit and offset are null, then no limit and no offset will be applied
	 * to the statement.
	 * 
	 * The passed in connection object is usable for transactional SQL statements,
	 * where the connection has already had a transaction started on it.
	 * 
	 * If the connection object is null an new connection object will be created 
	 * and closed at the end of the method.
	 * 
	 * If the connection object is not null, then it will not be closed.
	 * 
	 * @param connection - the connection object to use (or null if not part of a transaction)
	 * @param limit - the limit for the result set
	 * @param offset - the offset for the start of the results.
	 * 
	 * @return a list of all of the UserTitle objects
	 * 
	 * @throws SQLException if there was an error in the SQL statement
	 */
	public static List<Author> findAll(Connection connection, Integer limit, Integer offset) throws SQLException {
		boolean hasConnection = (null != connection);
		String statement = null;
		// first find the statement that we want

		String cacheKey = limit + ":" + offset;
		if(!findAll_limit_statement_cache.containsKey(cacheKey)) {
			// place the cacheKey in the cache for later use

			StringBuilder stringBuilder = new StringBuilder(SQL_SELECT_START);

			if(null != limit) {
				stringBuilder.append(" limit ");
				stringBuilder.append(limit);
				if(null != offset) {
					stringBuilder.append(" offset ");
					stringBuilder.append(offset);
				}
			}


			statement = stringBuilder.toString();
			findAll_limit_statement_cache.put(cacheKey, statement);
		} else {
			statement = findAll_limit_statement_cache.get(cacheKey);
		}

		// now set up the statement
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		if(connection == null) {
			connection = ConnectionManager.getConnection();
		}

		List<Author> results = new ArrayList<Author>();

		try {
			preparedStatement = connection.prepareStatement(statement);
			resultSet = preparedStatement.executeQuery();
			results = list(resultSet);
		} catch(SQLException sqlex) {
			if(LOGGER.isWarnEnabled()) {
				LOGGER.warn("SQLException findAll(): " + sqlex.getMessage());
				if(LOGGER.isDebugEnabled()) {
					sqlex.printStackTrace();
				}
			}
			throw sqlex;
		} finally {
			if(hasConnection) {
				ConnectionManager.closeAll(resultSet, preparedStatement, null);
			} else {
				ConnectionManager.closeAll(resultSet, preparedStatement, connection);
			}
		}

		return(results);
	}

	public static List<Author> findAll() throws SQLException {
		return(findAll(null, null, null));
	}

	public static List<Author> findAll(Connection connection) throws SQLException {
		return(findAll(connection, null, null));
	}

	public static List<Author> findAll(Integer limit, Integer offset) throws SQLException {
		return(findAll(null, limit, offset));
	}

	public static List<Author> findAllSilent(Connection connection, Integer limit, Integer offset) {
		try {
			return(findAll(connection, limit, offset));
		} catch(SQLException sqlex){
			if(LOGGER.isWarnEnabled()) {
				LOGGER.warn("SQLException findAllSilent(connection: " + connection + ", limit: " +  limit + ", offset: " + offset + "): " + sqlex.getMessage());
				if(LOGGER.isDebugEnabled()) {
					sqlex.printStackTrace();
				}
			}
			return(new ArrayList<Author>());
		}
	}

	public static List<Author> findAllSilent(Connection connection) {
		return(findAllSilent(connection, null, null));
	}

	public static List<Author> findAllSilent(Integer limit, Integer offset) {
		return(findAllSilent(null, limit, offset));
	}

	public static List<Author> findAllSilent() {
		return(findAllSilent(null, null, null));
	}

	/**
	 * findByIdAuthorStatus
	 * @param idAuthorStatus
	 * 
	 * @return the list of Author results found
	 * 
	 * @throws H2ZeroFinderException if no results could be found
	 * @throws SQLException if there was an error in the SQL statement
	 */
	public static List<Author> findByIdAuthorStatus(Connection connection, Long idAuthorStatus, Integer limit, Integer offset) throws H2ZeroFinderException, SQLException {
		boolean hasConnection = (null != connection);
		String statement = null;

		// first find the statement that we want

		String cacheKey = limit + ":" + offset;
		if(!findByIdAuthorStatus_limit_statement_cache.containsKey(cacheKey)) {
			// place the cacheKey in the cache for later use

			StringBuilder stringBuilder = new StringBuilder(SQL_FIND_BY_ID_AUTHOR_STATUS);

			if(null != limit) {
				stringBuilder.append(" limit ");
				stringBuilder.append(limit);
				if(null != offset) {
					stringBuilder.append(" offset ");
					stringBuilder.append(offset);
				}
			}

			statement = stringBuilder.toString();
			findByIdAuthorStatus_limit_statement_cache.put(cacheKey, statement);
		} else {
			statement = findByIdAuthorStatus_limit_statement_cache.get(cacheKey);
		}

		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		List<Author> results = null;
		try {
			if(!hasConnection) {
				connection = ConnectionManager.getConnection();
			}
			preparedStatement = connection.prepareStatement(statement);
			ConnectionManager.setBigint(preparedStatement, 1, idAuthorStatus);

			resultSet = preparedStatement.executeQuery();
			results = list(resultSet);
		} catch (SQLException sqlex) {
			throw sqlex;
		} finally {
			if(hasConnection) {
				ConnectionManager.closeAll(resultSet, preparedStatement, null);
			} else {
				ConnectionManager.closeAll(resultSet, preparedStatement, connection);
			}
		}


		if(null == results || results.size() == 0) {
			throw new H2ZeroFinderException("Could not find result.");
		}
		return(results);
	}

	public static List<Author> findByIdAuthorStatus(Connection connection, Long idAuthorStatus) throws H2ZeroFinderException, SQLException {
		return(findByIdAuthorStatus(connection, idAuthorStatus, null, null));
	}

	public static List<Author> findByIdAuthorStatus(Long idAuthorStatus, Integer limit, Integer offset) throws H2ZeroFinderException, SQLException {
		return(findByIdAuthorStatus(null, idAuthorStatus, limit, offset));
	}

	public static List<Author> findByIdAuthorStatus(Long idAuthorStatus) throws H2ZeroFinderException, SQLException {
		return(findByIdAuthorStatus(null, idAuthorStatus, null, null));
	}

// silent connection, params..., limit, offset
	public static List<Author> findByIdAuthorStatusSilent(Connection connection, Long idAuthorStatus, Integer limit, Integer offset) {
		try {
			return(findByIdAuthorStatus(connection, idAuthorStatus, limit, offset));
		} catch(H2ZeroFinderException h2zfex) {
			if(LOGGER.isWarnEnabled()) {
				LOGGER.warn("H2ZeroFinderException findByIdAuthorStatusSilent(connection: " + connection + ", " + idAuthorStatus + ", limit: " + limit + ", offset: " + offset + "): " + h2zfex.getMessage());
				if(LOGGER.isDebugEnabled()) {
					h2zfex.printStackTrace();
				}
			}
			return(new ArrayList<Author>());
		} catch(SQLException sqlex) {
			if(LOGGER.isWarnEnabled()) {
				LOGGER.warn("SQLException findByIdAuthorStatusSilent(connection: " + connection + ", " + idAuthorStatus + ", limit: " + limit + ", offset: " + offset + "): " + sqlex.getMessage());
				if(LOGGER.isDebugEnabled()) {
					sqlex.printStackTrace();
				}
			}
			return(new ArrayList<Author>());
		}
	}

// silent connection, params...
	public static List<Author> findByIdAuthorStatusSilent(Connection connection, Long idAuthorStatus) {
		return(findByIdAuthorStatusSilent(connection, idAuthorStatus, null, null));
	}

// silent params..., limit, offset
	public static List<Author> findByIdAuthorStatusSilent(Long idAuthorStatus, Integer limit, Integer offset) {
		return(findByIdAuthorStatusSilent(null , idAuthorStatus, limit, offset));
	}

	public static List<Author> findByIdAuthorStatusSilent(Long idAuthorStatus) {
		return(findByIdAuthorStatusSilent(null, idAuthorStatus, null, null));
	}

	/**
	 * findByFlIsUpdating
	 * @param flIsUpdating
	 * 
	 * @return the list of Author results found
	 * 
	 * @throws H2ZeroFinderException if no results could be found
	 * @throws SQLException if there was an error in the SQL statement
	 */
	public static List<Author> findByFlIsUpdating(Connection connection, Boolean flIsUpdating, Integer limit, Integer offset) throws H2ZeroFinderException, SQLException {
		boolean hasConnection = (null != connection);
		String statement = null;

		// first find the statement that we want

		String cacheKey = limit + ":" + offset;
		if(!findByFlIsUpdating_limit_statement_cache.containsKey(cacheKey)) {
			// place the cacheKey in the cache for later use

			StringBuilder stringBuilder = new StringBuilder(SQL_FIND_BY_FL_IS_UPDATING);

			if(null != limit) {
				stringBuilder.append(" limit ");
				stringBuilder.append(limit);
				if(null != offset) {
					stringBuilder.append(" offset ");
					stringBuilder.append(offset);
				}
			}

			statement = stringBuilder.toString();
			findByFlIsUpdating_limit_statement_cache.put(cacheKey, statement);
		} else {
			statement = findByFlIsUpdating_limit_statement_cache.get(cacheKey);
		}

		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		List<Author> results = null;
		try {
			if(!hasConnection) {
				connection = ConnectionManager.getConnection();
			}
			preparedStatement = connection.prepareStatement(statement);
			ConnectionManager.setBoolean(preparedStatement, 1, flIsUpdating);

			resultSet = preparedStatement.executeQuery();
			results = list(resultSet);
		} catch (SQLException sqlex) {
			throw sqlex;
		} finally {
			if(hasConnection) {
				ConnectionManager.closeAll(resultSet, preparedStatement, null);
			} else {
				ConnectionManager.closeAll(resultSet, preparedStatement, connection);
			}
		}


		if(null == results || results.size() == 0) {
			throw new H2ZeroFinderException("Could not find result.");
		}
		return(results);
	}

	public static List<Author> findByFlIsUpdating(Connection connection, Boolean flIsUpdating) throws H2ZeroFinderException, SQLException {
		return(findByFlIsUpdating(connection, flIsUpdating, null, null));
	}

	public static List<Author> findByFlIsUpdating(Boolean flIsUpdating, Integer limit, Integer offset) throws H2ZeroFinderException, SQLException {
		return(findByFlIsUpdating(null, flIsUpdating, limit, offset));
	}

	public static List<Author> findByFlIsUpdating(Boolean flIsUpdating) throws H2ZeroFinderException, SQLException {
		return(findByFlIsUpdating(null, flIsUpdating, null, null));
	}

// silent connection, params..., limit, offset
	public static List<Author> findByFlIsUpdatingSilent(Connection connection, Boolean flIsUpdating, Integer limit, Integer offset) {
		try {
			return(findByFlIsUpdating(connection, flIsUpdating, limit, offset));
		} catch(H2ZeroFinderException h2zfex) {
			if(LOGGER.isWarnEnabled()) {
				LOGGER.warn("H2ZeroFinderException findByFlIsUpdatingSilent(connection: " + connection + ", " + flIsUpdating + ", limit: " + limit + ", offset: " + offset + "): " + h2zfex.getMessage());
				if(LOGGER.isDebugEnabled()) {
					h2zfex.printStackTrace();
				}
			}
			return(new ArrayList<Author>());
		} catch(SQLException sqlex) {
			if(LOGGER.isWarnEnabled()) {
				LOGGER.warn("SQLException findByFlIsUpdatingSilent(connection: " + connection + ", " + flIsUpdating + ", limit: " + limit + ", offset: " + offset + "): " + sqlex.getMessage());
				if(LOGGER.isDebugEnabled()) {
					sqlex.printStackTrace();
				}
			}
			return(new ArrayList<Author>());
		}
	}

// silent connection, params...
	public static List<Author> findByFlIsUpdatingSilent(Connection connection, Boolean flIsUpdating) {
		return(findByFlIsUpdatingSilent(connection, flIsUpdating, null, null));
	}

// silent params..., limit, offset
	public static List<Author> findByFlIsUpdatingSilent(Boolean flIsUpdating, Integer limit, Integer offset) {
		return(findByFlIsUpdatingSilent(null , flIsUpdating, limit, offset));
	}

	public static List<Author> findByFlIsUpdatingSilent(Boolean flIsUpdating) {
		return(findByFlIsUpdatingSilent(null, flIsUpdating, null, null));
	}

	/**
	 * findByTxtIdAuthor
	 * @param txtIdAuthor
	 * 
	 * @return the unique result of Author found
	 * 
	 * @throws H2ZeroFinderException if no results could be found
	 * @throws SQLException if there was an error in the SQL statement
	 */
	public static Author findByTxtIdAuthor(Connection connection, String txtIdAuthor, Integer limit, Integer offset) throws H2ZeroFinderException, SQLException {
		boolean hasConnection = (null != connection);
		String statement = null;

		// first find the statement that we want

		String cacheKey = limit + ":" + offset;
		if(!findByTxtIdAuthor_limit_statement_cache.containsKey(cacheKey)) {
			// place the cacheKey in the cache for later use

			StringBuilder stringBuilder = new StringBuilder(SQL_FIND_BY_TXT_ID_AUTHOR);

			if(null != limit) {
				stringBuilder.append(" limit ");
				stringBuilder.append(limit);
				if(null != offset) {
					stringBuilder.append(" offset ");
					stringBuilder.append(offset);
				}
			}

			statement = stringBuilder.toString();
			findByTxtIdAuthor_limit_statement_cache.put(cacheKey, statement);
		} else {
			statement = findByTxtIdAuthor_limit_statement_cache.get(cacheKey);
		}

		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		Author result = null;
		try {
			if(!hasConnection) {
				connection = ConnectionManager.getConnection();
			}
			preparedStatement = connection.prepareStatement(statement);
			ConnectionManager.setVarchar(preparedStatement, 1, txtIdAuthor);

			resultSet = preparedStatement.executeQuery();
			result = uniqueResult(resultSet);
			ConnectionManager.closeAll(resultSet, preparedStatement);
		} catch (SQLException sqlex) {
			throw sqlex;
		} catch (H2ZeroFinderException h2zfex) {
			throw new H2ZeroFinderException(h2zfex.getMessage() + "  Additionally, the parameters were "  + "[txtIdAuthor:" + txtIdAuthor + "].");
		} finally {
			if(hasConnection) {
				ConnectionManager.closeAll(resultSet, preparedStatement, null);
			} else {
				ConnectionManager.closeAll(resultSet, preparedStatement, connection);
			}
		}


		if(null == result) {
			throw new H2ZeroFinderException("Could not find result.");
		}
		return(result);
	}

	public static Author findByTxtIdAuthor(Connection connection, String txtIdAuthor) throws H2ZeroFinderException, SQLException {
		return(findByTxtIdAuthor(connection, txtIdAuthor, null, null));
	}

	public static Author findByTxtIdAuthor(String txtIdAuthor, Integer limit, Integer offset) throws H2ZeroFinderException, SQLException {
		return(findByTxtIdAuthor(null, txtIdAuthor, limit, offset));
	}

	public static Author findByTxtIdAuthor(String txtIdAuthor) throws H2ZeroFinderException, SQLException {
		return(findByTxtIdAuthor(null, txtIdAuthor, null, null));
	}

// silent connection, params..., limit, offset
	public static Author findByTxtIdAuthorSilent(Connection connection, String txtIdAuthor, Integer limit, Integer offset) {
		try {
			return(findByTxtIdAuthor(connection, txtIdAuthor, limit, offset));
		} catch(H2ZeroFinderException h2zfex) {
			if(LOGGER.isWarnEnabled()) {
				LOGGER.warn("H2ZeroFinderException findByTxtIdAuthorSilent(connection: " + connection + ", " + txtIdAuthor + ", limit: " + limit + ", offset: " + offset + "): " + h2zfex.getMessage());
				if(LOGGER.isDebugEnabled()) {
					h2zfex.printStackTrace();
				}
			}
			return(null);
		} catch(SQLException sqlex) {
			if(LOGGER.isWarnEnabled()) {
				LOGGER.warn("SQLException findByTxtIdAuthorSilent(connection: " + connection + ", " + txtIdAuthor + ", limit: " + limit + ", offset: " + offset + "): " + sqlex.getMessage());
				if(LOGGER.isDebugEnabled()) {
					sqlex.printStackTrace();
				}
			}
			return(null);
		}
	}

// silent connection, params...
	public static Author findByTxtIdAuthorSilent(Connection connection, String txtIdAuthor) {
		return(findByTxtIdAuthorSilent(connection, txtIdAuthor, null, null));
	}

// silent params..., limit, offset
	public static Author findByTxtIdAuthorSilent(String txtIdAuthor, Integer limit, Integer offset) {
		return(findByTxtIdAuthorSilent(null , txtIdAuthor, limit, offset));
	}

	public static Author findByTxtIdAuthorSilent(String txtIdAuthor) {
		return(findByTxtIdAuthorSilent(null, txtIdAuthor, null, null));
	}

	/**
	 * findAllToBeEvaluated
	 * @param dtmStartedFollowing
	 * 
	 * @return the list of Author results found
	 * 
	 * @throws H2ZeroFinderException if no results could be found
	 * @throws SQLException if there was an error in the SQL statement
	 */
	public static List<Author> findAllToBeEvaluated(Connection connection, Timestamp dtmStartedFollowing, Integer limit, Integer offset) throws H2ZeroFinderException, SQLException {
		boolean hasConnection = (null != connection);
		String statement = null;

		// first find the statement that we want

		String cacheKey = limit + ":" + offset;
		if(!findAllToBeEvaluated_limit_statement_cache.containsKey(cacheKey)) {
			// place the cacheKey in the cache for later use

			StringBuilder stringBuilder = new StringBuilder(SQL_FIND_ALL_TO_BE_EVALUATED);

			if(null != limit) {
				stringBuilder.append(" limit ");
				stringBuilder.append(limit);
				if(null != offset) {
					stringBuilder.append(" offset ");
					stringBuilder.append(offset);
				}
			}

			statement = stringBuilder.toString();
			findAllToBeEvaluated_limit_statement_cache.put(cacheKey, statement);
		} else {
			statement = findAllToBeEvaluated_limit_statement_cache.get(cacheKey);
		}

		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		List<Author> results = null;
		try {
			if(!hasConnection) {
				connection = ConnectionManager.getConnection();
			}
			preparedStatement = connection.prepareStatement(statement);
			ConnectionManager.setDatetime(preparedStatement, 1, dtmStartedFollowing);

			resultSet = preparedStatement.executeQuery();
			results = list(resultSet);
		} catch (SQLException sqlex) {
			throw sqlex;
		} finally {
			if(hasConnection) {
				ConnectionManager.closeAll(resultSet, preparedStatement, null);
			} else {
				ConnectionManager.closeAll(resultSet, preparedStatement, connection);
			}
		}


		if(null == results || results.size() == 0) {
			throw new H2ZeroFinderException("Could not find result.");
		}
		return(results);
	}

	public static List<Author> findAllToBeEvaluated(Connection connection, Timestamp dtmStartedFollowing) throws H2ZeroFinderException, SQLException {
		return(findAllToBeEvaluated(connection, dtmStartedFollowing, null, null));
	}

	public static List<Author> findAllToBeEvaluated(Timestamp dtmStartedFollowing, Integer limit, Integer offset) throws H2ZeroFinderException, SQLException {
		return(findAllToBeEvaluated(null, dtmStartedFollowing, limit, offset));
	}

	public static List<Author> findAllToBeEvaluated(Timestamp dtmStartedFollowing) throws H2ZeroFinderException, SQLException {
		return(findAllToBeEvaluated(null, dtmStartedFollowing, null, null));
	}

// silent connection, params..., limit, offset
	public static List<Author> findAllToBeEvaluatedSilent(Connection connection, Timestamp dtmStartedFollowing, Integer limit, Integer offset) {
		try {
			return(findAllToBeEvaluated(connection, dtmStartedFollowing, limit, offset));
		} catch(H2ZeroFinderException h2zfex) {
			if(LOGGER.isWarnEnabled()) {
				LOGGER.warn("H2ZeroFinderException findAllToBeEvaluatedSilent(connection: " + connection + ", " + dtmStartedFollowing + ", limit: " + limit + ", offset: " + offset + "): " + h2zfex.getMessage());
				if(LOGGER.isDebugEnabled()) {
					h2zfex.printStackTrace();
				}
			}
			return(new ArrayList<Author>());
		} catch(SQLException sqlex) {
			if(LOGGER.isWarnEnabled()) {
				LOGGER.warn("SQLException findAllToBeEvaluatedSilent(connection: " + connection + ", " + dtmStartedFollowing + ", limit: " + limit + ", offset: " + offset + "): " + sqlex.getMessage());
				if(LOGGER.isDebugEnabled()) {
					sqlex.printStackTrace();
				}
			}
			return(new ArrayList<Author>());
		}
	}

// silent connection, params...
	public static List<Author> findAllToBeEvaluatedSilent(Connection connection, Timestamp dtmStartedFollowing) {
		return(findAllToBeEvaluatedSilent(connection, dtmStartedFollowing, null, null));
	}

// silent params..., limit, offset
	public static List<Author> findAllToBeEvaluatedSilent(Timestamp dtmStartedFollowing, Integer limit, Integer offset) {
		return(findAllToBeEvaluatedSilent(null , dtmStartedFollowing, limit, offset));
	}

	public static List<Author> findAllToBeEvaluatedSilent(Timestamp dtmStartedFollowing) {
		return(findAllToBeEvaluatedSilent(null, dtmStartedFollowing, null, null));
	}

	/**
	 * findFirstToBeEvaluated
	 * @param dtmStartedFollowing
	 * 
	 * @return the unique result of Author found
	 * 
	 * @throws H2ZeroFinderException if no results could be found
	 * @throws SQLException if there was an error in the SQL statement
	 */
	public static Author findFirstToBeEvaluated(Connection connection, Timestamp dtmStartedFollowing, Integer limit, Integer offset) throws H2ZeroFinderException, SQLException {
		boolean hasConnection = (null != connection);
		String statement = null;

		// first find the statement that we want

		String cacheKey = limit + ":" + offset;
		if(!findFirstToBeEvaluated_limit_statement_cache.containsKey(cacheKey)) {
			// place the cacheKey in the cache for later use

			StringBuilder stringBuilder = new StringBuilder(SQL_FIND_FIRST_TO_BE_EVALUATED);

			if(null != limit) {
				stringBuilder.append(" limit ");
				stringBuilder.append(limit);
				if(null != offset) {
					stringBuilder.append(" offset ");
					stringBuilder.append(offset);
				}
			}

			statement = stringBuilder.toString();
			findFirstToBeEvaluated_limit_statement_cache.put(cacheKey, statement);
		} else {
			statement = findFirstToBeEvaluated_limit_statement_cache.get(cacheKey);
		}

		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		Author result = null;
		try {
			if(!hasConnection) {
				connection = ConnectionManager.getConnection();
			}
			preparedStatement = connection.prepareStatement(statement);
			ConnectionManager.setDatetime(preparedStatement, 1, dtmStartedFollowing);

			resultSet = preparedStatement.executeQuery();
			result = uniqueResult(resultSet);
			ConnectionManager.closeAll(resultSet, preparedStatement);
		} catch (SQLException sqlex) {
			throw sqlex;
		} catch (H2ZeroFinderException h2zfex) {
			throw new H2ZeroFinderException(h2zfex.getMessage() + "  Additionally, the parameters were "  + "[dtmStartedFollowing:" + dtmStartedFollowing + "].");
		} finally {
			if(hasConnection) {
				ConnectionManager.closeAll(resultSet, preparedStatement, null);
			} else {
				ConnectionManager.closeAll(resultSet, preparedStatement, connection);
			}
		}


		if(null == result) {
			throw new H2ZeroFinderException("Could not find result.");
		}
		return(result);
	}

	public static Author findFirstToBeEvaluated(Connection connection, Timestamp dtmStartedFollowing) throws H2ZeroFinderException, SQLException {
		return(findFirstToBeEvaluated(connection, dtmStartedFollowing, null, null));
	}

	public static Author findFirstToBeEvaluated(Timestamp dtmStartedFollowing, Integer limit, Integer offset) throws H2ZeroFinderException, SQLException {
		return(findFirstToBeEvaluated(null, dtmStartedFollowing, limit, offset));
	}

	public static Author findFirstToBeEvaluated(Timestamp dtmStartedFollowing) throws H2ZeroFinderException, SQLException {
		return(findFirstToBeEvaluated(null, dtmStartedFollowing, null, null));
	}

// silent connection, params..., limit, offset
	public static Author findFirstToBeEvaluatedSilent(Connection connection, Timestamp dtmStartedFollowing, Integer limit, Integer offset) {
		try {
			return(findFirstToBeEvaluated(connection, dtmStartedFollowing, limit, offset));
		} catch(H2ZeroFinderException h2zfex) {
			if(LOGGER.isWarnEnabled()) {
				LOGGER.warn("H2ZeroFinderException findFirstToBeEvaluatedSilent(connection: " + connection + ", " + dtmStartedFollowing + ", limit: " + limit + ", offset: " + offset + "): " + h2zfex.getMessage());
				if(LOGGER.isDebugEnabled()) {
					h2zfex.printStackTrace();
				}
			}
			return(null);
		} catch(SQLException sqlex) {
			if(LOGGER.isWarnEnabled()) {
				LOGGER.warn("SQLException findFirstToBeEvaluatedSilent(connection: " + connection + ", " + dtmStartedFollowing + ", limit: " + limit + ", offset: " + offset + "): " + sqlex.getMessage());
				if(LOGGER.isDebugEnabled()) {
					sqlex.printStackTrace();
				}
			}
			return(null);
		}
	}

// silent connection, params...
	public static Author findFirstToBeEvaluatedSilent(Connection connection, Timestamp dtmStartedFollowing) {
		return(findFirstToBeEvaluatedSilent(connection, dtmStartedFollowing, null, null));
	}

// silent params..., limit, offset
	public static Author findFirstToBeEvaluatedSilent(Timestamp dtmStartedFollowing, Integer limit, Integer offset) {
		return(findFirstToBeEvaluatedSilent(null , dtmStartedFollowing, limit, offset));
	}

	public static Author findFirstToBeEvaluatedSilent(Timestamp dtmStartedFollowing) {
		return(findFirstToBeEvaluatedSilent(null, dtmStartedFollowing, null, null));
	}

	/**
	 * findLimitedToBeEvaluated
	 * @param dtmStartedFollowing
	 * 
	 * @return the list of Author results found
	 * 
	 * @throws H2ZeroFinderException if no results could be found
	 * @throws SQLException if there was an error in the SQL statement
	 */
	public static List<Author> findLimitedToBeEvaluated(Connection connection, Timestamp dtmStartedFollowing, Integer limit, Integer offset) throws H2ZeroFinderException, SQLException {
		boolean hasConnection = (null != connection);
		String statement = null;

		// first find the statement that we want

		String cacheKey = limit + ":" + offset;
		if(!findLimitedToBeEvaluated_limit_statement_cache.containsKey(cacheKey)) {
			// place the cacheKey in the cache for later use

			StringBuilder stringBuilder = new StringBuilder(SQL_FIND_LIMITED_TO_BE_EVALUATED);

			if(null != limit) {
				stringBuilder.append(" limit ");
				stringBuilder.append(limit);
				if(null != offset) {
					stringBuilder.append(" offset ");
					stringBuilder.append(offset);
				}
			}

			statement = stringBuilder.toString();
			findLimitedToBeEvaluated_limit_statement_cache.put(cacheKey, statement);
		} else {
			statement = findLimitedToBeEvaluated_limit_statement_cache.get(cacheKey);
		}

		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		List<Author> results = null;
		try {
			if(!hasConnection) {
				connection = ConnectionManager.getConnection();
			}
			preparedStatement = connection.prepareStatement(statement);
			ConnectionManager.setDatetime(preparedStatement, 1, dtmStartedFollowing);

			resultSet = preparedStatement.executeQuery();
			results = list(resultSet);
		} catch (SQLException sqlex) {
			throw sqlex;
		} finally {
			if(hasConnection) {
				ConnectionManager.closeAll(resultSet, preparedStatement, null);
			} else {
				ConnectionManager.closeAll(resultSet, preparedStatement, connection);
			}
		}


		if(null == results || results.size() == 0) {
			throw new H2ZeroFinderException("Could not find result.");
		}
		return(results);
	}

	public static List<Author> findLimitedToBeEvaluated(Connection connection, Timestamp dtmStartedFollowing) throws H2ZeroFinderException, SQLException {
		return(findLimitedToBeEvaluated(connection, dtmStartedFollowing, null, null));
	}

	public static List<Author> findLimitedToBeEvaluated(Timestamp dtmStartedFollowing, Integer limit, Integer offset) throws H2ZeroFinderException, SQLException {
		return(findLimitedToBeEvaluated(null, dtmStartedFollowing, limit, offset));
	}

	public static List<Author> findLimitedToBeEvaluated(Timestamp dtmStartedFollowing) throws H2ZeroFinderException, SQLException {
		return(findLimitedToBeEvaluated(null, dtmStartedFollowing, null, null));
	}

// silent connection, params..., limit, offset
	public static List<Author> findLimitedToBeEvaluatedSilent(Connection connection, Timestamp dtmStartedFollowing, Integer limit, Integer offset) {
		try {
			return(findLimitedToBeEvaluated(connection, dtmStartedFollowing, limit, offset));
		} catch(H2ZeroFinderException h2zfex) {
			if(LOGGER.isWarnEnabled()) {
				LOGGER.warn("H2ZeroFinderException findLimitedToBeEvaluatedSilent(connection: " + connection + ", " + dtmStartedFollowing + ", limit: " + limit + ", offset: " + offset + "): " + h2zfex.getMessage());
				if(LOGGER.isDebugEnabled()) {
					h2zfex.printStackTrace();
				}
			}
			return(new ArrayList<Author>());
		} catch(SQLException sqlex) {
			if(LOGGER.isWarnEnabled()) {
				LOGGER.warn("SQLException findLimitedToBeEvaluatedSilent(connection: " + connection + ", " + dtmStartedFollowing + ", limit: " + limit + ", offset: " + offset + "): " + sqlex.getMessage());
				if(LOGGER.isDebugEnabled()) {
					sqlex.printStackTrace();
				}
			}
			return(new ArrayList<Author>());
		}
	}

// silent connection, params...
	public static List<Author> findLimitedToBeEvaluatedSilent(Connection connection, Timestamp dtmStartedFollowing) {
		return(findLimitedToBeEvaluatedSilent(connection, dtmStartedFollowing, null, null));
	}

// silent params..., limit, offset
	public static List<Author> findLimitedToBeEvaluatedSilent(Timestamp dtmStartedFollowing, Integer limit, Integer offset) {
		return(findLimitedToBeEvaluatedSilent(null , dtmStartedFollowing, limit, offset));
	}

	public static List<Author> findLimitedToBeEvaluatedSilent(Timestamp dtmStartedFollowing) {
		return(findLimitedToBeEvaluatedSilent(null, dtmStartedFollowing, null, null));
	}

	/**
	 * Return a unique result for the query - in effect just the first result of
	 * query.
	 * 
	 * @param resultSet The result set of the query
	 * 
	 * @return The Author that represents this result
	 * 
	 * @throws H2ZeroFinderException if no results were found
	 * @throws SQLException if there was a problem retrieving the results
	 */
	private static Author uniqueResult(ResultSet resultSet) throws H2ZeroFinderException, SQLException {
		if(resultSet.next()) {
			// we have a result
			Long idAuthor = ConnectionManager.getNullableResultLong(resultSet, 1);
			Long idAuthorStatus = ConnectionManager.getNullableResultLong(resultSet, 2);
			String txtIdAuthor = ConnectionManager.getNullableResultString(resultSet, 3);
			String nmAuthor = ConnectionManager.getNullableResultString(resultSet, 4);
			String nmUsername = ConnectionManager.getNullableResultString(resultSet, 5);
			String txtBio = ConnectionManager.getNullableResultString(resultSet, 6);
			String txtUrlCacheImage = ConnectionManager.getNullableResultString(resultSet, 7);
			Long numFollowing = ConnectionManager.getNullableResultLong(resultSet, 8);
			Long numFollowers = ConnectionManager.getNullableResultLong(resultSet, 9);
			Timestamp dtmStartedFollowing = ConnectionManager.getNullableResultTimestamp(resultSet, 10);
			Boolean flIsUpdating = ConnectionManager.getNullableResultBoolean(resultSet, 11);
			Boolean flAuthorIsFollowingUser = ConnectionManager.getNullableResultBoolean(resultSet, 12);
			Boolean flAuthorIsFollowedByUser = ConnectionManager.getNullableResultBoolean(resultSet, 13);

			Author author = new Author(idAuthor, idAuthorStatus, txtIdAuthor, nmAuthor, nmUsername, txtBio, txtUrlCacheImage, numFollowing, numFollowers, dtmStartedFollowing, flIsUpdating, flAuthorIsFollowingUser, flAuthorIsFollowedByUser);

			if(resultSet.next()) {
				throw new H2ZeroFinderException("More than one result in resultset for unique finder.");
			} else {
				return(author);
			}
		} else {
			// could not get a result
			return(null);
		}
	}

	/**
	 * Return the results as a list of Author, this will be empty if
	 * none are found.
	 * 
	 * @param resultSet the results as a list of Author
	 * 
	 * @return the list of results
	 * 
	 * @throws SQLException if there was a problem retrieving the results
	 */
	private static List<Author> list(ResultSet resultSet) throws SQLException {
		List<Author> arrayList = new ArrayList<Author>();
		while(resultSet.next()) {
			arrayList.add(new Author(
					ConnectionManager.getNullableResultLong(resultSet, 1),
					ConnectionManager.getNullableResultLong(resultSet, 2),
					ConnectionManager.getNullableResultString(resultSet, 3),
					ConnectionManager.getNullableResultString(resultSet, 4),
					ConnectionManager.getNullableResultString(resultSet, 5),
					ConnectionManager.getNullableResultString(resultSet, 6),
					ConnectionManager.getNullableResultString(resultSet, 7),
					ConnectionManager.getNullableResultLong(resultSet, 8),
					ConnectionManager.getNullableResultLong(resultSet, 9),
					ConnectionManager.getNullableResultTimestamp(resultSet, 10),
					ConnectionManager.getNullableResultBoolean(resultSet, 11),
					ConnectionManager.getNullableResultBoolean(resultSet, 12),
					ConnectionManager.getNullableResultBoolean(resultSet, 13)));
		}
		return(arrayList);
	}

}