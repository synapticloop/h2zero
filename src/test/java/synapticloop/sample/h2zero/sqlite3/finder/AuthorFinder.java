package synapticloop.sample.h2zero.sqlite3.finder;

// - - - - thoughtfully generated by synapticloop h2zero - - - - 
//    with the use of synapticloop templar templating language
//                (java-create-finder.templar)

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.math.BigDecimal;
import java.util.List;
import java.util.ArrayList;

import synapticloop.h2zero.base.exception.H2ZeroFinderException;
import synapticloop.h2zero.base.manager.sqlite3.ConnectionManager;
import synapticloop.h2zero.util.LruCache;


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


import synapticloop.sample.h2zero.sqlite3.model.util.Constants;

import synapticloop.sample.h2zero.sqlite3.model.Author;

public class AuthorFinder {
	// the binder is unused in code, but will generate compile problems if this 
	// class is no longer referenced in the h2zero file. Just a nicety for
	// removing dead code
	@SuppressWarnings("unused")
	private static final String BINDER = Constants.AUTHOR_BINDER;

	private static final Logger LOGGER = LoggerFactory.getLogger(AuthorFinder.class);
	private static final String SQL_SELECT_START = "select id_author, id_author_status, txt_id_author, nm_author, nm_username, txt_bio, txt_url_cache_image, num_following, num_followers, dtm_started_following, fl_is_updating, fl_author_is_following_user, fl_author_is_followed_by_user from author";
	private static final String SQL_BUILTIN_FIND_BY_PRIMARY_KEY = SQL_SELECT_START + " where id_author = ?";

	private static final String SQL_FIND_BY_ID_AUTHOR_STATUS = SQL_SELECT_START + " where id_author_status = ?";
	private static final String SQL_FIND_BY_FL_IS_UPDATING = SQL_SELECT_START + " where fl_is_updating = ?";
	private static final String SQL_FIND_BY_TXT_ID_AUTHOR_ID_AUTHOR_STATUS = SQL_SELECT_START + " where txt_id_author = ? and id_author_status = ?";
	private static final String SQL_FIND_BY_TXT_ID_AUTHOR = SQL_SELECT_START + " where txt_id_author = ?";
	private static final String SQL_FIND_IN_STATUS = SQL_SELECT_START + " where id_author_status in (...)";
	private static final String SQL_FIND_ALL_TO_BE_EVALUATED = SQL_SELECT_START + " where id_author_status = (select id_author_status from author_status where txt_author_status = 'TO_BE_EVALUATED') and dtm_started_following <= ? ";
	private static final String SQL_FIND_FIRST_TO_BE_EVALUATED = SQL_SELECT_START + " where id_author_status = (select id_author_status from author_status where txt_author_status = 'TO_BE_EVALUATED') and dtm_started_following < ? order by dtm_started_following asc";
	private static final String SQL_FIND_LIMITED_TO_BE_EVALUATED = SQL_SELECT_START + " where id_author_status = (select id_author_status from author_status where txt_author_status = 'TO_BE_EVALUATED') and dtm_started_following < ? order by dtm_started_following";
	private static final String SQL_FIND_IN_NUMBER = SQL_SELECT_START + "  where fl_is_updating = ? and  fl_is_updating in (...) and  dtm_started_following in (...) and fl_is_updating = ? and fl_is_updating = ? ";

	// This is the cache for 'in Finder' which have an ellipses (...) in the statement
	private static final LruCache<String, String> findInStatus_limit_statement_cache = new LruCache<>(1024);
	private static final LruCache<String, String> findInNumber_limit_statement_cache = new LruCache<>(1024);
	// now for the statement limit cache(s)
	private static final LruCache<String, String> findAll_limit_statement_cache = new LruCache<>(1024);
	private static final LruCache<String, String> findByIdAuthorStatus_limit_statement_cache = new LruCache<>(1024);
	private static final LruCache<String, String> findByFlIsUpdating_limit_statement_cache = new LruCache<>(1024);
	private static final LruCache<String, String> findByTxtIdAuthorIdAuthorStatus_limit_statement_cache = new LruCache<>(1024);
	private static final LruCache<String, String> findByTxtIdAuthor_limit_statement_cache = new LruCache<>(1024);
	private static final LruCache<String, String> findAllToBeEvaluated_limit_statement_cache = new LruCache<>(1024);
	private static final LruCache<String, String> findFirstToBeEvaluated_limit_statement_cache = new LruCache<>(1024);
	private static final LruCache<String, String> findLimitedToBeEvaluated_limit_statement_cache = new LruCache<>(1024);

	private AuthorFinder() {}

	/**
	 * Find a Author by its primary key
	 * 
	 * @param connection the connection item
	 * @param idAuthor the primary key
	 * 
	 * @return the unique result or throw an exception if one couldn't be found
	 * 
	 * @throws H2ZeroFinderException if one couldn't be found
	 */
	public static Author findByPrimaryKey(Connection connection, Long idAuthor) throws H2ZeroFinderException {
		Author author = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;

		if(null == idAuthor) {
			throw new H2ZeroFinderException("Could not find result as the primary key field [idAuthor] was null.");
		}

		try {
			preparedStatement = connection.prepareStatement(SQL_BUILTIN_FIND_BY_PRIMARY_KEY);
			preparedStatement.setLong(1, idAuthor);
			resultSet = preparedStatement.executeQuery();
			author = uniqueResult(resultSet);
		} catch (H2ZeroFinderException | SQLException ex) {
			throw new H2ZeroFinderException(ex.getMessage() + "  Additionally, the parameters were [idAuthor:" + idAuthor + "].");
		} finally {
			ConnectionManager.closeAll(resultSet, preparedStatement);
		}

		if(null == author) {
			throw new H2ZeroFinderException("Could not find result the parameters were [idAuthor:" + idAuthor + "].");
		}
		return(author);
	}

	/**
	 * Find a Author by its primary key
	 * 
	 * @param idAuthor the primary key
	 * 
	 * @return the unique result or throw an exception if one couldn't be found.
	 * 
	 * @throws H2ZeroFinderException if one couldn't be found
	 */
	public static Author findByPrimaryKey(Long idAuthor) throws H2ZeroFinderException {

		if(null == idAuthor) {
			throw new H2ZeroFinderException("Could not find result as the primary key field [idAuthor] was null.");
		}

		Author author = null;
		try (Connection connection = ConnectionManager.getConnection()) {
			author = findByPrimaryKey(connection, idAuthor);
		} catch (SQLException | H2ZeroFinderException ex) {
			throw new H2ZeroFinderException(ex.getMessage() + "  Additionally, the parameters were [idAuthor:" + idAuthor + "].");
		}

		if(null == author) {
			throw new H2ZeroFinderException("Could not find result the parameters were [idAuthor:" + idAuthor + "].");
		}
		return(author);
	}

	/**
	 * Find a Author by its primary key and silently fail.
	 * I.e. Do not throw an exception on error.
	 * 
	 * @param connection the connection item
	 * @param idAuthor the primary key
	 * 
	 * @return the unique result or null if it couldn't be found
	 * 
	 */
	public static Author findByPrimaryKeySilent(Connection connection, Long idAuthor) {
		try {
			return(findByPrimaryKey(connection, idAuthor));
		} catch(H2ZeroFinderException h2zfex){
			if(LOGGER.isWarnEnabled()) {
				LOGGER.warn("H2ZeroFinderException findByPrimaryKeySilent(" + idAuthor + "): " + h2zfex.getMessage());
				if(LOGGER.isDebugEnabled()) {
					h2zfex.printStackTrace();
				}
			}
			return(null);
		}
	}

	/**
	 * Find a Author by its primary key and silently fail.
	 * I.e. Do not throw an exception on error.
	 * 
	 * @param idAuthor the primary key
	 * 
	 * @return the unique result or null if it couldn't be found
	 * 
	 */
	public static Author findByPrimaryKeySilent(Long idAuthor) {
		try {
			return(findByPrimaryKey(idAuthor));
		} catch(H2ZeroFinderException h2zfex){
			if(LOGGER.isWarnEnabled()) {
				LOGGER.warn("H2ZeroFinderException findByPrimaryKeySilent(" + idAuthor + "): " + h2zfex.getMessage());
				if(LOGGER.isDebugEnabled()) {
					h2zfex.printStackTrace();
				}
			}
			return(null);
		}
	}

	/**
	 * Find all UserTitle objects with the passed in connection, with limited
	 * results starting at a particular offset.
	 * <p>
	 * If the limit parameter is null, there will be no limit applied.
	 * <p>
	 * If the offset is null, then this will be set to 0
	 * <p>
	 * If both limit and offset are null, then no limit and no offset will be applied
	 * to the statement.
	 * <p>
	 * The passed in connection object is usable for transactional SQL statements,
	 * where the connection has already had a transaction started on it.
	 * <p>
	 * If the connection object is null an new connection object will be created 
	 * and closed at the end of the method.
	 * <p>
	 * If the connection object is not null, then it will not be closed.
	 * 
	 * @param connection - the connection object to use (or null if not part of a transaction)
	 * @param limit - the limit for the result set
	 * @param offset - the offset for the start of the results.
	 * 
	 * @return a list of all the Author objects
	 * 
	 * @throws SQLException if there was an error in the SQL statement
	 * @throws H2ZeroFinderException if no results were found
	 */
	public static List<Author> findAll(Connection connection, Integer limit, Integer offset) throws SQLException, H2ZeroFinderException {
		boolean hasConnection = (null != connection);
		String statement = null;
		// first find the statement that we want

		String cacheKey = limit + ":" + offset;
		if(!findAll_limit_statement_cache.containsKey(cacheKey)) {
			// place the cacheKey in the cache for later use

			StringBuilder stringBuilder = new StringBuilder(SQL_SELECT_START);

			if(null != limit) {
				stringBuilder.append(" limit ");
				stringBuilder.append(limit);
				if(null != offset) {
					stringBuilder.append(" offset ");
					stringBuilder.append(offset);
				}
			}


			statement = stringBuilder.toString();
			findAll_limit_statement_cache.put(cacheKey, statement);
		} else {
			statement = findAll_limit_statement_cache.get(cacheKey);
		}

		// now set up the statement
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		if(connection == null) {
			connection = ConnectionManager.getConnection();
		}

		List<Author> results = new ArrayList<Author>();

		try {
			preparedStatement = connection.prepareStatement(statement);
			resultSet = preparedStatement.executeQuery();
			results = list(resultSet);
		} catch(SQLException ex) {
			if(LOGGER.isWarnEnabled()) {
				LOGGER.warn("SQLException findAll(): " + ex.getMessage());
				if(LOGGER.isDebugEnabled()) {
					ex.printStackTrace();
				}
			}
			throw ex;
		} finally {
			if(hasConnection) {
				ConnectionManager.closeAll(resultSet, preparedStatement, null);
			} else {
				ConnectionManager.closeAll(resultSet, preparedStatement, connection);
			}
		}

		if(results.size() == 0) {
			throw new H2ZeroFinderException("Could not find any results for findAll");
		}
		return(results);
	}

	/**
	 * Find all the Author objects - in effect this chains 
	 * to the findAll(connection, limit, offset) with null parameters.
	 * 
	 * @return The list of Author model objects
	 * 
	 * @throws SQLException if there was an error in the SQL statement
	 * @throws H2ZeroFinderException if no results were found
	 */
	public static List<Author> findAll() throws SQLException, H2ZeroFinderException {
		return(findAll(null, null, null));
	}

	/**
	 * Find all the Author objects - in effect this chains 
	 * to the findAll(connection, limit, offset) with null limit and offset
	 * parameters.
	 * 
	 * @param connection - the connection to be used
	 * 
	 * @return The list of Author model objects
	 * 
	 * @throws SQLException if there was an error in the SQL statement
	 * @throws H2ZeroFinderException if no results were found
	 */
	public static List<Author> findAll(Connection connection) throws SQLException, H2ZeroFinderException {
		return(findAll(connection, null, null));
	}

	/**
	 * Find all the Author objects - in effect this chains 
	 * to the findAll(connection, limit, offset) with null connection parameter
	 * 
	 * @param limit - the limit for the number of results to return
	 * @param offset - the offset from the start of the results
	 * 
	 * @return The list of Author model objects
	 * 
	 * @throws SQLException if there was an error in the SQL statement
	 * @throws H2ZeroFinderException if no results were found
	 */
	public static List<Author> findAll(Integer limit, Integer offset) throws SQLException, H2ZeroFinderException {
		return(findAll(null, limit, offset));
	}

	/**
	 * Find all the Author objects - in effect this chains 
	 * to the findAll(connection, limit, offset) with null parameters,
	 * however this method swallows any exceptions and will return an empty list.
	 * 
	 * 
	 * @param connection - the connection to be used
	 * @param limit - the limit for the number of results to return
	 * @param offset - the offset from the start of the results
	 * 
	 * @return The list of Author model objects, or an empty List on error
	 */
	public static List<Author> findAllSilent(Connection connection, Integer limit, Integer offset) {
		try {
			return(findAll(connection, limit, offset));
		} catch(SQLException | H2ZeroFinderException ex) {
			if(LOGGER.isWarnEnabled()) {
				LOGGER.warn("Exception findAllSilent(connection: " + connection + ", limit: " +  limit + ", offset: " + offset + "): " + ex.getMessage());
				if(LOGGER.isDebugEnabled()) {
					ex.printStackTrace();
				}
			}
			return(new ArrayList<Author>());
		}
	}

	/**
	 * Find all the Author objects - in effect this chains 
	 * to the findAll(connection, limit, offset) with null limit and offset parameters,
	 * however this method swallows any exceptions and will return an empty list.
	 * 
	 * @param connection - the connection to be used
	 * 
	 * @return The list of Author model objects, or an empty List on error
	 */
	public static List<Author> findAllSilent(Connection connection) {
		return(findAllSilent(connection, null, null));
	}

	/**
	 * Find all the Author objects - in effect this chains 
	 * to the findAll(connection, limit, offset) with null limit and offset parameters,
	 * however this method swallows any exceptions and will return an empty list.
	 * 
	 * @param limit - the limit for the number of results to return
	 * @param offset - the offset from the start of the results
	 * 
	 * @return The list of Author model objects, or an empty List on error
	 */
	public static List<Author> findAllSilent(Integer limit, Integer offset) {
		return(findAllSilent(null, limit, offset));
	}

	/**
	 * Find all the Author objects - in effect this chains 
	 * to the findAll(connection, limit, offset) with null parameters,
	 * however this method swallows any exceptions and will return an empty list.
	 * 
	 * @return The list of Author model objects, or an empty List on error
	 */
	public static List<Author> findAllSilent() {
		return(findAllSilent(null, null, null));
	}

	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * 
	 * This is the start of the user defined finders which are generated
	 * through either the "finders" JSON key, or the "fieldFinders" JSON
	 * key.
	 * 
	 * There are 9 defined finders on the author table, of those finders
	 * the following are the regular finders, either defined through the
	 * 'finders' or 'fieldFinders' JSON key
	 * 
	 * - findByIdAuthorStatus - Generated from the 'fieldFinders' JSON key
	 * - findByFlIsUpdating - Generated from the 'fieldFinders' JSON key
	 * - findByTxtIdAuthorIdAuthorStatus - Generated from the 'fieldFinders' JSON key
	 * - findByTxtIdAuthor - Generated from the 'fieldFinders' JSON key
	 * - findInStatus - Generated from the 'finders' JSON key
	 * - findAllToBeEvaluated - Generated from the 'finders' JSON key
	 * - findFirstToBeEvaluated - Generated from the 'finders' JSON key
	 * - findLimitedToBeEvaluated - Generated from the 'finders' JSON key
	 * - findInNumber - Generated from the 'finders' JSON key
	 * 
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

	/**
	 * findByIdAuthorStatus 
	 * <p>
	 * (This finder was generated through the 'fieldFinders' JSON key)
	 * <p>
	 * Note that if a limit and offset are passed through, then the generated statement 
	 * will be cached for further use
	 * 
	 * @param connection - the connection to the database
	 * @param idAuthorStatus - maps to the id_author_status field
	 * @param limit - The maximum number of rows to return
	 * @param offset - The row offset to start with
	 * 
	 * @return the list of Author results found
	 * 
	 * @throws H2ZeroFinderException if no results could be found
	 * @throws SQLException if there was an error in the SQL statement
	 */
	public static List<Author> findByIdAuthorStatus(Connection connection, Long idAuthorStatus, Integer limit, Integer offset) throws H2ZeroFinderException, SQLException {
		boolean hasConnection = (null != connection);
		String statement = null;

		// first find the statement that we want - or cache it if it doesn't exist

		String cacheKey = limit + ":" + offset;
		if(!findByIdAuthorStatus_limit_statement_cache.containsKey(cacheKey)) {
			// place the cacheKey in the cache for later use

			StringBuilder stringBuilder = new StringBuilder(SQL_FIND_BY_ID_AUTHOR_STATUS);

			if(null != limit) {
				stringBuilder.append(" limit ");
				stringBuilder.append(limit);
				if(null != offset) {
					stringBuilder.append(" offset ");
					stringBuilder.append(offset);
				}
			}

			statement = stringBuilder.toString();
			findByIdAuthorStatus_limit_statement_cache.put(cacheKey, statement);
		} else {
			statement = findByIdAuthorStatus_limit_statement_cache.get(cacheKey);
		}

		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		List<Author> results = null;
		try {
			if(!hasConnection) {
				connection = ConnectionManager.getConnection();
			}
			preparedStatement = connection.prepareStatement(statement);
			ConnectionManager.setBigint(preparedStatement, 1, idAuthorStatus);

			resultSet = preparedStatement.executeQuery();
			results = list(resultSet);
		} catch (SQLException ex) {
			throw new SQLException("SQL exception in statement: " + statement, ex);
		} finally {
			if(hasConnection) {
				ConnectionManager.closeAll(resultSet, preparedStatement, null);
			} else {
				ConnectionManager.closeAll(resultSet, preparedStatement, connection);
			}
		}


		if(results.size() == 0) {
			throw new H2ZeroFinderException("Could not find result.");
		}
		return(results);
	}

	public static List<Author> findByIdAuthorStatus(Connection connection, Long idAuthorStatus) throws H2ZeroFinderException, SQLException {
		return(findByIdAuthorStatus(connection, idAuthorStatus, null, null));
	}

	public static List<Author> findByIdAuthorStatus(Long idAuthorStatus, Integer limit, Integer offset) throws H2ZeroFinderException, SQLException {
		return(findByIdAuthorStatus(null, idAuthorStatus, limit, offset));
	}

	public static List<Author> findByIdAuthorStatus(Long idAuthorStatus) throws H2ZeroFinderException, SQLException {
		return(findByIdAuthorStatus(null, idAuthorStatus, null, null));
	}

	// silent connection, params..., limit, offset
	public static List<Author> findByIdAuthorStatusSilent(Connection connection, Long idAuthorStatus, Integer limit, Integer offset) {
		try {
			return(findByIdAuthorStatus(connection, idAuthorStatus, limit, offset));
		} catch(H2ZeroFinderException h2zfex) {
			if(LOGGER.isWarnEnabled()) {
				LOGGER.warn("H2ZeroFinderException findByIdAuthorStatusSilent(connection: " + connection + ", " + idAuthorStatus + ", limit: " + limit + ", offset: " + offset + "): " + h2zfex.getMessage());
				if(LOGGER.isDebugEnabled()) {
					h2zfex.printStackTrace();
				}
			}
			return(new ArrayList<Author>());
		} catch(SQLException sqlex) {
			if(LOGGER.isWarnEnabled()) {
				LOGGER.warn("SQLException findByIdAuthorStatusSilent(connection: " + connection + ", " + idAuthorStatus + ", limit: " + limit + ", offset: " + offset + "): " + sqlex.getMessage());
				if(LOGGER.isDebugEnabled()) {
					sqlex.printStackTrace();
				}
			}
			return(new ArrayList<Author>());
		}
	}

	// silent connection, params...
	public static List<Author> findByIdAuthorStatusSilent(Connection connection, Long idAuthorStatus) {
		return(findByIdAuthorStatusSilent(connection, idAuthorStatus, null, null));
	}

	// silent params..., limit, offset
	public static List<Author> findByIdAuthorStatusSilent(Long idAuthorStatus, Integer limit, Integer offset) {
		return(findByIdAuthorStatusSilent(null, idAuthorStatus, limit, offset));
	}

	public static List<Author> findByIdAuthorStatusSilent(Long idAuthorStatus) {
		return(findByIdAuthorStatusSilent(null, idAuthorStatus, null, null));
	}

	/**
	 * findByFlIsUpdating 
	 * <p>
	 * (This finder was generated through the 'fieldFinders' JSON key)
	 * <p>
	 * Note that if a limit and offset are passed through, then the generated statement 
	 * will be cached for further use
	 * 
	 * @param connection - the connection to the database
	 * @param flIsUpdating - maps to the fl_is_updating field
	 * @param limit - The maximum number of rows to return
	 * @param offset - The row offset to start with
	 * 
	 * @return the list of Author results found
	 * 
	 * @throws H2ZeroFinderException if no results could be found
	 * @throws SQLException if there was an error in the SQL statement
	 */
	public static List<Author> findByFlIsUpdating(Connection connection, Boolean flIsUpdating, Integer limit, Integer offset) throws H2ZeroFinderException, SQLException {
		boolean hasConnection = (null != connection);
		String statement = null;

		// first find the statement that we want - or cache it if it doesn't exist

		String cacheKey = limit + ":" + offset;
		if(!findByFlIsUpdating_limit_statement_cache.containsKey(cacheKey)) {
			// place the cacheKey in the cache for later use

			StringBuilder stringBuilder = new StringBuilder(SQL_FIND_BY_FL_IS_UPDATING);

			if(null != limit) {
				stringBuilder.append(" limit ");
				stringBuilder.append(limit);
				if(null != offset) {
					stringBuilder.append(" offset ");
					stringBuilder.append(offset);
				}
			}

			statement = stringBuilder.toString();
			findByFlIsUpdating_limit_statement_cache.put(cacheKey, statement);
		} else {
			statement = findByFlIsUpdating_limit_statement_cache.get(cacheKey);
		}

		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		List<Author> results = null;
		try {
			if(!hasConnection) {
				connection = ConnectionManager.getConnection();
			}
			preparedStatement = connection.prepareStatement(statement);
			ConnectionManager.setBoolean(preparedStatement, 1, flIsUpdating);

			resultSet = preparedStatement.executeQuery();
			results = list(resultSet);
		} catch (SQLException ex) {
			throw new SQLException("SQL exception in statement: " + statement, ex);
		} finally {
			if(hasConnection) {
				ConnectionManager.closeAll(resultSet, preparedStatement, null);
			} else {
				ConnectionManager.closeAll(resultSet, preparedStatement, connection);
			}
		}


		if(results.size() == 0) {
			throw new H2ZeroFinderException("Could not find result.");
		}
		return(results);
	}

	public static List<Author> findByFlIsUpdating(Connection connection, Boolean flIsUpdating) throws H2ZeroFinderException, SQLException {
		return(findByFlIsUpdating(connection, flIsUpdating, null, null));
	}

	public static List<Author> findByFlIsUpdating(Boolean flIsUpdating, Integer limit, Integer offset) throws H2ZeroFinderException, SQLException {
		return(findByFlIsUpdating(null, flIsUpdating, limit, offset));
	}

	public static List<Author> findByFlIsUpdating(Boolean flIsUpdating) throws H2ZeroFinderException, SQLException {
		return(findByFlIsUpdating(null, flIsUpdating, null, null));
	}

	// silent connection, params..., limit, offset
	public static List<Author> findByFlIsUpdatingSilent(Connection connection, Boolean flIsUpdating, Integer limit, Integer offset) {
		try {
			return(findByFlIsUpdating(connection, flIsUpdating, limit, offset));
		} catch(H2ZeroFinderException h2zfex) {
			if(LOGGER.isWarnEnabled()) {
				LOGGER.warn("H2ZeroFinderException findByFlIsUpdatingSilent(connection: " + connection + ", " + flIsUpdating + ", limit: " + limit + ", offset: " + offset + "): " + h2zfex.getMessage());
				if(LOGGER.isDebugEnabled()) {
					h2zfex.printStackTrace();
				}
			}
			return(new ArrayList<Author>());
		} catch(SQLException sqlex) {
			if(LOGGER.isWarnEnabled()) {
				LOGGER.warn("SQLException findByFlIsUpdatingSilent(connection: " + connection + ", " + flIsUpdating + ", limit: " + limit + ", offset: " + offset + "): " + sqlex.getMessage());
				if(LOGGER.isDebugEnabled()) {
					sqlex.printStackTrace();
				}
			}
			return(new ArrayList<Author>());
		}
	}

	// silent connection, params...
	public static List<Author> findByFlIsUpdatingSilent(Connection connection, Boolean flIsUpdating) {
		return(findByFlIsUpdatingSilent(connection, flIsUpdating, null, null));
	}

	// silent params..., limit, offset
	public static List<Author> findByFlIsUpdatingSilent(Boolean flIsUpdating, Integer limit, Integer offset) {
		return(findByFlIsUpdatingSilent(null, flIsUpdating, limit, offset));
	}

	public static List<Author> findByFlIsUpdatingSilent(Boolean flIsUpdating) {
		return(findByFlIsUpdatingSilent(null, flIsUpdating, null, null));
	}

	/**
	 * findByTxtIdAuthorIdAuthorStatus 
	 * <p>
	 * (This finder was generated through the 'fieldFinders' JSON key)
	 * <p>
	 * Note that if a limit and offset are passed through, then the generated statement 
	 * will be cached for further use
	 * 
	 * @param connection - the connection to the database
	 * @param txtIdAuthor - maps to the txt_id_author field
	 * @param idAuthorStatus - maps to the id_author_status field
	 * @param limit - The maximum number of rows to return
	 * @param offset - The row offset to start with
	 * 
	 * @return the list of Author results found
	 * 
	 * @throws H2ZeroFinderException if no results could be found
	 * @throws SQLException if there was an error in the SQL statement
	 */
	public static List<Author> findByTxtIdAuthorIdAuthorStatus(Connection connection, String txtIdAuthor, Long idAuthorStatus, Integer limit, Integer offset) throws H2ZeroFinderException, SQLException {
		boolean hasConnection = (null != connection);
		String statement = null;

		// first find the statement that we want - or cache it if it doesn't exist

		String cacheKey = limit + ":" + offset;
		if(!findByTxtIdAuthorIdAuthorStatus_limit_statement_cache.containsKey(cacheKey)) {
			// place the cacheKey in the cache for later use

			StringBuilder stringBuilder = new StringBuilder(SQL_FIND_BY_TXT_ID_AUTHOR_ID_AUTHOR_STATUS);

			if(null != limit) {
				stringBuilder.append(" limit ");
				stringBuilder.append(limit);
				if(null != offset) {
					stringBuilder.append(" offset ");
					stringBuilder.append(offset);
				}
			}

			statement = stringBuilder.toString();
			findByTxtIdAuthorIdAuthorStatus_limit_statement_cache.put(cacheKey, statement);
		} else {
			statement = findByTxtIdAuthorIdAuthorStatus_limit_statement_cache.get(cacheKey);
		}

		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		List<Author> results = null;
		try {
			if(!hasConnection) {
				connection = ConnectionManager.getConnection();
			}
			preparedStatement = connection.prepareStatement(statement);
			ConnectionManager.setVarchar(preparedStatement, 1, txtIdAuthor);
			ConnectionManager.setBigint(preparedStatement, 2, idAuthorStatus);

			resultSet = preparedStatement.executeQuery();
			results = list(resultSet);
		} catch (SQLException ex) {
			throw new SQLException("SQL exception in statement: " + statement, ex);
		} finally {
			if(hasConnection) {
				ConnectionManager.closeAll(resultSet, preparedStatement, null);
			} else {
				ConnectionManager.closeAll(resultSet, preparedStatement, connection);
			}
		}


		if(results.size() == 0) {
			throw new H2ZeroFinderException("Could not find result.");
		}
		return(results);
	}

	public static List<Author> findByTxtIdAuthorIdAuthorStatus(Connection connection, String txtIdAuthor, Long idAuthorStatus) throws H2ZeroFinderException, SQLException {
		return(findByTxtIdAuthorIdAuthorStatus(connection, txtIdAuthor, idAuthorStatus, null, null));
	}

	public static List<Author> findByTxtIdAuthorIdAuthorStatus(String txtIdAuthor, Long idAuthorStatus, Integer limit, Integer offset) throws H2ZeroFinderException, SQLException {
		return(findByTxtIdAuthorIdAuthorStatus(null, txtIdAuthor, idAuthorStatus, limit, offset));
	}

	public static List<Author> findByTxtIdAuthorIdAuthorStatus(String txtIdAuthor, Long idAuthorStatus) throws H2ZeroFinderException, SQLException {
		return(findByTxtIdAuthorIdAuthorStatus(null, txtIdAuthor, idAuthorStatus, null, null));
	}

	// silent connection, params..., limit, offset
	public static List<Author> findByTxtIdAuthorIdAuthorStatusSilent(Connection connection, String txtIdAuthor, Long idAuthorStatus, Integer limit, Integer offset) {
		try {
			return(findByTxtIdAuthorIdAuthorStatus(connection, txtIdAuthor, idAuthorStatus, limit, offset));
		} catch(H2ZeroFinderException h2zfex) {
			if(LOGGER.isWarnEnabled()) {
				LOGGER.warn("H2ZeroFinderException findByTxtIdAuthorIdAuthorStatusSilent(connection: " + connection + ", " + txtIdAuthor + ", " + idAuthorStatus + ", limit: " + limit + ", offset: " + offset + "): " + h2zfex.getMessage());
				if(LOGGER.isDebugEnabled()) {
					h2zfex.printStackTrace();
				}
			}
			return(new ArrayList<Author>());
		} catch(SQLException sqlex) {
			if(LOGGER.isWarnEnabled()) {
				LOGGER.warn("SQLException findByTxtIdAuthorIdAuthorStatusSilent(connection: " + connection + ", " + txtIdAuthor + ", " + idAuthorStatus + ", limit: " + limit + ", offset: " + offset + "): " + sqlex.getMessage());
				if(LOGGER.isDebugEnabled()) {
					sqlex.printStackTrace();
				}
			}
			return(new ArrayList<Author>());
		}
	}

	// silent connection, params...
	public static List<Author> findByTxtIdAuthorIdAuthorStatusSilent(Connection connection, String txtIdAuthor, Long idAuthorStatus) {
		return(findByTxtIdAuthorIdAuthorStatusSilent(connection, txtIdAuthor, idAuthorStatus, null, null));
	}

	// silent params..., limit, offset
	public static List<Author> findByTxtIdAuthorIdAuthorStatusSilent(String txtIdAuthor, Long idAuthorStatus, Integer limit, Integer offset) {
		return(findByTxtIdAuthorIdAuthorStatusSilent(null, txtIdAuthor, idAuthorStatus, limit, offset));
	}

	public static List<Author> findByTxtIdAuthorIdAuthorStatusSilent(String txtIdAuthor, Long idAuthorStatus) {
		return(findByTxtIdAuthorIdAuthorStatusSilent(null, txtIdAuthor, idAuthorStatus, null, null));
	}

	/**
	 * findByTxtIdAuthor 
	 * <p>
	 * (This finder was generated through the 'fieldFinders' JSON key)
	 * <p>
	 * Note that if a limit and offset are passed through, then the generated statement 
	 * will be cached for further use
	 * 
	 * @param connection - the connection to the database
	 * @param txtIdAuthor - maps to the txt_id_author field
	 * @param limit - The maximum number of rows to return
	 * @param offset - The row offset to start with
	 * 
	 * @return the unique result of Author found
	 * 
	 * @throws H2ZeroFinderException if no results could be found
	 * @throws SQLException if there was an error in the SQL statement
	 */
	public static Author findByTxtIdAuthor(Connection connection, String txtIdAuthor, Integer limit, Integer offset) throws H2ZeroFinderException, SQLException {
		boolean hasConnection = (null != connection);
		String statement = null;

		// first find the statement that we want - or cache it if it doesn't exist

		String cacheKey = limit + ":" + offset;
		if(!findByTxtIdAuthor_limit_statement_cache.containsKey(cacheKey)) {
			// place the cacheKey in the cache for later use

			StringBuilder stringBuilder = new StringBuilder(SQL_FIND_BY_TXT_ID_AUTHOR);

			if(null != limit) {
				stringBuilder.append(" limit ");
				stringBuilder.append(limit);
				if(null != offset) {
					stringBuilder.append(" offset ");
					stringBuilder.append(offset);
				}
			}

			statement = stringBuilder.toString();
			findByTxtIdAuthor_limit_statement_cache.put(cacheKey, statement);
		} else {
			statement = findByTxtIdAuthor_limit_statement_cache.get(cacheKey);
		}

		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		Author result = null;
		try {
			if(!hasConnection) {
				connection = ConnectionManager.getConnection();
			}
			preparedStatement = connection.prepareStatement(statement);
			ConnectionManager.setVarchar(preparedStatement, 1, txtIdAuthor);

			resultSet = preparedStatement.executeQuery();
			result = uniqueResult(resultSet);
			ConnectionManager.closeAll(resultSet, preparedStatement);
		} catch (SQLException ex) {
			throw new SQLException("SQL exception in statement: " + statement, ex);
		} catch (H2ZeroFinderException h2zfex) {
			throw new H2ZeroFinderException(h2zfex.getMessage() + "  Additionally, the parameters were "  + "[txtIdAuthor:" + txtIdAuthor + "].");
		} finally {
			if(hasConnection) {
				ConnectionManager.closeAll(resultSet, preparedStatement, null);
			} else {
				ConnectionManager.closeAll(resultSet, preparedStatement, connection);
			}
		}


		if(null == result) {
			throw new H2ZeroFinderException("Could not find result.");
		}
		return(result);
	}

	public static Author findByTxtIdAuthor(Connection connection, String txtIdAuthor) throws H2ZeroFinderException, SQLException {
		return(findByTxtIdAuthor(connection, txtIdAuthor, null, null));
	}

	public static Author findByTxtIdAuthor(String txtIdAuthor, Integer limit, Integer offset) throws H2ZeroFinderException, SQLException {
		return(findByTxtIdAuthor(null, txtIdAuthor, limit, offset));
	}

	public static Author findByTxtIdAuthor(String txtIdAuthor) throws H2ZeroFinderException, SQLException {
		return(findByTxtIdAuthor(null, txtIdAuthor, null, null));
	}

	// silent connection, params..., limit, offset
	public static Author findByTxtIdAuthorSilent(Connection connection, String txtIdAuthor, Integer limit, Integer offset) {
		try {
			return(findByTxtIdAuthor(connection, txtIdAuthor, limit, offset));
		} catch(H2ZeroFinderException h2zfex) {
			if(LOGGER.isWarnEnabled()) {
				LOGGER.warn("H2ZeroFinderException findByTxtIdAuthorSilent(connection: " + connection + ", " + txtIdAuthor + ", limit: " + limit + ", offset: " + offset + "): " + h2zfex.getMessage());
				if(LOGGER.isDebugEnabled()) {
					h2zfex.printStackTrace();
				}
			}
			return(null);
		} catch(SQLException sqlex) {
			if(LOGGER.isWarnEnabled()) {
				LOGGER.warn("SQLException findByTxtIdAuthorSilent(connection: " + connection + ", " + txtIdAuthor + ", limit: " + limit + ", offset: " + offset + "): " + sqlex.getMessage());
				if(LOGGER.isDebugEnabled()) {
					sqlex.printStackTrace();
				}
			}
			return(null);
		}
	}

	// silent connection, params...
	public static Author findByTxtIdAuthorSilent(Connection connection, String txtIdAuthor) {
		return(findByTxtIdAuthorSilent(connection, txtIdAuthor, null, null));
	}

	// silent params..., limit, offset
	public static Author findByTxtIdAuthorSilent(String txtIdAuthor, Integer limit, Integer offset) {
		return(findByTxtIdAuthorSilent(null, txtIdAuthor, limit, offset));
	}

	public static Author findByTxtIdAuthorSilent(String txtIdAuthor) {
		return(findByTxtIdAuthorSilent(null, txtIdAuthor, null, null));
	}

	/**
	 * findInStatus 
	 * <p>
	 * (This finder was generated through the 'finders' JSON key)
	 * <p>
	 * Note that if a limit and offset are passed through, then the generated statement 
	 * will be cached for further use
	 * 
	 * @param connection - the connection to the database
	 * @param idAuthorStatusList - maps to the id_author_status field
	 * @param limit - The maximum number of rows to return
	 * @param offset - The row offset to start with
	 * 
	 * @return the list of Author results found
	 * 
	 * @throws H2ZeroFinderException if no results could be found
	 * @throws SQLException if there was an error in the SQL statement
	 */
	public static List<Author> findInStatus(Connection connection, List<Long> idAuthorStatusList, Integer limit, Integer offset) throws H2ZeroFinderException, SQLException {
		boolean hasConnection = (null != connection);
		String statement = null;

		// first find the statement that we want - or cache it if it doesn't exist

		String cacheKey = limit + ":" + offset + ":" + idAuthorStatusList.size() + ":" ;
		if(!findInStatus_limit_statement_cache.containsKey(cacheKey)) {
			// place the cacheKey in the cache for later use

			String preparedStatementTemp = SQL_FIND_IN_STATUS;
			StringBuilder whereFieldStringBuilder = null;
			whereFieldStringBuilder = new StringBuilder();
			for(int i = 0; i < idAuthorStatusList.size(); i++) {
				if(i > 0) {
					whereFieldStringBuilder.append(", ");
				}
				whereFieldStringBuilder.append("?");
			}
			preparedStatementTemp = preparedStatementTemp.replaceFirst("\\.\\.\\.", whereFieldStringBuilder.toString());
			StringBuilder stringBuilder = new StringBuilder(preparedStatementTemp);

			if(null != limit) {
				stringBuilder.append(" limit ");
				stringBuilder.append(limit);
				if(null != offset) {
					stringBuilder.append(" offset ");
					stringBuilder.append(offset);
				}
			}

			statement = stringBuilder.toString();
			findInStatus_limit_statement_cache.put(cacheKey, statement);
		} else {
			statement = findInStatus_limit_statement_cache.get(cacheKey);
		}

		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		List<Author> results = null;
		try {
			if(!hasConnection) {
				connection = ConnectionManager.getConnection();
			}
			preparedStatement = connection.prepareStatement(statement);
			int i = 1;
			for (Long idAuthorStatusIn : idAuthorStatusList) {
				ConnectionManager.setBigint(preparedStatement, i, idAuthorStatusIn);
				i++;
			}

			resultSet = preparedStatement.executeQuery();
			results = list(resultSet);
		} catch (SQLException ex) {
			throw new SQLException("SQL exception in statement: " + statement, ex);
		} finally {
			if(hasConnection) {
				ConnectionManager.closeAll(resultSet, preparedStatement, null);
			} else {
				ConnectionManager.closeAll(resultSet, preparedStatement, connection);
			}
		}


		if(results.size() == 0) {
			throw new H2ZeroFinderException("Could not find result.");
		}
		return(results);
	}

	public static List<Author> findInStatus(Connection connection, List<Long> idAuthorStatusList) throws H2ZeroFinderException, SQLException {
		return(findInStatus(connection, idAuthorStatusList, null, null));
	}

	public static List<Author> findInStatus(List<Long> idAuthorStatusList, Integer limit, Integer offset) throws H2ZeroFinderException, SQLException {
		return(findInStatus(null, idAuthorStatusList, limit, offset));
	}

	public static List<Author> findInStatus(List<Long> idAuthorStatusList) throws H2ZeroFinderException, SQLException {
		return(findInStatus(null, idAuthorStatusList, null, null));
	}

	// silent connection, params..., limit, offset
	public static List<Author> findInStatusSilent(Connection connection, List<Long> idAuthorStatusList, Integer limit, Integer offset) {
		try {
			return(findInStatus(connection, idAuthorStatusList, limit, offset));
		} catch(H2ZeroFinderException h2zfex) {
			if(LOGGER.isWarnEnabled()) {
				LOGGER.warn("H2ZeroFinderException findInStatusSilent(connection: " + connection + ", " + idAuthorStatusList + ", limit: " + limit + ", offset: " + offset + "): " + h2zfex.getMessage());
				if(LOGGER.isDebugEnabled()) {
					h2zfex.printStackTrace();
				}
			}
			return(new ArrayList<Author>());
		} catch(SQLException sqlex) {
			if(LOGGER.isWarnEnabled()) {
				LOGGER.warn("SQLException findInStatusSilent(connection: " + connection + ", " + idAuthorStatusList + ", limit: " + limit + ", offset: " + offset + "): " + sqlex.getMessage());
				if(LOGGER.isDebugEnabled()) {
					sqlex.printStackTrace();
				}
			}
			return(new ArrayList<Author>());
		}
	}

	// silent connection, params...
	public static List<Author> findInStatusSilent(Connection connection, List<Long> idAuthorStatusList) {
		return(findInStatusSilent(connection, idAuthorStatusList, null, null));
	}

	// silent params..., limit, offset
	public static List<Author> findInStatusSilent(List<Long> idAuthorStatusList, Integer limit, Integer offset) {
		return(findInStatusSilent(null, idAuthorStatusList, limit, offset));
	}

	public static List<Author> findInStatusSilent(List<Long> idAuthorStatusList) {
		return(findInStatusSilent(null, idAuthorStatusList, null, null));
	}

	/**
	 * findAllToBeEvaluated 
	 * <p>
	 * (This finder was generated through the 'finders' JSON key)
	 * <p>
	 * Note that if a limit and offset are passed through, then the generated statement 
	 * will be cached for further use
	 * 
	 * @param connection - the connection to the database
	 * @param dtmStartedFollowing - maps to the dtm_started_following field
	 * @param limit - The maximum number of rows to return
	 * @param offset - The row offset to start with
	 * 
	 * @return the list of Author results found
	 * 
	 * @throws H2ZeroFinderException if no results could be found
	 * @throws SQLException if there was an error in the SQL statement
	 */
	public static List<Author> findAllToBeEvaluated(Connection connection, Timestamp dtmStartedFollowing, Integer limit, Integer offset) throws H2ZeroFinderException, SQLException {
		boolean hasConnection = (null != connection);
		String statement = null;

		// first find the statement that we want - or cache it if it doesn't exist

		String cacheKey = limit + ":" + offset;
		if(!findAllToBeEvaluated_limit_statement_cache.containsKey(cacheKey)) {
			// place the cacheKey in the cache for later use

			StringBuilder stringBuilder = new StringBuilder(SQL_FIND_ALL_TO_BE_EVALUATED);

			if(null != limit) {
				stringBuilder.append(" limit ");
				stringBuilder.append(limit);
				if(null != offset) {
					stringBuilder.append(" offset ");
					stringBuilder.append(offset);
				}
			}

			statement = stringBuilder.toString();
			findAllToBeEvaluated_limit_statement_cache.put(cacheKey, statement);
		} else {
			statement = findAllToBeEvaluated_limit_statement_cache.get(cacheKey);
		}

		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		List<Author> results = null;
		try {
			if(!hasConnection) {
				connection = ConnectionManager.getConnection();
			}
			preparedStatement = connection.prepareStatement(statement);
			ConnectionManager.setDatetime(preparedStatement, 1, dtmStartedFollowing);

			resultSet = preparedStatement.executeQuery();
			results = list(resultSet);
		} catch (SQLException ex) {
			throw new SQLException("SQL exception in statement: " + statement, ex);
		} finally {
			if(hasConnection) {
				ConnectionManager.closeAll(resultSet, preparedStatement, null);
			} else {
				ConnectionManager.closeAll(resultSet, preparedStatement, connection);
			}
		}


		if(results.size() == 0) {
			throw new H2ZeroFinderException("Could not find result.");
		}
		return(results);
	}

	public static List<Author> findAllToBeEvaluated(Connection connection, Timestamp dtmStartedFollowing) throws H2ZeroFinderException, SQLException {
		return(findAllToBeEvaluated(connection, dtmStartedFollowing, null, null));
	}

	public static List<Author> findAllToBeEvaluated(Timestamp dtmStartedFollowing, Integer limit, Integer offset) throws H2ZeroFinderException, SQLException {
		return(findAllToBeEvaluated(null, dtmStartedFollowing, limit, offset));
	}

	public static List<Author> findAllToBeEvaluated(Timestamp dtmStartedFollowing) throws H2ZeroFinderException, SQLException {
		return(findAllToBeEvaluated(null, dtmStartedFollowing, null, null));
	}

	// silent connection, params..., limit, offset
	public static List<Author> findAllToBeEvaluatedSilent(Connection connection, Timestamp dtmStartedFollowing, Integer limit, Integer offset) {
		try {
			return(findAllToBeEvaluated(connection, dtmStartedFollowing, limit, offset));
		} catch(H2ZeroFinderException h2zfex) {
			if(LOGGER.isWarnEnabled()) {
				LOGGER.warn("H2ZeroFinderException findAllToBeEvaluatedSilent(connection: " + connection + ", " + dtmStartedFollowing + ", limit: " + limit + ", offset: " + offset + "): " + h2zfex.getMessage());
				if(LOGGER.isDebugEnabled()) {
					h2zfex.printStackTrace();
				}
			}
			return(new ArrayList<Author>());
		} catch(SQLException sqlex) {
			if(LOGGER.isWarnEnabled()) {
				LOGGER.warn("SQLException findAllToBeEvaluatedSilent(connection: " + connection + ", " + dtmStartedFollowing + ", limit: " + limit + ", offset: " + offset + "): " + sqlex.getMessage());
				if(LOGGER.isDebugEnabled()) {
					sqlex.printStackTrace();
				}
			}
			return(new ArrayList<Author>());
		}
	}

	// silent connection, params...
	public static List<Author> findAllToBeEvaluatedSilent(Connection connection, Timestamp dtmStartedFollowing) {
		return(findAllToBeEvaluatedSilent(connection, dtmStartedFollowing, null, null));
	}

	// silent params..., limit, offset
	public static List<Author> findAllToBeEvaluatedSilent(Timestamp dtmStartedFollowing, Integer limit, Integer offset) {
		return(findAllToBeEvaluatedSilent(null, dtmStartedFollowing, limit, offset));
	}

	public static List<Author> findAllToBeEvaluatedSilent(Timestamp dtmStartedFollowing) {
		return(findAllToBeEvaluatedSilent(null, dtmStartedFollowing, null, null));
	}

	/**
	 * findFirstToBeEvaluated 
	 * <p>
	 * (This finder was generated through the 'finders' JSON key)
	 * <p>
	 * Note that if a limit and offset are passed through, then the generated statement 
	 * will be cached for further use
	 * 
	 * @param connection - the connection to the database
	 * @param dtmStartedFollowing - maps to the dtm_started_following field
	 * @param limit - The maximum number of rows to return
	 * @param offset - The row offset to start with
	 * 
	 * @return the unique result of Author found
	 * 
	 * @throws H2ZeroFinderException if no results could be found
	 * @throws SQLException if there was an error in the SQL statement
	 */
	public static Author findFirstToBeEvaluated(Connection connection, Timestamp dtmStartedFollowing, Integer limit, Integer offset) throws H2ZeroFinderException, SQLException {
		boolean hasConnection = (null != connection);
		String statement = null;

		// first find the statement that we want - or cache it if it doesn't exist

		String cacheKey = limit + ":" + offset;
		if(!findFirstToBeEvaluated_limit_statement_cache.containsKey(cacheKey)) {
			// place the cacheKey in the cache for later use

			StringBuilder stringBuilder = new StringBuilder(SQL_FIND_FIRST_TO_BE_EVALUATED);

			if(null != limit) {
				stringBuilder.append(" limit ");
				stringBuilder.append(limit);
				if(null != offset) {
					stringBuilder.append(" offset ");
					stringBuilder.append(offset);
				}
			}

			statement = stringBuilder.toString();
			findFirstToBeEvaluated_limit_statement_cache.put(cacheKey, statement);
		} else {
			statement = findFirstToBeEvaluated_limit_statement_cache.get(cacheKey);
		}

		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		Author result = null;
		try {
			if(!hasConnection) {
				connection = ConnectionManager.getConnection();
			}
			preparedStatement = connection.prepareStatement(statement);
			ConnectionManager.setDatetime(preparedStatement, 1, dtmStartedFollowing);

			resultSet = preparedStatement.executeQuery();
			result = uniqueResult(resultSet);
			ConnectionManager.closeAll(resultSet, preparedStatement);
		} catch (SQLException ex) {
			throw new SQLException("SQL exception in statement: " + statement, ex);
		} catch (H2ZeroFinderException h2zfex) {
			throw new H2ZeroFinderException(h2zfex.getMessage() + "  Additionally, the parameters were "  + "[dtmStartedFollowing:" + dtmStartedFollowing + "].");
		} finally {
			if(hasConnection) {
				ConnectionManager.closeAll(resultSet, preparedStatement, null);
			} else {
				ConnectionManager.closeAll(resultSet, preparedStatement, connection);
			}
		}


		if(null == result) {
			throw new H2ZeroFinderException("Could not find result.");
		}
		return(result);
	}

	public static Author findFirstToBeEvaluated(Connection connection, Timestamp dtmStartedFollowing) throws H2ZeroFinderException, SQLException {
		return(findFirstToBeEvaluated(connection, dtmStartedFollowing, null, null));
	}

	public static Author findFirstToBeEvaluated(Timestamp dtmStartedFollowing, Integer limit, Integer offset) throws H2ZeroFinderException, SQLException {
		return(findFirstToBeEvaluated(null, dtmStartedFollowing, limit, offset));
	}

	public static Author findFirstToBeEvaluated(Timestamp dtmStartedFollowing) throws H2ZeroFinderException, SQLException {
		return(findFirstToBeEvaluated(null, dtmStartedFollowing, null, null));
	}

	// silent connection, params..., limit, offset
	public static Author findFirstToBeEvaluatedSilent(Connection connection, Timestamp dtmStartedFollowing, Integer limit, Integer offset) {
		try {
			return(findFirstToBeEvaluated(connection, dtmStartedFollowing, limit, offset));
		} catch(H2ZeroFinderException h2zfex) {
			if(LOGGER.isWarnEnabled()) {
				LOGGER.warn("H2ZeroFinderException findFirstToBeEvaluatedSilent(connection: " + connection + ", " + dtmStartedFollowing + ", limit: " + limit + ", offset: " + offset + "): " + h2zfex.getMessage());
				if(LOGGER.isDebugEnabled()) {
					h2zfex.printStackTrace();
				}
			}
			return(null);
		} catch(SQLException sqlex) {
			if(LOGGER.isWarnEnabled()) {
				LOGGER.warn("SQLException findFirstToBeEvaluatedSilent(connection: " + connection + ", " + dtmStartedFollowing + ", limit: " + limit + ", offset: " + offset + "): " + sqlex.getMessage());
				if(LOGGER.isDebugEnabled()) {
					sqlex.printStackTrace();
				}
			}
			return(null);
		}
	}

	// silent connection, params...
	public static Author findFirstToBeEvaluatedSilent(Connection connection, Timestamp dtmStartedFollowing) {
		return(findFirstToBeEvaluatedSilent(connection, dtmStartedFollowing, null, null));
	}

	// silent params..., limit, offset
	public static Author findFirstToBeEvaluatedSilent(Timestamp dtmStartedFollowing, Integer limit, Integer offset) {
		return(findFirstToBeEvaluatedSilent(null, dtmStartedFollowing, limit, offset));
	}

	public static Author findFirstToBeEvaluatedSilent(Timestamp dtmStartedFollowing) {
		return(findFirstToBeEvaluatedSilent(null, dtmStartedFollowing, null, null));
	}

	/**
	 * findLimitedToBeEvaluated 
	 * <p>
	 * (This finder was generated through the 'finders' JSON key)
	 * <p>
	 * Note that if a limit and offset are passed through, then the generated statement 
	 * will be cached for further use
	 * 
	 * @param connection - the connection to the database
	 * @param dtmStartedFollowing - maps to the dtm_started_following field
	 * @param limit - The maximum number of rows to return
	 * @param offset - The row offset to start with
	 * 
	 * @return the list of Author results found
	 * 
	 * @throws H2ZeroFinderException if no results could be found
	 * @throws SQLException if there was an error in the SQL statement
	 */
	public static List<Author> findLimitedToBeEvaluated(Connection connection, Timestamp dtmStartedFollowing, Integer limit, Integer offset) throws H2ZeroFinderException, SQLException {
		boolean hasConnection = (null != connection);
		String statement = null;

		// first find the statement that we want - or cache it if it doesn't exist

		String cacheKey = limit + ":" + offset;
		if(!findLimitedToBeEvaluated_limit_statement_cache.containsKey(cacheKey)) {
			// place the cacheKey in the cache for later use

			StringBuilder stringBuilder = new StringBuilder(SQL_FIND_LIMITED_TO_BE_EVALUATED);

			if(null != limit) {
				stringBuilder.append(" limit ");
				stringBuilder.append(limit);
				if(null != offset) {
					stringBuilder.append(" offset ");
					stringBuilder.append(offset);
				}
			}

			statement = stringBuilder.toString();
			findLimitedToBeEvaluated_limit_statement_cache.put(cacheKey, statement);
		} else {
			statement = findLimitedToBeEvaluated_limit_statement_cache.get(cacheKey);
		}

		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		List<Author> results = null;
		try {
			if(!hasConnection) {
				connection = ConnectionManager.getConnection();
			}
			preparedStatement = connection.prepareStatement(statement);
			ConnectionManager.setDatetime(preparedStatement, 1, dtmStartedFollowing);

			resultSet = preparedStatement.executeQuery();
			results = list(resultSet);
		} catch (SQLException ex) {
			throw new SQLException("SQL exception in statement: " + statement, ex);
		} finally {
			if(hasConnection) {
				ConnectionManager.closeAll(resultSet, preparedStatement, null);
			} else {
				ConnectionManager.closeAll(resultSet, preparedStatement, connection);
			}
		}


		if(results.size() == 0) {
			throw new H2ZeroFinderException("Could not find result.");
		}
		return(results);
	}

	public static List<Author> findLimitedToBeEvaluated(Connection connection, Timestamp dtmStartedFollowing) throws H2ZeroFinderException, SQLException {
		return(findLimitedToBeEvaluated(connection, dtmStartedFollowing, null, null));
	}

	public static List<Author> findLimitedToBeEvaluated(Timestamp dtmStartedFollowing, Integer limit, Integer offset) throws H2ZeroFinderException, SQLException {
		return(findLimitedToBeEvaluated(null, dtmStartedFollowing, limit, offset));
	}

	public static List<Author> findLimitedToBeEvaluated(Timestamp dtmStartedFollowing) throws H2ZeroFinderException, SQLException {
		return(findLimitedToBeEvaluated(null, dtmStartedFollowing, null, null));
	}

	// silent connection, params..., limit, offset
	public static List<Author> findLimitedToBeEvaluatedSilent(Connection connection, Timestamp dtmStartedFollowing, Integer limit, Integer offset) {
		try {
			return(findLimitedToBeEvaluated(connection, dtmStartedFollowing, limit, offset));
		} catch(H2ZeroFinderException h2zfex) {
			if(LOGGER.isWarnEnabled()) {
				LOGGER.warn("H2ZeroFinderException findLimitedToBeEvaluatedSilent(connection: " + connection + ", " + dtmStartedFollowing + ", limit: " + limit + ", offset: " + offset + "): " + h2zfex.getMessage());
				if(LOGGER.isDebugEnabled()) {
					h2zfex.printStackTrace();
				}
			}
			return(new ArrayList<Author>());
		} catch(SQLException sqlex) {
			if(LOGGER.isWarnEnabled()) {
				LOGGER.warn("SQLException findLimitedToBeEvaluatedSilent(connection: " + connection + ", " + dtmStartedFollowing + ", limit: " + limit + ", offset: " + offset + "): " + sqlex.getMessage());
				if(LOGGER.isDebugEnabled()) {
					sqlex.printStackTrace();
				}
			}
			return(new ArrayList<Author>());
		}
	}

	// silent connection, params...
	public static List<Author> findLimitedToBeEvaluatedSilent(Connection connection, Timestamp dtmStartedFollowing) {
		return(findLimitedToBeEvaluatedSilent(connection, dtmStartedFollowing, null, null));
	}

	// silent params..., limit, offset
	public static List<Author> findLimitedToBeEvaluatedSilent(Timestamp dtmStartedFollowing, Integer limit, Integer offset) {
		return(findLimitedToBeEvaluatedSilent(null, dtmStartedFollowing, limit, offset));
	}

	public static List<Author> findLimitedToBeEvaluatedSilent(Timestamp dtmStartedFollowing) {
		return(findLimitedToBeEvaluatedSilent(null, dtmStartedFollowing, null, null));
	}

	/**
	 * findInNumber 
	 * <p>
	 * (This finder was generated through the 'finders' JSON key)
	 * <p>
	 * Note that if a limit and offset are passed through, then the generated statement 
	 * will be cached for further use
	 * 
	 * @param connection - the connection to the database
	 * @param flIsUpdating - maps to the fl_is_updating field
	 * @param flIsUpdatingList - maps to the fl_is_updating field
	 * @param dtmStartedFollowingList - maps to the dtm_started_following field
	 * @param flIsUpdatingOne - maps to the fl_is_updating field
	 * @param flIsUpdatingTwo - maps to the fl_is_updating field
	 * @param limit - The maximum number of rows to return
	 * @param offset - The row offset to start with
	 * 
	 * @return the list of Author results found
	 * 
	 * @throws H2ZeroFinderException if no results could be found
	 * @throws SQLException if there was an error in the SQL statement
	 */
	public static List<Author> findInNumber(Connection connection, Boolean flIsUpdating, List<Boolean> flIsUpdatingList, List<Timestamp> dtmStartedFollowingList, Boolean flIsUpdatingOne, Boolean flIsUpdatingTwo, Integer limit, Integer offset) throws H2ZeroFinderException, SQLException {
		boolean hasConnection = (null != connection);
		String statement = null;

		// first find the statement that we want - or cache it if it doesn't exist

		String cacheKey = limit + ":" + offset + ":" + flIsUpdatingList.size() + ":"  + dtmStartedFollowingList.size() + ":" ;
		if(!findInNumber_limit_statement_cache.containsKey(cacheKey)) {
			// place the cacheKey in the cache for later use

			String preparedStatementTemp = SQL_FIND_IN_NUMBER;
			StringBuilder whereFieldStringBuilder = null;
			whereFieldStringBuilder = new StringBuilder();
			for(int i = 0; i < flIsUpdatingList.size(); i++) {
				if(i > 0) {
					whereFieldStringBuilder.append(", ");
				}
				whereFieldStringBuilder.append("?");
			}
			preparedStatementTemp = preparedStatementTemp.replaceFirst("\\.\\.\\.", whereFieldStringBuilder.toString());
			whereFieldStringBuilder = new StringBuilder();
			for(int i = 0; i < dtmStartedFollowingList.size(); i++) {
				if(i > 0) {
					whereFieldStringBuilder.append(", ");
				}
				whereFieldStringBuilder.append("?");
			}
			preparedStatementTemp = preparedStatementTemp.replaceFirst("\\.\\.\\.", whereFieldStringBuilder.toString());
			StringBuilder stringBuilder = new StringBuilder(preparedStatementTemp);

			if(null != limit) {
				stringBuilder.append(" limit ");
				stringBuilder.append(limit);
				if(null != offset) {
					stringBuilder.append(" offset ");
					stringBuilder.append(offset);
				}
			}

			statement = stringBuilder.toString();
			findInNumber_limit_statement_cache.put(cacheKey, statement);
		} else {
			statement = findInNumber_limit_statement_cache.get(cacheKey);
		}

		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		List<Author> results = null;
		try {
			if(!hasConnection) {
				connection = ConnectionManager.getConnection();
			}
			preparedStatement = connection.prepareStatement(statement);
			int i = 1;
			ConnectionManager.setBoolean(preparedStatement, i, flIsUpdating);
			i++;
			for (Boolean flIsUpdatingIn : flIsUpdatingList) {
				ConnectionManager.setBoolean(preparedStatement, i, flIsUpdatingIn);
				i++;
			}
			for (Timestamp dtmStartedFollowingIn : dtmStartedFollowingList) {
				ConnectionManager.setDatetime(preparedStatement, i, dtmStartedFollowingIn);
				i++;
			}
			ConnectionManager.setBoolean(preparedStatement, i, flIsUpdatingOne);
			i++;
			ConnectionManager.setBoolean(preparedStatement, i, flIsUpdatingTwo);
			i++;

			resultSet = preparedStatement.executeQuery();
			results = list(resultSet);
		} catch (SQLException ex) {
			throw new SQLException("SQL exception in statement: " + statement, ex);
		} finally {
			if(hasConnection) {
				ConnectionManager.closeAll(resultSet, preparedStatement, null);
			} else {
				ConnectionManager.closeAll(resultSet, preparedStatement, connection);
			}
		}


		if(results.size() == 0) {
			throw new H2ZeroFinderException("Could not find result.");
		}
		return(results);
	}

	public static List<Author> findInNumber(Connection connection, Boolean flIsUpdating, List<Boolean> flIsUpdatingList, List<Timestamp> dtmStartedFollowingList, Boolean flIsUpdatingOne, Boolean flIsUpdatingTwo) throws H2ZeroFinderException, SQLException {
		return(findInNumber(connection, flIsUpdating, flIsUpdatingList, dtmStartedFollowingList, flIsUpdatingOne, flIsUpdatingTwo, null, null));
	}

	public static List<Author> findInNumber(Boolean flIsUpdating, List<Boolean> flIsUpdatingList, List<Timestamp> dtmStartedFollowingList, Boolean flIsUpdatingOne, Boolean flIsUpdatingTwo, Integer limit, Integer offset) throws H2ZeroFinderException, SQLException {
		return(findInNumber(null, flIsUpdating, flIsUpdatingList, dtmStartedFollowingList, flIsUpdatingOne, flIsUpdatingTwo, limit, offset));
	}

	public static List<Author> findInNumber(Boolean flIsUpdating, List<Boolean> flIsUpdatingList, List<Timestamp> dtmStartedFollowingList, Boolean flIsUpdatingOne, Boolean flIsUpdatingTwo) throws H2ZeroFinderException, SQLException {
		return(findInNumber(null, flIsUpdating, flIsUpdatingList, dtmStartedFollowingList, flIsUpdatingOne, flIsUpdatingTwo, null, null));
	}

	// silent connection, params..., limit, offset
	public static List<Author> findInNumberSilent(Connection connection, Boolean flIsUpdating, List<Boolean> flIsUpdatingList, List<Timestamp> dtmStartedFollowingList, Boolean flIsUpdatingOne, Boolean flIsUpdatingTwo, Integer limit, Integer offset) {
		try {
			return(findInNumber(connection, flIsUpdating, flIsUpdatingList, dtmStartedFollowingList, flIsUpdatingOne, flIsUpdatingTwo, limit, offset));
		} catch(H2ZeroFinderException h2zfex) {
			if(LOGGER.isWarnEnabled()) {
				LOGGER.warn("H2ZeroFinderException findInNumberSilent(connection: " + connection + ", " + flIsUpdating + ", " + flIsUpdatingList + ", " + dtmStartedFollowingList + ", " + flIsUpdatingOne + ", " + flIsUpdatingTwo + ", limit: " + limit + ", offset: " + offset + "): " + h2zfex.getMessage());
				if(LOGGER.isDebugEnabled()) {
					h2zfex.printStackTrace();
				}
			}
			return(new ArrayList<Author>());
		} catch(SQLException sqlex) {
			if(LOGGER.isWarnEnabled()) {
				LOGGER.warn("SQLException findInNumberSilent(connection: " + connection + ", " + flIsUpdating + ", " + flIsUpdatingList + ", " + dtmStartedFollowingList + ", " + flIsUpdatingOne + ", " + flIsUpdatingTwo + ", limit: " + limit + ", offset: " + offset + "): " + sqlex.getMessage());
				if(LOGGER.isDebugEnabled()) {
					sqlex.printStackTrace();
				}
			}
			return(new ArrayList<Author>());
		}
	}

	// silent connection, params...
	public static List<Author> findInNumberSilent(Connection connection, Boolean flIsUpdating, List<Boolean> flIsUpdatingList, List<Timestamp> dtmStartedFollowingList, Boolean flIsUpdatingOne, Boolean flIsUpdatingTwo) {
		return(findInNumberSilent(connection, flIsUpdating, flIsUpdatingList, dtmStartedFollowingList, flIsUpdatingOne, flIsUpdatingTwo, null, null));
	}

	// silent params..., limit, offset
	public static List<Author> findInNumberSilent(Boolean flIsUpdating, List<Boolean> flIsUpdatingList, List<Timestamp> dtmStartedFollowingList, Boolean flIsUpdatingOne, Boolean flIsUpdatingTwo, Integer limit, Integer offset) {
		return(findInNumberSilent(null, flIsUpdating, flIsUpdatingList, dtmStartedFollowingList, flIsUpdatingOne, flIsUpdatingTwo, limit, offset));
	}

	public static List<Author> findInNumberSilent(Boolean flIsUpdating, List<Boolean> flIsUpdatingList, List<Timestamp> dtmStartedFollowingList, Boolean flIsUpdatingOne, Boolean flIsUpdatingTwo) {
		return(findInNumberSilent(null, flIsUpdating, flIsUpdatingList, dtmStartedFollowingList, flIsUpdatingOne, flIsUpdatingTwo, null, null));
	}

	/**
	 * Return a unique result for the query - in effect just the first result of
	 * query.  If there is a second result (i.e. the query did not return the 
	 * expected unique result), then an exception will be thrown.
	 * 
	 * @param resultSet The result set of the query
	 * 
	 * @return The Author that represents this result
	 * 
	 * @throws H2ZeroFinderException if no results were found or more than one result was found
	 * @throws SQLException if there was a problem retrieving the results
	 */
	private static Author uniqueResult(ResultSet resultSet) throws H2ZeroFinderException, SQLException {
		if(resultSet.next()) {
			// we have a result
			Long idAuthor = ConnectionManager.getNullableResultLong(resultSet, 1);
			Long idAuthorStatus = ConnectionManager.getNullableResultLong(resultSet, 2);
			String txtIdAuthor = ConnectionManager.getNullableResultString(resultSet, 3);
			String nmAuthor = ConnectionManager.getNullableResultString(resultSet, 4);
			String nmUsername = ConnectionManager.getNullableResultString(resultSet, 5);
			String txtBio = ConnectionManager.getNullableResultString(resultSet, 6);
			String txtUrlCacheImage = ConnectionManager.getNullableResultString(resultSet, 7);
			Long numFollowing = ConnectionManager.getNullableResultLong(resultSet, 8);
			Long numFollowers = ConnectionManager.getNullableResultLong(resultSet, 9);
			Timestamp dtmStartedFollowing = ConnectionManager.getNullableResultTimestamp(resultSet, 10);
			Boolean flIsUpdating = ConnectionManager.getNullableResultBoolean(resultSet, 11);
			Boolean flAuthorIsFollowingUser = ConnectionManager.getNullableResultBoolean(resultSet, 12);
			Boolean flAuthorIsFollowedByUser = ConnectionManager.getNullableResultBoolean(resultSet, 13);

			Author author = new Author(idAuthor, idAuthorStatus, txtIdAuthor, nmAuthor, nmUsername, txtBio, txtUrlCacheImage, numFollowing, numFollowers, dtmStartedFollowing, flIsUpdating, flAuthorIsFollowingUser, flAuthorIsFollowedByUser);

			if(resultSet.next()) {
				throw new H2ZeroFinderException("More than one result in resultset for unique finder.");
			} else {
				return(author);
			}
		} else {
			// could not get a result
			return(null);
		}
	}

	/**
	 * Return the results as a list of Author, this will be empty if
	 * none are found.
	 * 
	 * @param resultSet the results as a list of Author
	 * 
	 * @return the list of results
	 * 
	 * @throws SQLException if there was a problem retrieving the results
	 */
	private static List<Author> list(ResultSet resultSet) throws SQLException {
		List<Author> arrayList = new ArrayList<Author>();
		while(resultSet.next()) {
			arrayList.add(new Author(
					ConnectionManager.getNullableResultLong(resultSet, 1),
					ConnectionManager.getNullableResultLong(resultSet, 2),
					ConnectionManager.getNullableResultString(resultSet, 3),
					ConnectionManager.getNullableResultString(resultSet, 4),
					ConnectionManager.getNullableResultString(resultSet, 5),
					ConnectionManager.getNullableResultString(resultSet, 6),
					ConnectionManager.getNullableResultString(resultSet, 7),
					ConnectionManager.getNullableResultLong(resultSet, 8),
					ConnectionManager.getNullableResultLong(resultSet, 9),
					ConnectionManager.getNullableResultTimestamp(resultSet, 10),
					ConnectionManager.getNullableResultBoolean(resultSet, 11),
					ConnectionManager.getNullableResultBoolean(resultSet, 12),
					ConnectionManager.getNullableResultBoolean(resultSet, 13)));
		}
		return(arrayList);
	}

	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * 
	 * This is the start of the user defined select clause finders which are 
	 * generated through the "finders" JSON key, with a 'selectClause' 
	 * key on the finder.
	 * 
	 * All selectClause finders return a subset of the data from a row of the 
	 * database table (or tables if there is a join statement) as a generated
	 * bean
	 * 
	 * There are 9 defined finders on the author table, of those finders
	 * the following are the select clause finders:
	 * 
	 * 
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

}