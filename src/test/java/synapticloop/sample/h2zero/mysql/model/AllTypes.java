package synapticloop.sample.h2zero.mysql.model;

// - - - - thoughtfully generated by synapticloop h2zero - - - - 
//    with the use of synapticloop templar templating language
//                  (java-create-model.templar)

import org.json.JSONObject;
import synapticloop.h2zero.base.exception.H2ZeroFinderException;
import synapticloop.h2zero.base.exception.H2ZeroPrimaryKeyException;
import synapticloop.h2zero.base.manager.mysql.ConnectionManager;
import synapticloop.h2zero.base.model.ModelBaseHelper;
import synapticloop.h2zero.base.model.mysql.ModelBase;
import synapticloop.h2zero.base.validator.*;
import synapticloop.h2zero.base.validator.bean.ValidationBean;
import synapticloop.h2zero.util.XmlHelper;
import synapticloop.sample.h2zero.mysql.finder.AllTypesFinder;
import synapticloop.sample.h2zero.mysql.model.util.Constants;

import java.math.BigDecimal;
import java.sql.*;


/**
 * This is the model for the AllTypes which maps to the all_types database table
 * and contains the default CRUD methods.
  * 
 * @author synapticloop h2zero
 * 
 * <p>@see <a href="https://github.com/synapticloop/h2zero">Synapticloop h2zero GitHub repository</a></p>
 */
public class AllTypes extends ModelBase {
	// the binder is unused in code, but will generate compile problems if this 
	// class is no longer referenced in the h2zero file. Just a nicety for
	// removing dead code
	@SuppressWarnings("unused")
	private static final String BINDER = Constants.ALL_TYPES_BINDER;

	public static final String PRIMARY_KEY_FIELD = "id_all_types";  // the primary key - a convenience field

	private static final String SQL_INSERT = 
		"""
			insert into
			all_types (
				test_bigint,
				test_blob,
				test_bool,
				test_char,
				test_boolean,
				test_binary,
				test_varbinary,
				test_date,
				test_datetime,
				test_dec,
				test_decimal,
				test_double,
				test_float,
				test_int,
				test_integer,
				test_longtext,
				test_mediumblob,
				test_mediumint,
				test_mediumtext,
				test_numeric,
				test_smallint,
				test_time,
				test_text,
				test_timestamp,
				test_tinyint,
				test_tinytext,
				test_varchar,
				test_year
			) values (
				?,
				?,
				?,
				?,
				?,
				?,
				?,
				?,
				?,
				?,
				?,
				?,
				?,
				?,
				?,
				?,
				?,
				?,
				?,
				?,
				?,
				?,
				?,
				?,
				?,
				?,
				?,
				?
			)
		""";
	private static final String SQL_UPDATE = 
		"""
			update
				all_types
			set
				test_bigint = ?,
				test_blob = ?,
				test_bool = ?,
				test_char = ?,
				test_boolean = ?,
				test_binary = ?,
				test_varbinary = ?,
				test_date = ?,
				test_datetime = ?,
				test_dec = ?,
				test_decimal = ?,
				test_double = ?,
				test_float = ?,
				test_int = ?,
				test_integer = ?,
				test_longtext = ?,
				test_mediumblob = ?,
				test_mediumint = ?,
				test_mediumtext = ?,
				test_numeric = ?,
				test_smallint = ?,
				test_time = ?,
				test_text = ?,
				test_timestamp = ?,
				test_tinyint = ?,
				test_tinytext = ?,
				test_varchar = ?,
				test_year = ?
			where
		"""
			+ PRIMARY_KEY_FIELD + 
		"""
			= ?
		""";
	private static final String SQL_DELETE = "delete from all_types where " + PRIMARY_KEY_FIELD + " = ?";
	private static final String SQL_ENSURE = "select " + PRIMARY_KEY_FIELD + " from all_types where test_bigint = ? and test_blob = ? and test_bool = ? and test_char = ? and test_boolean = ? and test_binary = ? and test_varbinary = ? and test_date = ? and test_datetime = ? and test_dec = ? and test_decimal = ? and test_double = ? and test_float = ? and test_int = ? and test_integer = ? and test_longtext = ? and test_mediumblob = ? and test_mediumint = ? and test_mediumtext = ? and test_numeric = ? and test_smallint = ? and test_time = ? and test_text = ? and test_timestamp = ? and test_tinyint = ? and test_tinytext = ? and test_varchar = ? and test_year = ?";


// Static lookups for fields in the hit counter.
	public static final int HIT_TOTAL = 0;
	public static final int HIT_ID_ALL_TYPES = 1;
	public static final int HIT_TEST_BIGINT = 2;
	public static final int HIT_TEST_BLOB = 3;
	public static final int HIT_TEST_BOOL = 4;
	public static final int HIT_TEST_CHAR = 5;
	public static final int HIT_TEST_BOOLEAN = 6;
	public static final int HIT_TEST_BINARY = 7;
	public static final int HIT_TEST_VARBINARY = 8;
	public static final int HIT_TEST_DATE = 9;
	public static final int HIT_TEST_DATETIME = 10;
	public static final int HIT_TEST_DEC = 11;
	public static final int HIT_TEST_DECIMAL = 12;
	public static final int HIT_TEST_DOUBLE = 13;
	public static final int HIT_TEST_FLOAT = 14;
	public static final int HIT_TEST_INT = 15;
	public static final int HIT_TEST_INTEGER = 16;
	public static final int HIT_TEST_LONGTEXT = 17;
	public static final int HIT_TEST_MEDIUMBLOB = 18;
	public static final int HIT_TEST_MEDIUMINT = 19;
	public static final int HIT_TEST_MEDIUMTEXT = 20;
	public static final int HIT_TEST_NUMERIC = 21;
	public static final int HIT_TEST_SMALLINT = 22;
	public static final int HIT_TEST_TIME = 23;
	public static final int HIT_TEST_TEXT = 24;
	public static final int HIT_TEST_TIMESTAMP = 25;
	public static final int HIT_TEST_TINYINT = 26;
	public static final int HIT_TEST_TINYTEXT = 27;
	public static final int HIT_TEST_VARCHAR = 28;
	public static final int HIT_TEST_YEAR = 29;


	// the list of fields for the hit - starting with 'TOTAL'
	private static final String[] HIT_FIELDS = { "TOTAL", "id_all_types", "test_bigint", "test_blob", "test_bool", "test_char", "test_boolean", "test_binary", "test_varbinary", "test_date", "test_datetime", "test_dec", "test_decimal", "test_double", "test_float", "test_int", "test_integer", "test_longtext", "test_mediumblob", "test_mediumint", "test_mediumtext", "test_numeric", "test_smallint", "test_time", "test_text", "test_timestamp", "test_tinyint", "test_tinytext", "test_varchar", "test_year" };
	// the number of read-hits for a particular field
	private static final int[] HIT_COUNTS = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };


	private Long idAllTypes = null; // maps to the id_all_types field
	private Long testBigint = null; // maps to the test_bigint field
	private Blob testBlob = null; // maps to the test_blob field
	private Boolean testBool = null; // maps to the test_bool field
	private String testChar = null; // maps to the test_char field
	private Boolean testBoolean = null; // maps to the test_boolean field
	private String testBinary = null; // maps to the test_binary field
	private String testVarbinary = null; // maps to the test_varbinary field
	private Date testDate = null; // maps to the test_date field
	private Timestamp testDatetime = null; // maps to the test_datetime field
	private BigDecimal testDec = null; // maps to the test_dec field
	private BigDecimal testDecimal = null; // maps to the test_decimal field
	private Double testDouble = null; // maps to the test_double field
	private Float testFloat = null; // maps to the test_float field
	private Integer testInt = null; // maps to the test_int field
	private Integer testInteger = null; // maps to the test_integer field
	private String testLongtext = null; // maps to the test_longtext field
	private Blob testMediumblob = null; // maps to the test_mediumblob field
	private Integer testMediumint = null; // maps to the test_mediumint field
	private String testMediumtext = null; // maps to the test_mediumtext field
	private BigDecimal testNumeric = null; // maps to the test_numeric field
	private Short testSmallint = null; // maps to the test_smallint field
	private Time testTime = null; // maps to the test_time field
	private String testText = null; // maps to the test_text field
	private Timestamp testTimestamp = null; // maps to the test_timestamp field
	private Boolean testTinyint = null; // maps to the test_tinyint field
	private String testTinytext = null; // maps to the test_tinytext field
	private String testVarchar = null; // maps to the test_varchar field
	private Integer testYear = null; // maps to the test_year field

	public AllTypes(Long idAllTypes, Long testBigint, Blob testBlob, Boolean testBool, String testChar, Boolean testBoolean, String testBinary, String testVarbinary, Date testDate, Timestamp testDatetime, BigDecimal testDec, BigDecimal testDecimal, Double testDouble, Float testFloat, Integer testInt, Integer testInteger, String testLongtext, Blob testMediumblob, Integer testMediumint, String testMediumtext, BigDecimal testNumeric, Short testSmallint, Time testTime, String testText, Timestamp testTimestamp, Boolean testTinyint, String testTinytext, String testVarchar, Integer testYear) {
		this.idAllTypes = idAllTypes;
		this.testBigint = testBigint;
		this.testBlob = testBlob;
		this.testBool = testBool;
		this.testChar = testChar;
		this.testBoolean = testBoolean;
		this.testBinary = testBinary;
		this.testVarbinary = testVarbinary;
		this.testDate = testDate;
		this.testDatetime = testDatetime;
		this.testDec = testDec;
		this.testDecimal = testDecimal;
		this.testDouble = testDouble;
		this.testFloat = testFloat;
		this.testInt = testInt;
		this.testInteger = testInteger;
		this.testLongtext = testLongtext;
		this.testMediumblob = testMediumblob;
		this.testMediumint = testMediumint;
		this.testMediumtext = testMediumtext;
		this.testNumeric = testNumeric;
		this.testSmallint = testSmallint;
		this.testTime = testTime;
		this.testText = testText;
		this.testTimestamp = testTimestamp;
		this.testTinyint = testTinyint;
		this.testTinytext = testTinytext;
		this.testVarchar = testVarchar;
		this.testYear = testYear;
	}

	public AllTypes(Long idAllTypes) {
		this.idAllTypes = idAllTypes;
		this.testBigint = null;
		this.testBlob = null;
		this.testBool = null;
		this.testChar = null;
		this.testBoolean = null;
		this.testBinary = null;
		this.testVarbinary = null;
		this.testDate = null;
		this.testDatetime = null;
		this.testDec = null;
		this.testDecimal = null;
		this.testDouble = null;
		this.testFloat = null;
		this.testInt = null;
		this.testInteger = null;
		this.testLongtext = null;
		this.testMediumblob = null;
		this.testMediumint = null;
		this.testMediumtext = null;
		this.testNumeric = null;
		this.testSmallint = null;
		this.testTime = null;
		this.testText = null;
		this.testTimestamp = null;
		this.testTinyint = null;
		this.testTinytext = null;
		this.testVarchar = null;
		this.testYear = null;
	}

	/**
	 * Get a new AllTypes model, or set the fields on an existing
	 * AllTypes model.
	 * <p>
	 * If the passed in allTypes is null, then a new AllTypes
	 * will be created.  If not null, the fields will be updated on the passed in model.
	 * <p>
	 * <strong>NOTE:</strong> You will still need to persist this to the database
	 * with an <code>upsert()</code> call.
	 * 
	 * @param allTypes the model to check
	 * @param idAllTypes
	 * @param testBigint
	 * @param testBlob
	 * @param testBool
	 * @param testChar
	 * @param testBoolean
	 * @param testBinary
	 * @param testVarbinary
	 * @param testDate
	 * @param testDatetime
	 * @param testDec
	 * @param testDecimal
	 * @param testDouble
	 * @param testFloat
	 * @param testInt
	 * @param testInteger
	 * @param testLongtext
	 * @param testMediumblob
	 * @param testMediumint
	 * @param testMediumtext
	 * @param testNumeric
	 * @param testSmallint
	 * @param testTime
	 * @param testText
	 * @param testTimestamp
	 * @param testTinyint
	 * @param testTinytext
	 * @param testVarchar
	 * @param testYear
	 * 
	 * @return Either the existing allTypes with updated field values,
	 *   or a new AllTypes with the field values set.
	 */
	public static AllTypes getOrSet(AllTypes allTypes,Long idAllTypes, Long testBigint, Blob testBlob, Boolean testBool, String testChar, Boolean testBoolean, String testBinary, String testVarbinary, Date testDate, Timestamp testDatetime, BigDecimal testDec, BigDecimal testDecimal, Double testDouble, Float testFloat, Integer testInt, Integer testInteger, String testLongtext, Blob testMediumblob, Integer testMediumint, String testMediumtext, BigDecimal testNumeric, Short testSmallint, Time testTime, String testText, Timestamp testTimestamp, Boolean testTinyint, String testTinytext, String testVarchar, Integer testYear) {
		if(null == allTypes) {
			return (new AllTypes(idAllTypes, testBigint, testBlob, testBool, testChar, testBoolean, testBinary, testVarbinary, testDate, testDatetime, testDec, testDecimal, testDouble, testFloat, testInt, testInteger, testLongtext, testMediumblob, testMediumint, testMediumtext, testNumeric, testSmallint, testTime, testText, testTimestamp, testTinyint, testTinytext, testVarchar, testYear));
		} else {
			allTypes.setIdAllTypes(idAllTypes);
			allTypes.setTestBigint(testBigint);
			allTypes.setTestBlob(testBlob);
			allTypes.setTestBool(testBool);
			allTypes.setTestChar(testChar);
			allTypes.setTestBoolean(testBoolean);
			allTypes.setTestBinary(testBinary);
			allTypes.setTestVarbinary(testVarbinary);
			allTypes.setTestDate(testDate);
			allTypes.setTestDatetime(testDatetime);
			allTypes.setTestDec(testDec);
			allTypes.setTestDecimal(testDecimal);
			allTypes.setTestDouble(testDouble);
			allTypes.setTestFloat(testFloat);
			allTypes.setTestInt(testInt);
			allTypes.setTestInteger(testInteger);
			allTypes.setTestLongtext(testLongtext);
			allTypes.setTestMediumblob(testMediumblob);
			allTypes.setTestMediumint(testMediumint);
			allTypes.setTestMediumtext(testMediumtext);
			allTypes.setTestNumeric(testNumeric);
			allTypes.setTestSmallint(testSmallint);
			allTypes.setTestTime(testTime);
			allTypes.setTestText(testText);
			allTypes.setTestTimestamp(testTimestamp);
			allTypes.setTestTinyint(testTinyint);
			allTypes.setTestTinytext(testTinytext);
			allTypes.setTestVarchar(testVarchar);
			allTypes.setTestYear(testYear);

			return(allTypes);
		}
	}

	/**
	 * Get a new AllTypes model, or set the fields on an existing
	 * AllTypes model.
	 * <p>
	 * If the passed in allTypes is null, then a new AllTypes
	 * will be created.  If not null, the fields will be updated on the existing model.
	 * <p>
	 * <strong>NOTE:</strong> You will still need to persist this to the database
	 * with an <code>upsert()</code> call.
	 * 
	 * @param allTypes the model to check
	 * @param idAllTypes
	 * 
	 * @return Either the existing allTypes with updated field values,
	 *   or a new AllTypes with the field values set.
	 */
	public static AllTypes getOrSet(AllTypes allTypes,Long idAllTypes) {
		if(null == allTypes) {
			return (new AllTypes(idAllTypes));
		} else {
			allTypes.setIdAllTypes(idAllTypes);

			return(allTypes);
		}
	}

	@Override
	public boolean primaryKeySet() {
		return(null != idAllTypes);
	}


	@Override
	public void insert(Connection connection) throws SQLException, H2ZeroPrimaryKeyException {
		if(primaryKeySet()) {
			throw new H2ZeroPrimaryKeyException("Cannot insert all_types model when primary key is not null.");
		}

		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		try {
			// create this bean 
			preparedStatement = connection.prepareStatement(SQL_INSERT, Statement.RETURN_GENERATED_KEYS);
			ConnectionManager.setBigint(preparedStatement, 1, testBigint);
			ConnectionManager.setBlob(preparedStatement, 2, testBlob);
			ConnectionManager.setBool(preparedStatement, 3, testBool);
			ConnectionManager.setChar(preparedStatement, 4, testChar);
			ConnectionManager.setBoolean(preparedStatement, 5, testBoolean);
			ConnectionManager.setBinary(preparedStatement, 6, testBinary);
			ConnectionManager.setVarbinary(preparedStatement, 7, testVarbinary);
			ConnectionManager.setDate(preparedStatement, 8, testDate);
			ConnectionManager.setDatetime(preparedStatement, 9, testDatetime);
			ConnectionManager.setDec(preparedStatement, 10, testDec);
			ConnectionManager.setDecimal(preparedStatement, 11, testDecimal);
			ConnectionManager.setDouble(preparedStatement, 12, testDouble);
			ConnectionManager.setFloat(preparedStatement, 13, testFloat);
			ConnectionManager.setInt(preparedStatement, 14, testInt);
			ConnectionManager.setInteger(preparedStatement, 15, testInteger);
			ConnectionManager.setLongtext(preparedStatement, 16, testLongtext);
			ConnectionManager.setMediumblob(preparedStatement, 17, testMediumblob);
			ConnectionManager.setMediumint(preparedStatement, 18, testMediumint);
			ConnectionManager.setMediumtext(preparedStatement, 19, testMediumtext);
			ConnectionManager.setNumeric(preparedStatement, 20, testNumeric);
			ConnectionManager.setSmallint(preparedStatement, 21, testSmallint);
			ConnectionManager.setTime(preparedStatement, 22, testTime);
			ConnectionManager.setText(preparedStatement, 23, testText);
			ConnectionManager.setTimestamp(preparedStatement, 24, testTimestamp);
			ConnectionManager.setTinyint(preparedStatement, 25, testTinyint);
			ConnectionManager.setTinytext(preparedStatement, 26, testTinytext);
			ConnectionManager.setVarchar(preparedStatement, 27, testVarchar);
			ConnectionManager.setYear(preparedStatement, 28, testYear);
			preparedStatement.executeUpdate();
			resultSet = preparedStatement.getGeneratedKeys();
			if(resultSet.next()) {
				this.idAllTypes = resultSet.getLong(1);
			} else {
				throw new H2ZeroPrimaryKeyException("Could not get return value for primary key!");
			}
		} finally {
			ConnectionManager.closeAll(resultSet, preparedStatement);
		}
	}

	@Override
	public void ensure(Connection connection) throws SQLException, H2ZeroPrimaryKeyException {

		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		try {
			preparedStatement = connection.prepareStatement(SQL_ENSURE);
			ConnectionManager.setBigint(preparedStatement, 1, testBigint);
			ConnectionManager.setBlob(preparedStatement, 2, testBlob);
			ConnectionManager.setBool(preparedStatement, 3, testBool);
			ConnectionManager.setChar(preparedStatement, 4, testChar);
			ConnectionManager.setBoolean(preparedStatement, 5, testBoolean);
			ConnectionManager.setBinary(preparedStatement, 6, testBinary);
			ConnectionManager.setVarbinary(preparedStatement, 7, testVarbinary);
			ConnectionManager.setDate(preparedStatement, 8, testDate);
			ConnectionManager.setDatetime(preparedStatement, 9, testDatetime);
			ConnectionManager.setDec(preparedStatement, 10, testDec);
			ConnectionManager.setDecimal(preparedStatement, 11, testDecimal);
			ConnectionManager.setDouble(preparedStatement, 12, testDouble);
			ConnectionManager.setFloat(preparedStatement, 13, testFloat);
			ConnectionManager.setInt(preparedStatement, 14, testInt);
			ConnectionManager.setInteger(preparedStatement, 15, testInteger);
			ConnectionManager.setLongtext(preparedStatement, 16, testLongtext);
			ConnectionManager.setMediumblob(preparedStatement, 17, testMediumblob);
			ConnectionManager.setMediumint(preparedStatement, 18, testMediumint);
			ConnectionManager.setMediumtext(preparedStatement, 19, testMediumtext);
			ConnectionManager.setNumeric(preparedStatement, 20, testNumeric);
			ConnectionManager.setSmallint(preparedStatement, 21, testSmallint);
			ConnectionManager.setTime(preparedStatement, 22, testTime);
			ConnectionManager.setText(preparedStatement, 23, testText);
			ConnectionManager.setTimestamp(preparedStatement, 24, testTimestamp);
			ConnectionManager.setTinyint(preparedStatement, 25, testTinyint);
			ConnectionManager.setTinytext(preparedStatement, 26, testTinytext);
			ConnectionManager.setVarchar(preparedStatement, 27, testVarchar);
			ConnectionManager.setYear(preparedStatement, 28, testYear);
			resultSet = preparedStatement.executeQuery();
			if(resultSet.next()) {
				this.idAllTypes = resultSet.getLong(1);
			} else {
				// could not find the value - need to insert it - null is the primary key
				insert(connection);
			}
		} finally {
			ConnectionManager.closeAll(resultSet, preparedStatement);
		}
	}

	@Override
	public void update(Connection connection) throws SQLException, H2ZeroPrimaryKeyException {
		if(!primaryKeySet()) {
			throw new H2ZeroPrimaryKeyException("Cannot update bean when primary key is null.");
		}

		if(isDirty) {
			try (PreparedStatement preparedStatement = connection.prepareStatement(SQL_UPDATE)) {
				// update this bean, but only if dirty
				ConnectionManager.setBigint(preparedStatement, 1, testBigint);
				ConnectionManager.setBlob(preparedStatement, 2, testBlob);
				ConnectionManager.setBool(preparedStatement, 3, testBool);
				ConnectionManager.setChar(preparedStatement, 4, testChar);
				ConnectionManager.setBoolean(preparedStatement, 5, testBoolean);
				ConnectionManager.setBinary(preparedStatement, 6, testBinary);
				ConnectionManager.setVarbinary(preparedStatement, 7, testVarbinary);
				ConnectionManager.setDate(preparedStatement, 8, testDate);
				ConnectionManager.setDatetime(preparedStatement, 9, testDatetime);
				ConnectionManager.setDec(preparedStatement, 10, testDec);
				ConnectionManager.setDecimal(preparedStatement, 11, testDecimal);
				ConnectionManager.setDouble(preparedStatement, 12, testDouble);
				ConnectionManager.setFloat(preparedStatement, 13, testFloat);
				ConnectionManager.setInt(preparedStatement, 14, testInt);
				ConnectionManager.setInteger(preparedStatement, 15, testInteger);
				ConnectionManager.setLongtext(preparedStatement, 16, testLongtext);
				ConnectionManager.setMediumblob(preparedStatement, 17, testMediumblob);
				ConnectionManager.setMediumint(preparedStatement, 18, testMediumint);
				ConnectionManager.setMediumtext(preparedStatement, 19, testMediumtext);
				ConnectionManager.setNumeric(preparedStatement, 20, testNumeric);
				ConnectionManager.setSmallint(preparedStatement, 21, testSmallint);
				ConnectionManager.setTime(preparedStatement, 22, testTime);
				ConnectionManager.setText(preparedStatement, 23, testText);
				ConnectionManager.setTimestamp(preparedStatement, 24, testTimestamp);
				ConnectionManager.setTinyint(preparedStatement, 25, testTinyint);
				ConnectionManager.setTinytext(preparedStatement, 26, testTinytext);
				ConnectionManager.setVarchar(preparedStatement, 27, testVarchar);
				ConnectionManager.setYear(preparedStatement, 28, testYear);
				// now set the primary key
				preparedStatement.setLong(29, idAllTypes);
				preparedStatement.executeUpdate();
			} finally {
				isDirty = false;
			}
		}
	}

	@Override
	public void delete(Connection connection) throws SQLException, H2ZeroPrimaryKeyException {
		if(!primaryKeySet()) {
			throw new H2ZeroPrimaryKeyException("Cannot delete bean when primary key is null.");
		}
		try (PreparedStatement preparedStatement = connection.prepareStatement(SQL_DELETE)) {
			preparedStatement.setLong(1, idAllTypes);
			preparedStatement.executeUpdate();
		}
	}

	@Override
	public void refresh(Connection connection) throws SQLException, H2ZeroPrimaryKeyException, H2ZeroFinderException {
		if(!primaryKeySet()) {
			throw new H2ZeroPrimaryKeyException("Cannot refresh model 'AllTypes' when primary key is null.");
		}

		AllTypes allTypes = AllTypesFinder.findByPrimaryKeySilent(connection, this.idAllTypes);
		if(null == allTypes) {
			throw new H2ZeroFinderException("Could not find the model 'AllTypes' with primaryKey of " + getPrimaryKey());
		}
		this.idAllTypes = allTypes.getIdAllTypes();
		this.testBigint = allTypes.getTestBigint();
		this.testBlob = allTypes.getTestBlob();
		this.testBool = allTypes.getTestBool();
		this.testChar = allTypes.getTestChar();
		this.testBoolean = allTypes.getTestBoolean();
		this.testBinary = allTypes.getTestBinary();
		this.testVarbinary = allTypes.getTestVarbinary();
		this.testDate = allTypes.getTestDate();
		this.testDatetime = allTypes.getTestDatetime();
		this.testDec = allTypes.getTestDec();
		this.testDecimal = allTypes.getTestDecimal();
		this.testDouble = allTypes.getTestDouble();
		this.testFloat = allTypes.getTestFloat();
		this.testInt = allTypes.getTestInt();
		this.testInteger = allTypes.getTestInteger();
		this.testLongtext = allTypes.getTestLongtext();
		this.testMediumblob = allTypes.getTestMediumblob();
		this.testMediumint = allTypes.getTestMediumint();
		this.testMediumtext = allTypes.getTestMediumtext();
		this.testNumeric = allTypes.getTestNumeric();
		this.testSmallint = allTypes.getTestSmallint();
		this.testTime = allTypes.getTestTime();
		this.testText = allTypes.getTestText();
		this.testTimestamp = allTypes.getTestTimestamp();
		this.testTinyint = allTypes.getTestTinyint();
		this.testTinytext = allTypes.getTestTinytext();
		this.testVarchar = allTypes.getTestVarchar();
		this.testYear = allTypes.getTestYear();
	}

	public static String[] getHitFields() { return(HIT_FIELDS); }
	public static int[] getHitCounts() { return(HIT_COUNTS); }

	public static void updateHitCount(int offset) {
		HIT_COUNTS[0]++;
		HIT_COUNTS[offset]++;
	}

	/*
	 * Boring ol' getters and setters 
	 * 
	 * On setting any of these fields - the 'isDirty' flag will be set
	 * 
	 */

	public Long getPrimaryKey() { updateHitCount(1); return(this.idAllTypes); }
	public void setPrimaryKey(Long idAllTypes) { if(isDifferent(this.idAllTypes, idAllTypes)) { this.idAllTypes = idAllTypes;this.isDirty = true; }}
	public Long getIdAllTypes() { updateHitCount(1); return(this.idAllTypes); }
	public void setIdAllTypes(Long idAllTypes) { if(isDifferent(this.idAllTypes, idAllTypes)) { this.idAllTypes = idAllTypes;this.isDirty = true; }}
	public Long getTestBigint() { updateHitCount(2); return(this.testBigint); }
	public void setTestBigint(Long testBigint) { if(isDifferent(this.testBigint, testBigint)) { this.testBigint = testBigint;this.isDirty = true; }}
	public Blob getTestBlob() { updateHitCount(3); return(this.testBlob); }
	public void setTestBlob(Blob testBlob) { if(isDifferent(this.testBlob, testBlob)) { this.testBlob = testBlob;this.isDirty = true; }}
	public Boolean getTestBool() { updateHitCount(4); return(this.testBool); }
	public void setTestBool(Boolean testBool) { if(isDifferent(this.testBool, testBool)) { this.testBool = testBool;this.isDirty = true; }}
	public String getTestChar() { updateHitCount(5); return(this.testChar); }
	public void setTestChar(String testChar) { if(isDifferent(this.testChar, testChar)) { this.testChar = testChar;this.isDirty = true; }}
	public Boolean getTestBoolean() { updateHitCount(6); return(this.testBoolean); }
	public void setTestBoolean(Boolean testBoolean) { if(isDifferent(this.testBoolean, testBoolean)) { this.testBoolean = testBoolean;this.isDirty = true; }}
	public String getTestBinary() { updateHitCount(7); return(this.testBinary); }
	public void setTestBinary(String testBinary) { if(isDifferent(this.testBinary, testBinary)) { this.testBinary = testBinary;this.isDirty = true; }}
	public String getTestVarbinary() { updateHitCount(8); return(this.testVarbinary); }
	public void setTestVarbinary(String testVarbinary) { if(isDifferent(this.testVarbinary, testVarbinary)) { this.testVarbinary = testVarbinary;this.isDirty = true; }}
	public Date getTestDate() { updateHitCount(9); return(this.testDate); }
	public void setTestDate(Date testDate) { if(isDifferent(this.testDate, testDate)) { this.testDate = testDate;this.isDirty = true; }}
	public Timestamp getTestDatetime() { updateHitCount(10); return(this.testDatetime); }
	public void setTestDatetime(Timestamp testDatetime) { if(isDifferent(this.testDatetime, testDatetime)) { this.testDatetime = testDatetime;this.isDirty = true; }}
	public BigDecimal getTestDec() { updateHitCount(11); return(this.testDec); }
	public void setTestDec(BigDecimal testDec) { if(isDifferent(this.testDec, testDec)) { this.testDec = testDec;this.isDirty = true; }}
	public BigDecimal getTestDecimal() { updateHitCount(12); return(this.testDecimal); }
	public void setTestDecimal(BigDecimal testDecimal) { if(isDifferent(this.testDecimal, testDecimal)) { this.testDecimal = testDecimal;this.isDirty = true; }}
	public Double getTestDouble() { updateHitCount(13); return(this.testDouble); }
	public void setTestDouble(Double testDouble) { if(isDifferent(this.testDouble, testDouble)) { this.testDouble = testDouble;this.isDirty = true; }}
	public Float getTestFloat() { updateHitCount(14); return(this.testFloat); }
	public void setTestFloat(Float testFloat) { if(isDifferent(this.testFloat, testFloat)) { this.testFloat = testFloat;this.isDirty = true; }}
	public Integer getTestInt() { updateHitCount(15); return(this.testInt); }
	public void setTestInt(Integer testInt) { if(isDifferent(this.testInt, testInt)) { this.testInt = testInt;this.isDirty = true; }}
	public Integer getTestInteger() { updateHitCount(16); return(this.testInteger); }
	public void setTestInteger(Integer testInteger) { if(isDifferent(this.testInteger, testInteger)) { this.testInteger = testInteger;this.isDirty = true; }}
	public String getTestLongtext() { updateHitCount(17); return(this.testLongtext); }
	public void setTestLongtext(String testLongtext) { if(isDifferent(this.testLongtext, testLongtext)) { this.testLongtext = testLongtext;this.isDirty = true; }}
	public Blob getTestMediumblob() { updateHitCount(18); return(this.testMediumblob); }
	public void setTestMediumblob(Blob testMediumblob) { if(isDifferent(this.testMediumblob, testMediumblob)) { this.testMediumblob = testMediumblob;this.isDirty = true; }}
	public Integer getTestMediumint() { updateHitCount(19); return(this.testMediumint); }
	public void setTestMediumint(Integer testMediumint) { if(isDifferent(this.testMediumint, testMediumint)) { this.testMediumint = testMediumint;this.isDirty = true; }}
	public String getTestMediumtext() { updateHitCount(20); return(this.testMediumtext); }
	public void setTestMediumtext(String testMediumtext) { if(isDifferent(this.testMediumtext, testMediumtext)) { this.testMediumtext = testMediumtext;this.isDirty = true; }}
	public BigDecimal getTestNumeric() { updateHitCount(21); return(this.testNumeric); }
	public void setTestNumeric(BigDecimal testNumeric) { if(isDifferent(this.testNumeric, testNumeric)) { this.testNumeric = testNumeric;this.isDirty = true; }}
	public Short getTestSmallint() { updateHitCount(22); return(this.testSmallint); }
	public void setTestSmallint(Short testSmallint) { if(isDifferent(this.testSmallint, testSmallint)) { this.testSmallint = testSmallint;this.isDirty = true; }}
	public Time getTestTime() { updateHitCount(23); return(this.testTime); }
	public void setTestTime(Time testTime) { if(isDifferent(this.testTime, testTime)) { this.testTime = testTime;this.isDirty = true; }}
	public String getTestText() { updateHitCount(24); return(this.testText); }
	public void setTestText(String testText) { if(isDifferent(this.testText, testText)) { this.testText = testText;this.isDirty = true; }}
	public Timestamp getTestTimestamp() { updateHitCount(25); return(this.testTimestamp); }
	public void setTestTimestamp(Timestamp testTimestamp) { if(isDifferent(this.testTimestamp, testTimestamp)) { this.testTimestamp = testTimestamp;this.isDirty = true; }}
	public Boolean getTestTinyint() { updateHitCount(26); return(this.testTinyint); }
	public void setTestTinyint(Boolean testTinyint) { if(isDifferent(this.testTinyint, testTinyint)) { this.testTinyint = testTinyint;this.isDirty = true; }}
	public String getTestTinytext() { updateHitCount(27); return(this.testTinytext); }
	public void setTestTinytext(String testTinytext) { if(isDifferent(this.testTinytext, testTinytext)) { this.testTinytext = testTinytext;this.isDirty = true; }}
	public String getTestVarchar() { updateHitCount(28); return(this.testVarchar); }
	public void setTestVarchar(String testVarchar) { if(isDifferent(this.testVarchar, testVarchar)) { this.testVarchar = testVarchar;this.isDirty = true; }}
	public Integer getTestYear() { updateHitCount(29); return(this.testYear); }
	public void setTestYear(Integer testYear) { if(isDifferent(this.testYear, testYear)) { this.testYear = testYear;this.isDirty = true; }}

	@Override
	public ValidationBean validate() {
		ValidationBean validationBean = new ValidationBean();

		validationBean.addValidationFieldBean(new BigintValidator("test_bigint", testBigint.toString(), 0, 0, true).validate());
		validationBean.addValidationFieldBean(new BlobValidator("test_blob", testBlob.toString(), 0, 0, true).validate());
		validationBean.addValidationFieldBean(new BoolValidator("test_bool", testBool.toString(), 0, 0, true).validate());
		validationBean.addValidationFieldBean(new CharValidator("test_char", testChar.toString(), 0, 0, true).validate());
		validationBean.addValidationFieldBean(new BooleanValidator("test_boolean", testBoolean.toString(), 0, 0, true).validate());
		validationBean.addValidationFieldBean(new BinaryValidator("test_binary", testBinary.toString(), 0, 0, true).validate());
		validationBean.addValidationFieldBean(new VarbinaryValidator("test_varbinary", testVarbinary.toString(), 0, 0, true).validate());
		validationBean.addValidationFieldBean(new DateValidator("test_date", testDate.toString(), 0, 0, true).validate());
		validationBean.addValidationFieldBean(new DatetimeValidator("test_datetime", testDatetime.toString(), 0, 0, true).validate());
		validationBean.addValidationFieldBean(new DecValidator("test_dec", testDec.toString(), 0, 0, true).validate());
		validationBean.addValidationFieldBean(new DecimalValidator("test_decimal", testDecimal.toString(), 0, 0, true).validate());
		validationBean.addValidationFieldBean(new DoubleValidator("test_double", testDouble.toString(), 0, 0, true).validate());
		validationBean.addValidationFieldBean(new FloatValidator("test_float", testFloat.toString(), 0, 0, true).validate());
		validationBean.addValidationFieldBean(new IntValidator("test_int", testInt.toString(), 0, 0, true).validate());
		validationBean.addValidationFieldBean(new IntegerValidator("test_integer", testInteger.toString(), 0, 0, true).validate());
		validationBean.addValidationFieldBean(new LongtextValidator("test_longtext", testLongtext.toString(), 0, 0, true).validate());
		validationBean.addValidationFieldBean(new MediumblobValidator("test_mediumblob", testMediumblob.toString(), 0, 0, true).validate());
		validationBean.addValidationFieldBean(new MediumintValidator("test_mediumint", testMediumint.toString(), 0, 0, true).validate());
		validationBean.addValidationFieldBean(new MediumtextValidator("test_mediumtext", testMediumtext.toString(), 0, 0, true).validate());
		validationBean.addValidationFieldBean(new NumericValidator("test_numeric", testNumeric.toString(), 0, 0, true).validate());
		validationBean.addValidationFieldBean(new SmallintValidator("test_smallint", testSmallint.toString(), 0, 0, true).validate());
		validationBean.addValidationFieldBean(new TimeValidator("test_time", testTime.toString(), 0, 0, true).validate());
		validationBean.addValidationFieldBean(new TextValidator("test_text", testText.toString(), 0, 0, true).validate());
		validationBean.addValidationFieldBean(new TimestampValidator("test_timestamp", testTimestamp.toString(), 0, 0, true).validate());
		validationBean.addValidationFieldBean(new TinyintValidator("test_tinyint", testTinyint.toString(), 0, 0, true).validate());
		validationBean.addValidationFieldBean(new TinytextValidator("test_tinytext", testTinytext.toString(), 0, 0, true).validate());
		validationBean.addValidationFieldBean(new VarcharValidator("test_varchar", testVarchar.toString(), 0, 0, true).validate());
		validationBean.addValidationFieldBean(new YearValidator("test_year", testYear.toString(), 0, 0, true).validate());
		return(validationBean);
	}


	@Override
	public String toString() {
		StringBuilder stringBuilder = new StringBuilder();
		stringBuilder
			.append("Model: 'AllTypes'\n")
			.append("  Field: 'idAllTypes:").append(this.idAllTypes).append("'\n")
			.append("  Field: 'testBigint:").append(this.testBigint).append("'\n")
			.append("  Field: 'testBlob:").append(this.testBlob).append("'\n")
			.append("  Field: 'testBool:").append(this.testBool).append("'\n")
			.append("  Field: 'testChar:").append(this.testChar).append("'\n")
			.append("  Field: 'testBoolean:").append(this.testBoolean).append("'\n")
			.append("  Field: 'testBinary:").append(this.testBinary).append("'\n")
			.append("  Field: 'testVarbinary:").append(this.testVarbinary).append("'\n")
			.append("  Field: 'testDate:").append(this.testDate).append("'\n")
			.append("  Field: 'testDatetime:").append(this.testDatetime).append("'\n")
			.append("  Field: 'testDec:").append(this.testDec).append("'\n")
			.append("  Field: 'testDecimal:").append(this.testDecimal).append("'\n")
			.append("  Field: 'testDouble:").append(this.testDouble).append("'\n")
			.append("  Field: 'testFloat:").append(this.testFloat).append("'\n")
			.append("  Field: 'testInt:").append(this.testInt).append("'\n")
			.append("  Field: 'testInteger:").append(this.testInteger).append("'\n")
			.append("  Field: 'testLongtext:").append(this.testLongtext).append("'\n")
			.append("  Field: 'testMediumblob:").append(this.testMediumblob).append("'\n")
			.append("  Field: 'testMediumint:").append(this.testMediumint).append("'\n")
			.append("  Field: 'testMediumtext:").append(this.testMediumtext).append("'\n")
			.append("  Field: 'testNumeric:").append(this.testNumeric).append("'\n")
			.append("  Field: 'testSmallint:").append(this.testSmallint).append("'\n")
			.append("  Field: 'testTime:").append(this.testTime).append("'\n")
			.append("  Field: 'testText:").append(this.testText).append("'\n")
			.append("  Field: 'testTimestamp:").append(this.testTimestamp).append("'\n")
			.append("  Field: 'testTinyint:").append(this.testTinyint).append("'\n")
			.append("  Field: 'testTinytext:").append(this.testTinytext).append("'\n")
			.append("  Field: 'testVarchar:").append(this.testVarchar).append("'\n")
			.append("  Field: 'testYear:").append(this.testYear).append("'\n")
			;
		return(stringBuilder.toString());
	}
	public JSONObject getToJSON() {
		return(toJSON());
	}

	public JSONObject toJSON() {
		JSONObject jsonObject = new JSONObject();

		jsonObject.put("type", "table");
		jsonObject.put("name", "AllTypes");
		JSONObject fieldsObject = new JSONObject();

		ModelBaseHelper.addtoJSONObject(fieldsObject, "idAllTypes", this.getIdAllTypes());
		ModelBaseHelper.addtoJSONObject(fieldsObject, "testBigint", this.getTestBigint());
		ModelBaseHelper.addtoJSONObject(fieldsObject, "testBlob", this.getTestBlob());
		ModelBaseHelper.addtoJSONObject(fieldsObject, "testBool", this.getTestBool());
		ModelBaseHelper.addtoJSONObject(fieldsObject, "testChar", this.getTestChar());
		ModelBaseHelper.addtoJSONObject(fieldsObject, "testBoolean", this.getTestBoolean());
		ModelBaseHelper.addtoJSONObject(fieldsObject, "testBinary", this.getTestBinary());
		ModelBaseHelper.addtoJSONObject(fieldsObject, "testVarbinary", this.getTestVarbinary());
		ModelBaseHelper.addtoJSONObject(fieldsObject, "testDate", this.getTestDate());
		ModelBaseHelper.addtoJSONObject(fieldsObject, "testDatetime", this.getTestDatetime());
		ModelBaseHelper.addtoJSONObject(fieldsObject, "testDec", this.getTestDec());
		ModelBaseHelper.addtoJSONObject(fieldsObject, "testDecimal", this.getTestDecimal());
		ModelBaseHelper.addtoJSONObject(fieldsObject, "testDouble", this.getTestDouble());
		ModelBaseHelper.addtoJSONObject(fieldsObject, "testFloat", this.getTestFloat());
		ModelBaseHelper.addtoJSONObject(fieldsObject, "testInt", this.getTestInt());
		ModelBaseHelper.addtoJSONObject(fieldsObject, "testInteger", this.getTestInteger());
		ModelBaseHelper.addtoJSONObject(fieldsObject, "testLongtext", this.getTestLongtext());
		ModelBaseHelper.addtoJSONObject(fieldsObject, "testMediumblob", this.getTestMediumblob());
		ModelBaseHelper.addtoJSONObject(fieldsObject, "testMediumint", this.getTestMediumint());
		ModelBaseHelper.addtoJSONObject(fieldsObject, "testMediumtext", this.getTestMediumtext());
		ModelBaseHelper.addtoJSONObject(fieldsObject, "testNumeric", this.getTestNumeric());
		ModelBaseHelper.addtoJSONObject(fieldsObject, "testSmallint", this.getTestSmallint());
		ModelBaseHelper.addtoJSONObject(fieldsObject, "testTime", this.getTestTime());
		ModelBaseHelper.addtoJSONObject(fieldsObject, "testText", this.getTestText());
		ModelBaseHelper.addtoJSONObject(fieldsObject, "testTimestamp", this.getTestTimestamp());
		ModelBaseHelper.addtoJSONObject(fieldsObject, "testTinyint", this.getTestTinyint());
		ModelBaseHelper.addtoJSONObject(fieldsObject, "testTinytext", this.getTestTinytext());
		ModelBaseHelper.addtoJSONObject(fieldsObject, "testVarchar", this.getTestVarchar());
		ModelBaseHelper.addtoJSONObject(fieldsObject, "testYear", this.getTestYear());

		jsonObject.put("fields", fieldsObject);

		return(jsonObject);
	}


	public String toJsonString() {
		return(toJSON().toString());
	}

	public String getJsonString() {
		return(toJsonString());
	}

	/**
	 * Return an XML representation of the 'AllTypes' model, with the root node being the
	 * name of the table - i.e. <all_types> and the child nodes the name of the 
	 * fields.
	 * <p>
	 * <strong>NOTE:</strong> Any field marked as secure will not be included as
	 * part of the XML document
	 * 
	 * @return An XML representation of the model.  
	 */
	public String toXMLString() {
		return("<all_types>" + 
			String.format("<id_all_types null=\"%b\">%s</id_all_types>", (this.getIdAllTypes() == null), (this.getIdAllTypes() != null ? this.getIdAllTypes() : "")) + 
			String.format("<test_bigint null=\"%b\">%s</test_bigint>", (this.getTestBigint() == null), (this.getTestBigint() != null ? this.getTestBigint() : "")) + 
			String.format("<test_blob null=\"%b\">%s</test_blob>", (this.getTestBlob() == null), (this.getTestBlob() != null ? this.getTestBlob() : "")) + 
			String.format("<test_bool null=\"%b\">%s</test_bool>", (this.getTestBool() == null), (this.getTestBool() != null ? this.getTestBool() : "")) + 
			String.format("<test_char null=\"%b\">%s</test_char>", (this.getTestChar() == null), (this.getTestChar() != null ? XmlHelper.escapeXml(this.getTestChar()) : "")) + 
			String.format("<test_boolean null=\"%b\">%s</test_boolean>", (this.getTestBoolean() == null), (this.getTestBoolean() != null ? this.getTestBoolean() : "")) + 
			String.format("<test_binary null=\"%b\">%s</test_binary>", (this.getTestBinary() == null), (this.getTestBinary() != null ? XmlHelper.escapeXml(this.getTestBinary()) : "")) + 
			String.format("<test_varbinary null=\"%b\">%s</test_varbinary>", (this.getTestVarbinary() == null), (this.getTestVarbinary() != null ? XmlHelper.escapeXml(this.getTestVarbinary()) : "")) + 
			String.format("<test_date null=\"%b\">%s</test_date>", (this.getTestDate() == null), (this.getTestDate() != null ? this.getTestDate() : "")) + 
			String.format("<test_datetime null=\"%b\">%s</test_datetime>", (this.getTestDatetime() == null), (this.getTestDatetime() != null ? this.getTestDatetime() : "")) + 
			String.format("<test_dec null=\"%b\">%s</test_dec>", (this.getTestDec() == null), (this.getTestDec() != null ? this.getTestDec() : "")) + 
			String.format("<test_decimal null=\"%b\">%s</test_decimal>", (this.getTestDecimal() == null), (this.getTestDecimal() != null ? this.getTestDecimal() : "")) + 
			String.format("<test_double null=\"%b\">%s</test_double>", (this.getTestDouble() == null), (this.getTestDouble() != null ? this.getTestDouble() : "")) + 
			String.format("<test_float null=\"%b\">%s</test_float>", (this.getTestFloat() == null), (this.getTestFloat() != null ? this.getTestFloat() : "")) + 
			String.format("<test_int null=\"%b\">%s</test_int>", (this.getTestInt() == null), (this.getTestInt() != null ? this.getTestInt() : "")) + 
			String.format("<test_integer null=\"%b\">%s</test_integer>", (this.getTestInteger() == null), (this.getTestInteger() != null ? this.getTestInteger() : "")) + 
			String.format("<test_longtext null=\"%b\">%s</test_longtext>", (this.getTestLongtext() == null), (this.getTestLongtext() != null ? XmlHelper.escapeXml(this.getTestLongtext()) : "")) + 
			String.format("<test_mediumblob null=\"%b\">%s</test_mediumblob>", (this.getTestMediumblob() == null), (this.getTestMediumblob() != null ? this.getTestMediumblob() : "")) + 
			String.format("<test_mediumint null=\"%b\">%s</test_mediumint>", (this.getTestMediumint() == null), (this.getTestMediumint() != null ? this.getTestMediumint() : "")) + 
			String.format("<test_mediumtext null=\"%b\">%s</test_mediumtext>", (this.getTestMediumtext() == null), (this.getTestMediumtext() != null ? XmlHelper.escapeXml(this.getTestMediumtext()) : "")) + 
			String.format("<test_numeric null=\"%b\">%s</test_numeric>", (this.getTestNumeric() == null), (this.getTestNumeric() != null ? this.getTestNumeric() : "")) + 
			String.format("<test_smallint null=\"%b\">%s</test_smallint>", (this.getTestSmallint() == null), (this.getTestSmallint() != null ? this.getTestSmallint() : "")) + 
			String.format("<test_time null=\"%b\">%s</test_time>", (this.getTestTime() == null), (this.getTestTime() != null ? this.getTestTime() : "")) + 
			String.format("<test_text null=\"%b\">%s</test_text>", (this.getTestText() == null), (this.getTestText() != null ? XmlHelper.escapeXml(this.getTestText()) : "")) + 
			String.format("<test_timestamp null=\"%b\">%s</test_timestamp>", (this.getTestTimestamp() == null), (this.getTestTimestamp() != null ? this.getTestTimestamp() : "")) + 
			String.format("<test_tinyint null=\"%b\">%s</test_tinyint>", (this.getTestTinyint() == null), (this.getTestTinyint() != null ? this.getTestTinyint() : "")) + 
			String.format("<test_tinytext null=\"%b\">%s</test_tinytext>", (this.getTestTinytext() == null), (this.getTestTinytext() != null ? XmlHelper.escapeXml(this.getTestTinytext()) : "")) + 
			String.format("<test_varchar null=\"%b\">%s</test_varchar>", (this.getTestVarchar() == null), (this.getTestVarchar() != null ? XmlHelper.escapeXml(this.getTestVarchar()) : "")) + 
			String.format("<test_year null=\"%b\">%s</test_year>", (this.getTestYear() == null), (this.getTestYear() != null ? this.getTestYear() : "")) + 
			"</all_types>");
	}


	public static String getHitCountJson() {
		JSONObject jsonObject = new JSONObject();
		jsonObject.put("type", "AllTypes");
		jsonObject.put("total", HIT_COUNTS[0]);
		jsonObject.put("idAllTypes", HIT_COUNTS[1]);
		jsonObject.put("testBigint", HIT_COUNTS[2]);
		jsonObject.put("testBlob", HIT_COUNTS[3]);
		jsonObject.put("testBool", HIT_COUNTS[4]);
		jsonObject.put("testChar", HIT_COUNTS[5]);
		jsonObject.put("testBoolean", HIT_COUNTS[6]);
		jsonObject.put("testBinary", HIT_COUNTS[7]);
		jsonObject.put("testVarbinary", HIT_COUNTS[8]);
		jsonObject.put("testDate", HIT_COUNTS[9]);
		jsonObject.put("testDatetime", HIT_COUNTS[10]);
		jsonObject.put("testDec", HIT_COUNTS[11]);
		jsonObject.put("testDecimal", HIT_COUNTS[12]);
		jsonObject.put("testDouble", HIT_COUNTS[13]);
		jsonObject.put("testFloat", HIT_COUNTS[14]);
		jsonObject.put("testInt", HIT_COUNTS[15]);
		jsonObject.put("testInteger", HIT_COUNTS[16]);
		jsonObject.put("testLongtext", HIT_COUNTS[17]);
		jsonObject.put("testMediumblob", HIT_COUNTS[18]);
		jsonObject.put("testMediumint", HIT_COUNTS[19]);
		jsonObject.put("testMediumtext", HIT_COUNTS[20]);
		jsonObject.put("testNumeric", HIT_COUNTS[21]);
		jsonObject.put("testSmallint", HIT_COUNTS[22]);
		jsonObject.put("testTime", HIT_COUNTS[23]);
		jsonObject.put("testText", HIT_COUNTS[24]);
		jsonObject.put("testTimestamp", HIT_COUNTS[25]);
		jsonObject.put("testTinyint", HIT_COUNTS[26]);
		jsonObject.put("testTinytext", HIT_COUNTS[27]);
		jsonObject.put("testVarchar", HIT_COUNTS[28]);
		jsonObject.put("testYear", HIT_COUNTS[29]);
		return(jsonObject.toString());
	}

}