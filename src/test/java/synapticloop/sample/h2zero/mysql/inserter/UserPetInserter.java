package synapticloop.sample.h2zero.mysql.inserter;

// - - - - thoughtfully generated by synapticloop h2zero - - - - 
//    with the use of synapticloop templar templating language
//              (java-create-inserter.templar)

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.math.BigDecimal;


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import synapticloop.h2zero.base.manager.mysql.ConnectionManager;
import synapticloop.sample.h2zero.mysql.model.util.Constants;

/**
 * This class contains the methods to insert new rows into the: 
 *   <code>sample.user_pet</code>
 * table.  The fields that are available are as follows:
 * 
 * <ul>
 *  <li><code>id_user_pet</code> (bigint)  <strong>NOT</strong> nullable  (PRIMARY)</li>
 *  <li><code>id_user</code> (bigint)  <strong>NOT</strong> nullable </li>
 *  <li><code>id_pet</code> (bigint)  <strong>NOT</strong> nullable </li>
 * </ul>
 * 
 * @author synapticloop h2zero
 */

public class UserPetInserter {
	// the binder is unused in code, but will generate compile problems if this 
	// class is no longer referenced in the h2zero file. Just a nicety for
	// removing dead code
	@SuppressWarnings("unused")
	private static final String BINDER = Constants.USER_PET_BINDER;

		private static final Logger LOGGER = LoggerFactory.getLogger(UserPetInserter.class);

	// static fields generated by synapticloop h2zero
	private static final String SQL_BUILTIN_INSERT_ALL = "insert into user_pet(id_user_pet, id_user, id_pet)";
	private static final String SQL_BUILTIN_INSERT_VALUES = SQL_BUILTIN_INSERT_ALL + " values (?, ?, ?)";
	// static inserter SQL generated from the user input

	private UserPetInserter() {}

	/**
	 * Insert a new UserPet into the database utilising the passed in connection.
	 * 
	 * @param connection the connection to use for the database, this __MUST__ be 
	 *   closed by the calling function.
	 * @param idUserPet  maps to id_user_pet
	 * @param idUser  maps to id_user
	 * @param idPet  maps to id_pet
	 * 
	 * @return the number of rows that were inserted, or -1 if an error occurred
	 * 
	 * @throws SQLException if there was an error in the SQL insert statement
	 */
	public static int insert(Connection connection, Long idUserPet, Long idUser, Long idPet) throws SQLException {
		try (PreparedStatement preparedStatement = connection.prepareStatement(SQL_BUILTIN_INSERT_VALUES)) {
			ConnectionManager.setBigint(preparedStatement, 1, idUserPet);
			ConnectionManager.setBigint(preparedStatement, 2, idUser);
			ConnectionManager.setBigint(preparedStatement, 3, idPet);
			return(preparedStatement.executeUpdate());
		}
	}

	/**
	 * Insert a new UserPet into the database a new connection will be retrieved 
	 * from the pool, used and then closed.
	 * 
	 * @param idUserPet  maps to id_user_pet
	 * @param idUser  maps to id_user
	 * @param idPet  maps to id_pet
	 * 
	 * @return the number of rows that were inserted, or -1 if an error occurred
	 * 
	 * @throws SQLException if there was an error in the SQL insert statement
	 */
	public static int insert(Long idUserPet, Long idUser, Long idPet) throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			return(insert(connection, idUserPet, idUser, idPet));
		}
	}

	/**
	 * Silently (i.e. swallow any exceptions) Insert a new UserPet into the 
	 * database utilising the passed in connection. If an exception is thrown by the
	 * method, the exception message will be logged as an 'error', if 'trace' logging
	 * is enabled, the stack trace will be printed to the output stream.
	 * 
	 * @param connection the connection to use for the database, this __MUST__ be 
	 *   closed by the calling function.
	 * @param idUserPet  maps to id_user_pet
	 * @param idUser  maps to id_user
	 * @param idPet  maps to id_pet
	 * 
	 * @return the number of rows that were inserted, or -1 if an error occurred
	 */
	public static int insertSilent(Connection connection, Long idUserPet, Long idUser, Long idPet) {
		try {
			return(insert(connection, idUserPet, idUser, idPet));
		} catch (SQLException sqlex) {
			LOGGER.error("SQLException caught, message was: {}", sqlex.getMessage());
			if(LOGGER.isTraceEnabled()){
				sqlex.printStackTrace();
			}
			return(-1);
		}
	}

	/**
	 * Silently (i.e. swallow any exceptions) Insert a new UserPet into the 
	 * database, creating and closing a connection in the process. If an exception is thrown 
	 * by the method, the exception message will be logged as an 'error', if 'trace' logging
	 * is enabled, the stack trace will be printed to the output stream.
	 * 
	 * @param idUserPet  maps to id_user_pet
	 * @param idUser  maps to id_user
	 * @param idPet  maps to id_pet
	 * 
	 * @return the number of rows that were inserted, or -1 if an error occurred
	 */
	public static int insertSilent(Long idUserPet, Long idUser, Long idPet) {
		try (Connection connection = ConnectionManager.getConnection()){
			return(insert(connection, idUserPet, idUser, idPet));
		} catch (SQLException sqlex) {
			LOGGER.error("SQLException caught, message was: {}", sqlex.getMessage());
			if(LOGGER.isTraceEnabled()){
				sqlex.printStackTrace();
			}
			return(-1);
		}
	}

}