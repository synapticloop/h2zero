package com.synapticloop.sample.h2zero.sqlite3;

// - - - - thoughtfully generated by synapticloop h2zero - - - - 
//    with the use of synapticloop templar templating language
//  (java-create-connection-manager-initialise-override.templar)


import com.mchange.v2.c3p0.ComboPooledDataSource;
import com.synapticloop.h2zero.base.manager.sqlite3.ConnectionManager;
import com.synapticloop.sample.h2zero.sqlite3.test.util.DatabaseSetupTest;

import java.beans.PropertyVetoException;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.file.Files;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

/**
 * <p>
 * This file is used to override the default initialisation of the connection
 * pool, so that you can initialise your connection by your own methods.
 * </p>
 *
 * <p>
 * Example, commented-out code is included within the method.
 * </p>
 *
 * <p>
 * To initialise the combo pool for use, call <br />
 * <code>ConnectionManagerInitialiserOverride.initialise()</code><br />
 * __ONCE__ upon initialisation of your application.
 * </p>
 *
 *
 * <p>
 * With multiple connection pools to multiple databases (rarely used, but
 * necessary in some instances) use the protected static field
 * <code>CONNECTION_POOL_NAME</code> inherited from the parent class.
 * </p>
 *
 * <p>
 * {@link  com.synapticloop.sample.h2zero.sqlite3.ConnectionManagerInitialiser#CONNECTION_POOL_NAME  com.synapticloop.sample.h2zero.sqlite3.ConnectionManagerInitialiser#CONNECTION_POOL_NAME}
 * </p>
 *
 * <pre>
 *
 * NOTE: ONCE GENERATED - THIS FILE WILL __NEVER__ BE OVER-WRITTEN BY AN h2zero
 *       RE-GENERATION.
 *
 *       THIS __WILL__ BE A PROBLEM IF h2zero UPDATES THE TEMPLATE IN FUTURE
 *       VERSIONS...
 *
 *       JUST SAYING...
 * </pre>
 */
public class ConnectionManagerInitialiserOverride extends ConnectionManagerInitialiser {
	private static String testDbPath;

	public static void initialise() {
		// create a new combo pool
		ComboPooledDataSource myComboPooledDataSource = new ComboPooledDataSource();
		// configure the combopool
		try {
			myComboPooledDataSource.setDriverClass("org.sqlite.JDBC");
		} catch (PropertyVetoException e) { // runtime exception
			throw new RuntimeException(e);
		}
		String tmpDir = "." + File.separator;
		try {
			tmpDir = Files.createTempDirectory("sqlite3").toFile().getAbsolutePath();
		} catch (IOException e) {
		}

		testDbPath = tmpDir + File.separator + "test.db";
		myComboPooledDataSource.setJdbcUrl("jdbc:sqlite:" + testDbPath);

		try {
			myComboPooledDataSource.setLoginTimeout(1);
		} catch (SQLException e) {
			throw new RuntimeException(e);
		}
		addComboPool(CONNECTION_POOL_NAME, myComboPooledDataSource);

		createDatabase();
	}

	public static void destroy() {
		if(null != comboPooledDataSource) {
			comboPooledDataSource.close();
		}
		File dbFile = new File(testDbPath);
		dbFile.delete();
	}

	private static void createDatabase() {
		PreparedStatement preparedStatement = null;

		try (
				Connection connection = ConnectionManager.getConnection();
				InputStreamReader inputStreamReader = new InputStreamReader(DatabaseSetupTest.class.getResourceAsStream("/create-database-sqlite3.sql"));
				BufferedReader bufferedReader = new BufferedReader(inputStreamReader);
		) {
			String line = null;
			StringBuilder query = new StringBuilder();

			while ((line = bufferedReader.readLine()) != null) {
				if (!line.startsWith("--") && !line.trim().isEmpty()) {
					query.append(line);
				} else {
					continue;
				}

				if (line.trim().endsWith(";")) {
					if (line.trim().isEmpty()) {
						continue;
					}
					preparedStatement = connection.prepareStatement(query.toString());
					preparedStatement.execute();
					preparedStatement.close();
					query.setLength(0);
				}
			}

		} catch (IOException | SQLException e) {
			e.printStackTrace();
		} finally {
			ConnectionManager.closeAll(preparedStatement);
		}
	}
}
