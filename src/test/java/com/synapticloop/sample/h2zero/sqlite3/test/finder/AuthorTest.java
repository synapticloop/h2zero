package com.synapticloop.sample.h2zero.sqlite3.test.finder;

//        - - - - thoughtfully generated by synapticloop h2zero - - - -        
//          with the use of synapticloop templar templating language
//                    (/java/test/java-finder-test.templar)


import static org.junit.Assert.*;

import org.junit.Assert;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;
import com.synapticloop.sample.h2zero.sqlite3.ConnectionManagerInitialiserOverride;
import com.synapticloop.h2zero.base.manager.sqlite3.ConnectionManager;
import com.synapticloop.sample.h2zero.sqlite3.test.DatabaseSetupTest;


import java.math.*;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.sql.*;
import java.util.List;


import com.synapticloop.sample.h2zero.sqlite3.finder.AuthorFinder;

/**
 * WARNING NOTE: these tests are designed to test the generated SQL statements
 * __NOT__ whether the database actually returns sane results.
 * 
 * These will also test to ensure that connections are setting closed properly
 * so that there are no resource leakages.
 */

public class AuthorTest extends DatabaseSetupTest {

	@Test
	public void testAuthorFindByPrimaryKey() throws SQLException {
		AuthorFinder.findByPrimaryKey(1L)
				.execute();

	}

	@Test
	public void testAuthorFindByPrimaryKeySilent() throws SQLException {
		Assert.assertNull(AuthorFinder.findByPrimaryKey(-831486134981L)
				.executeSilent());

	}

	@Test
	public void testAuthorFindByPrimaryKeyWithConnection() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			AuthorFinder.findByPrimaryKey(1L)
				.withConnection(connection)
				.execute();
		}
	}

	@Test
	public void testAuthorFindByPrimaryKeyWithConnectionSilent() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			Assert.assertNull(AuthorFinder.findByPrimaryKey(-831486134981L)
				.withConnection(connection)
				.executeSilent());
		}
	}

	@Test
	public void testAuthorFindAll() throws SQLException {
		Assert.assertEquals(0, AuthorFinder.findAll()
				.execute()
				.size());

	}

	@Test
	public void testAuthorFindAllLimitOffset() throws SQLException {
		Assert.assertEquals(0, AuthorFinder.findAll()
			.withLimit(1)
			.withOffset(0)
			.execute()
			.size());
	}

	@Test
	public void testAuthorFindAllSilent() throws SQLException {
		Assert.assertEquals(0, AuthorFinder.findAll()
				.executeSilent()
				.size());

	}

	@Test
	public void testAuthorFindAllLimitOffsetSilent() throws SQLException {
		Assert.assertEquals(0, AuthorFinder.findAll()
				.withLimit(1)
				.withOffset(0)
				.executeSilent()
				.size());
	}

	@Test
	public void testAuthorFindAllWithConnection() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			Assert.assertEquals(0, AuthorFinder.findAll()
				.withConnection(connection)
				.execute()
				.size());

		}
	}

	@Test
	public void testAuthorFindAllWithConnectionSilent() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			Assert.assertEquals(0, AuthorFinder.findAll()
				.withConnection(connection)
				.executeSilent()
				.size());
		}
	}

	@Test
	public void testAuthorFindAllWithConnectionLimit() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			AuthorFinder.findAll().withConnection(connection)
				.withLimit(1)
				.withOffset(0)
				.execute();
		}

	}

	@Test
	public void testAuthorFindAllWithConnectionLimitSilent() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			Assert.assertEquals(0, AuthorFinder.findAll()
				.withConnection(connection)
				.withLimit(1)
				.withOffset(0)
				.executeSilent()
				.size());
		}
	}

	@Test
	public void testAuthorFindAllWithConnectionOffset() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			AuthorFinder.findAll()
				.withConnection(connection)
				.withLimit(null)
				.withOffset(1)
				.execute();
			Assert.fail("A SQL Exception should have been thrown as there was an offset without a limit set.");		} catch(SQLException ignored) {
		}
	}

	@Test
	public void testAuthorFindAllWithConnectionOffsetSilent() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			AuthorFinder.findAll()
				.withConnection(connection)
				.withLimit(null)
				.withOffset(0)
				.executeSilent();
		}
	}

	@Test
	public void testAuthorFindAllWithConnectionLimitOffset() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			AuthorFinder.findAll()
				.withConnection(connection)
				.withLimit(1)
				.withOffset(0)
				.execute();
		}
	}

	@Test
	public void testAuthorFindAllWithNullConnectionLimitOffset() throws SQLException {
		AuthorFinder.findAll()
				.withConnection(null)
				.withLimit(1)
				.withOffset(0)
				.execute();

	}

	@Test
	public void testAuthorfindByIdAuthorStatus() throws SQLException {
		AuthorFinder.findByIdAuthorStatus(1L).execute();
	}

	@Test
	public void testAuthorfindByIdAuthorStatusSilent() throws SQLException {
		AuthorFinder.findByIdAuthorStatus(1L).executeSilent();
	}

	@Test
	public void testAuthorfindByIdAuthorStatusLimitOffset() throws SQLException {
		AuthorFinder.findByIdAuthorStatus(1L)
				.withLimit(0)
				.withOffset(0)
				.execute();
	}

	@Test
	public void testAuthorfindByIdAuthorStatusLimitOffsetSilent() throws SQLException {
		AuthorFinder.findByIdAuthorStatus(1L)
				.withLimit(0)
				.withOffset(0)
				.executeSilent();

	}

	@Test
	public void testAuthorfindByIdAuthorStatusWithConnection() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			AuthorFinder.findByIdAuthorStatus(1L)
				.withConnection(connection)
				.execute();
		}
	}

	@Test
	public void testAuthorfindByIdAuthorStatusWithConnectionSilent() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			AuthorFinder.findByIdAuthorStatus(1L)
				.withConnection(connection)
				.executeSilent();
		}
	}

	@Test
	public void testAuthorfindByIdAuthorStatusWithNullConnection() throws SQLException {
		AuthorFinder.findByIdAuthorStatus(1L)
			.withConnection(null)
			.execute();
	}

	@Test
	public void testAuthorfindByIdAuthorStatusWithNullConnectionSilent() throws SQLException {
		AuthorFinder.findByIdAuthorStatus(1L)
				.withConnection(null)
				.executeSilent();
	}

	@Test
	public void testAuthorfindByIdAuthorStatusWithNullConnectionLimitOffset() throws SQLException {
		AuthorFinder.findByIdAuthorStatus(1L)
			.withConnection(null)
			.withLimit(0)
			.withOffset(0)
			.execute();
	}

	@Test
	public void testAuthorfindByIdAuthorStatusWithNullConnectionLimitOffsetSilent() throws SQLException {
		AuthorFinder.findByIdAuthorStatus(1L)
				.withConnection(null)
				.withLimit(0)
				.withOffset(0)
				.executeSilent();
	}

	@Test
	public void testAuthorfindByIdAuthorStatusWithNullConnectionNullLimitNullOffset() throws SQLException {
		AuthorFinder.findByIdAuthorStatus(1L)
			.withConnection(null)
			.withLimit(null)
			.withOffset(null)
			.execute();
	}

	@Test
	public void testAuthorfindByIdAuthorStatusWithNullConnectionNullLimitNullOffsetSilent() throws SQLException {
		AuthorFinder.findByIdAuthorStatus(1L)
				.withConnection(null)
				.withLimit(null)
				.withOffset(null)
				.executeSilent();
	}

	@Test
	public void testAuthorfindByFlIsUpdating() throws SQLException {
		AuthorFinder.findByFlIsUpdating(true).execute();
	}

	@Test
	public void testAuthorfindByFlIsUpdatingSilent() throws SQLException {
		AuthorFinder.findByFlIsUpdating(true).executeSilent();
	}

	@Test
	public void testAuthorfindByFlIsUpdatingLimitOffset() throws SQLException {
		AuthorFinder.findByFlIsUpdating(true)
				.withLimit(0)
				.withOffset(0)
				.execute();
	}

	@Test
	public void testAuthorfindByFlIsUpdatingLimitOffsetSilent() throws SQLException {
		AuthorFinder.findByFlIsUpdating(true)
				.withLimit(0)
				.withOffset(0)
				.executeSilent();

	}

	@Test
	public void testAuthorfindByFlIsUpdatingWithConnection() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			AuthorFinder.findByFlIsUpdating(true)
				.withConnection(connection)
				.execute();
		}
	}

	@Test
	public void testAuthorfindByFlIsUpdatingWithConnectionSilent() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			AuthorFinder.findByFlIsUpdating(true)
				.withConnection(connection)
				.executeSilent();
		}
	}

	@Test
	public void testAuthorfindByFlIsUpdatingWithNullConnection() throws SQLException {
		AuthorFinder.findByFlIsUpdating(true)
			.withConnection(null)
			.execute();
	}

	@Test
	public void testAuthorfindByFlIsUpdatingWithNullConnectionSilent() throws SQLException {
		AuthorFinder.findByFlIsUpdating(true)
				.withConnection(null)
				.executeSilent();
	}

	@Test
	public void testAuthorfindByFlIsUpdatingWithNullConnectionLimitOffset() throws SQLException {
		AuthorFinder.findByFlIsUpdating(true)
			.withConnection(null)
			.withLimit(0)
			.withOffset(0)
			.execute();
	}

	@Test
	public void testAuthorfindByFlIsUpdatingWithNullConnectionLimitOffsetSilent() throws SQLException {
		AuthorFinder.findByFlIsUpdating(true)
				.withConnection(null)
				.withLimit(0)
				.withOffset(0)
				.executeSilent();
	}

	@Test
	public void testAuthorfindByFlIsUpdatingWithNullConnectionNullLimitNullOffset() throws SQLException {
		AuthorFinder.findByFlIsUpdating(true)
			.withConnection(null)
			.withLimit(null)
			.withOffset(null)
			.execute();
	}

	@Test
	public void testAuthorfindByFlIsUpdatingWithNullConnectionNullLimitNullOffsetSilent() throws SQLException {
		AuthorFinder.findByFlIsUpdating(true)
				.withConnection(null)
				.withLimit(null)
				.withOffset(null)
				.executeSilent();
	}

	@Test
	public void testAuthorfindByTxtIdAuthorIdAuthorStatus() throws SQLException {
		AuthorFinder.findByTxtIdAuthorIdAuthorStatus("varchar", 1L).execute();
	}

	@Test
	public void testAuthorfindByTxtIdAuthorIdAuthorStatusSilent() throws SQLException {
		AuthorFinder.findByTxtIdAuthorIdAuthorStatus("varchar", 1L).executeSilent();
	}

	@Test
	public void testAuthorfindByTxtIdAuthorIdAuthorStatusLimitOffset() throws SQLException {
		AuthorFinder.findByTxtIdAuthorIdAuthorStatus("varchar", 1L)
				.withLimit(0)
				.withOffset(0)
				.execute();
	}

	@Test
	public void testAuthorfindByTxtIdAuthorIdAuthorStatusLimitOffsetSilent() throws SQLException {
		AuthorFinder.findByTxtIdAuthorIdAuthorStatus("varchar", 1L)
				.withLimit(0)
				.withOffset(0)
				.executeSilent();

	}

	@Test
	public void testAuthorfindByTxtIdAuthorIdAuthorStatusWithConnection() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			AuthorFinder.findByTxtIdAuthorIdAuthorStatus("varchar", 1L)
				.withConnection(connection)
				.execute();
		}
	}

	@Test
	public void testAuthorfindByTxtIdAuthorIdAuthorStatusWithConnectionSilent() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			AuthorFinder.findByTxtIdAuthorIdAuthorStatus("varchar", 1L)
				.withConnection(connection)
				.executeSilent();
		}
	}

	@Test
	public void testAuthorfindByTxtIdAuthorIdAuthorStatusWithNullConnection() throws SQLException {
		AuthorFinder.findByTxtIdAuthorIdAuthorStatus("varchar", 1L)
			.withConnection(null)
			.execute();
	}

	@Test
	public void testAuthorfindByTxtIdAuthorIdAuthorStatusWithNullConnectionSilent() throws SQLException {
		AuthorFinder.findByTxtIdAuthorIdAuthorStatus("varchar", 1L)
				.withConnection(null)
				.executeSilent();
	}

	@Test
	public void testAuthorfindByTxtIdAuthorIdAuthorStatusWithNullConnectionLimitOffset() throws SQLException {
		AuthorFinder.findByTxtIdAuthorIdAuthorStatus("varchar", 1L)
			.withConnection(null)
			.withLimit(0)
			.withOffset(0)
			.execute();
	}

	@Test
	public void testAuthorfindByTxtIdAuthorIdAuthorStatusWithNullConnectionLimitOffsetSilent() throws SQLException {
		AuthorFinder.findByTxtIdAuthorIdAuthorStatus("varchar", 1L)
				.withConnection(null)
				.withLimit(0)
				.withOffset(0)
				.executeSilent();
	}

	@Test
	public void testAuthorfindByTxtIdAuthorIdAuthorStatusWithNullConnectionNullLimitNullOffset() throws SQLException {
		AuthorFinder.findByTxtIdAuthorIdAuthorStatus("varchar", 1L)
			.withConnection(null)
			.withLimit(null)
			.withOffset(null)
			.execute();
	}

	@Test
	public void testAuthorfindByTxtIdAuthorIdAuthorStatusWithNullConnectionNullLimitNullOffsetSilent() throws SQLException {
		AuthorFinder.findByTxtIdAuthorIdAuthorStatus("varchar", 1L)
				.withConnection(null)
				.withLimit(null)
				.withOffset(null)
				.executeSilent();
	}

	@Test
	public void testAuthorfindByTxtIdAuthor() throws SQLException {
		AuthorFinder.findByTxtIdAuthor("varchar").execute();
	}

	@Test
	public void testAuthorfindByTxtIdAuthorSilent() throws SQLException {
		AuthorFinder.findByTxtIdAuthor("varchar").executeSilent();
	}

	@Test
	public void testAuthorfindByTxtIdAuthorWithConnection() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			AuthorFinder.findByTxtIdAuthor("varchar")
				.withConnection(connection)
				.execute();
		}
	}

	@Test
	public void testAuthorfindByTxtIdAuthorWithConnectionSilent() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			AuthorFinder.findByTxtIdAuthor("varchar")
				.withConnection(connection)
				.executeSilent();
		}
	}

	@Test
	public void testAuthorfindByTxtIdAuthorWithNullConnection() throws SQLException {
		AuthorFinder.findByTxtIdAuthor("varchar")
			.withConnection(null)
			.execute();
	}

	@Test
	public void testAuthorfindByTxtIdAuthorWithNullConnectionSilent() throws SQLException {
		AuthorFinder.findByTxtIdAuthor("varchar")
				.withConnection(null)
				.executeSilent();
	}

	@Test
	public void testAuthorfindInStatus() throws SQLException {
		AuthorFinder.findInStatus(List.of(1L)).execute();
	}

	@Test
	public void testAuthorfindInStatusSilent() throws SQLException {
		AuthorFinder.findInStatus(List.of(1L)).executeSilent();
	}

	@Test
	public void testAuthorfindInStatusLimitOffset() throws SQLException {
		AuthorFinder.findInStatus(List.of(1L))
				.withLimit(0)
				.withOffset(0)
				.execute();
	}

	@Test
	public void testAuthorfindInStatusLimitOffsetSilent() throws SQLException {
		AuthorFinder.findInStatus(List.of(1L))
				.withLimit(0)
				.withOffset(0)
				.executeSilent();

	}

	@Test
	public void testAuthorfindInStatusWithConnection() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			AuthorFinder.findInStatus(List.of(1L))
				.withConnection(connection)
				.execute();
		}
	}

	@Test
	public void testAuthorfindInStatusWithConnectionSilent() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			AuthorFinder.findInStatus(List.of(1L))
				.withConnection(connection)
				.executeSilent();
		}
	}

	@Test
	public void testAuthorfindInStatusWithNullConnection() throws SQLException {
		AuthorFinder.findInStatus(List.of(1L))
			.withConnection(null)
			.execute();
	}

	@Test
	public void testAuthorfindInStatusWithNullConnectionSilent() throws SQLException {
		AuthorFinder.findInStatus(List.of(1L))
				.withConnection(null)
				.executeSilent();
	}

	@Test
	public void testAuthorfindInStatusWithNullConnectionLimitOffset() throws SQLException {
		AuthorFinder.findInStatus(List.of(1L))
			.withConnection(null)
			.withLimit(0)
			.withOffset(0)
			.execute();
	}

	@Test
	public void testAuthorfindInStatusWithNullConnectionLimitOffsetSilent() throws SQLException {
		AuthorFinder.findInStatus(List.of(1L))
				.withConnection(null)
				.withLimit(0)
				.withOffset(0)
				.executeSilent();
	}

	@Test
	public void testAuthorfindInStatusWithNullConnectionNullLimitNullOffset() throws SQLException {
		AuthorFinder.findInStatus(List.of(1L))
			.withConnection(null)
			.withLimit(null)
			.withOffset(null)
			.execute();
	}

	@Test
	public void testAuthorfindInStatusWithNullConnectionNullLimitNullOffsetSilent() throws SQLException {
		AuthorFinder.findInStatus(List.of(1L))
				.withConnection(null)
				.withLimit(null)
				.withOffset(null)
				.executeSilent();
	}

	@Test
	public void testAuthorfindAllToBeEvaluated() throws SQLException {
		AuthorFinder.findAllToBeEvaluated(new java.sql.Timestamp(System.currentTimeMillis())).execute();
	}

	@Test
	public void testAuthorfindAllToBeEvaluatedSilent() throws SQLException {
		AuthorFinder.findAllToBeEvaluated(new java.sql.Timestamp(System.currentTimeMillis())).executeSilent();
	}

	@Test
	public void testAuthorfindAllToBeEvaluatedLimitOffset() throws SQLException {
		AuthorFinder.findAllToBeEvaluated(new java.sql.Timestamp(System.currentTimeMillis()))
				.withLimit(0)
				.withOffset(0)
				.execute();
	}

	@Test
	public void testAuthorfindAllToBeEvaluatedLimitOffsetSilent() throws SQLException {
		AuthorFinder.findAllToBeEvaluated(new java.sql.Timestamp(System.currentTimeMillis()))
				.withLimit(0)
				.withOffset(0)
				.executeSilent();

	}

	@Test
	public void testAuthorfindAllToBeEvaluatedWithConnection() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			AuthorFinder.findAllToBeEvaluated(new java.sql.Timestamp(System.currentTimeMillis()))
				.withConnection(connection)
				.execute();
		}
	}

	@Test
	public void testAuthorfindAllToBeEvaluatedWithConnectionSilent() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			AuthorFinder.findAllToBeEvaluated(new java.sql.Timestamp(System.currentTimeMillis()))
				.withConnection(connection)
				.executeSilent();
		}
	}

	@Test
	public void testAuthorfindAllToBeEvaluatedWithNullConnection() throws SQLException {
		AuthorFinder.findAllToBeEvaluated(new java.sql.Timestamp(System.currentTimeMillis()))
			.withConnection(null)
			.execute();
	}

	@Test
	public void testAuthorfindAllToBeEvaluatedWithNullConnectionSilent() throws SQLException {
		AuthorFinder.findAllToBeEvaluated(new java.sql.Timestamp(System.currentTimeMillis()))
				.withConnection(null)
				.executeSilent();
	}

	@Test
	public void testAuthorfindAllToBeEvaluatedWithNullConnectionLimitOffset() throws SQLException {
		AuthorFinder.findAllToBeEvaluated(new java.sql.Timestamp(System.currentTimeMillis()))
			.withConnection(null)
			.withLimit(0)
			.withOffset(0)
			.execute();
	}

	@Test
	public void testAuthorfindAllToBeEvaluatedWithNullConnectionLimitOffsetSilent() throws SQLException {
		AuthorFinder.findAllToBeEvaluated(new java.sql.Timestamp(System.currentTimeMillis()))
				.withConnection(null)
				.withLimit(0)
				.withOffset(0)
				.executeSilent();
	}

	@Test
	public void testAuthorfindAllToBeEvaluatedWithNullConnectionNullLimitNullOffset() throws SQLException {
		AuthorFinder.findAllToBeEvaluated(new java.sql.Timestamp(System.currentTimeMillis()))
			.withConnection(null)
			.withLimit(null)
			.withOffset(null)
			.execute();
	}

	@Test
	public void testAuthorfindAllToBeEvaluatedWithNullConnectionNullLimitNullOffsetSilent() throws SQLException {
		AuthorFinder.findAllToBeEvaluated(new java.sql.Timestamp(System.currentTimeMillis()))
				.withConnection(null)
				.withLimit(null)
				.withOffset(null)
				.executeSilent();
	}

	@Test
	public void testAuthorfindFirstToBeEvaluated() throws SQLException {
		AuthorFinder.findFirstToBeEvaluated(new java.sql.Timestamp(System.currentTimeMillis())).execute();
	}

	@Test
	public void testAuthorfindFirstToBeEvaluatedSilent() throws SQLException {
		AuthorFinder.findFirstToBeEvaluated(new java.sql.Timestamp(System.currentTimeMillis())).executeSilent();
	}

	@Test
	public void testAuthorfindFirstToBeEvaluatedWithConnection() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			AuthorFinder.findFirstToBeEvaluated(new java.sql.Timestamp(System.currentTimeMillis()))
				.withConnection(connection)
				.execute();
		}
	}

	@Test
	public void testAuthorfindFirstToBeEvaluatedWithConnectionSilent() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			AuthorFinder.findFirstToBeEvaluated(new java.sql.Timestamp(System.currentTimeMillis()))
				.withConnection(connection)
				.executeSilent();
		}
	}

	@Test
	public void testAuthorfindFirstToBeEvaluatedWithNullConnection() throws SQLException {
		AuthorFinder.findFirstToBeEvaluated(new java.sql.Timestamp(System.currentTimeMillis()))
			.withConnection(null)
			.execute();
	}

	@Test
	public void testAuthorfindFirstToBeEvaluatedWithNullConnectionSilent() throws SQLException {
		AuthorFinder.findFirstToBeEvaluated(new java.sql.Timestamp(System.currentTimeMillis()))
				.withConnection(null)
				.executeSilent();
	}

	@Test
	public void testAuthorfindLimitedToBeEvaluated() throws SQLException {
		AuthorFinder.findLimitedToBeEvaluated(new java.sql.Timestamp(System.currentTimeMillis())).execute();
	}

	@Test
	public void testAuthorfindLimitedToBeEvaluatedSilent() throws SQLException {
		AuthorFinder.findLimitedToBeEvaluated(new java.sql.Timestamp(System.currentTimeMillis())).executeSilent();
	}

	@Test
	public void testAuthorfindLimitedToBeEvaluatedLimitOffset() throws SQLException {
		AuthorFinder.findLimitedToBeEvaluated(new java.sql.Timestamp(System.currentTimeMillis()))
				.withLimit(0)
				.withOffset(0)
				.execute();
	}

	@Test
	public void testAuthorfindLimitedToBeEvaluatedLimitOffsetSilent() throws SQLException {
		AuthorFinder.findLimitedToBeEvaluated(new java.sql.Timestamp(System.currentTimeMillis()))
				.withLimit(0)
				.withOffset(0)
				.executeSilent();

	}

	@Test
	public void testAuthorfindLimitedToBeEvaluatedWithConnection() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			AuthorFinder.findLimitedToBeEvaluated(new java.sql.Timestamp(System.currentTimeMillis()))
				.withConnection(connection)
				.execute();
		}
	}

	@Test
	public void testAuthorfindLimitedToBeEvaluatedWithConnectionSilent() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			AuthorFinder.findLimitedToBeEvaluated(new java.sql.Timestamp(System.currentTimeMillis()))
				.withConnection(connection)
				.executeSilent();
		}
	}

	@Test
	public void testAuthorfindLimitedToBeEvaluatedWithNullConnection() throws SQLException {
		AuthorFinder.findLimitedToBeEvaluated(new java.sql.Timestamp(System.currentTimeMillis()))
			.withConnection(null)
			.execute();
	}

	@Test
	public void testAuthorfindLimitedToBeEvaluatedWithNullConnectionSilent() throws SQLException {
		AuthorFinder.findLimitedToBeEvaluated(new java.sql.Timestamp(System.currentTimeMillis()))
				.withConnection(null)
				.executeSilent();
	}

	@Test
	public void testAuthorfindLimitedToBeEvaluatedWithNullConnectionLimitOffset() throws SQLException {
		AuthorFinder.findLimitedToBeEvaluated(new java.sql.Timestamp(System.currentTimeMillis()))
			.withConnection(null)
			.withLimit(0)
			.withOffset(0)
			.execute();
	}

	@Test
	public void testAuthorfindLimitedToBeEvaluatedWithNullConnectionLimitOffsetSilent() throws SQLException {
		AuthorFinder.findLimitedToBeEvaluated(new java.sql.Timestamp(System.currentTimeMillis()))
				.withConnection(null)
				.withLimit(0)
				.withOffset(0)
				.executeSilent();
	}

	@Test
	public void testAuthorfindLimitedToBeEvaluatedWithNullConnectionNullLimitNullOffset() throws SQLException {
		AuthorFinder.findLimitedToBeEvaluated(new java.sql.Timestamp(System.currentTimeMillis()))
			.withConnection(null)
			.withLimit(null)
			.withOffset(null)
			.execute();
	}

	@Test
	public void testAuthorfindLimitedToBeEvaluatedWithNullConnectionNullLimitNullOffsetSilent() throws SQLException {
		AuthorFinder.findLimitedToBeEvaluated(new java.sql.Timestamp(System.currentTimeMillis()))
				.withConnection(null)
				.withLimit(null)
				.withOffset(null)
				.executeSilent();
	}

	@Test
	public void testAuthorfindInNumber() throws SQLException {
		AuthorFinder.findInNumber(true, List.of(true), List.of(new java.sql.Timestamp(System.currentTimeMillis())), true, true).execute();
	}

	@Test
	public void testAuthorfindInNumberSilent() throws SQLException {
		AuthorFinder.findInNumber(true, List.of(true), List.of(new java.sql.Timestamp(System.currentTimeMillis())), true, true).executeSilent();
	}

	@Test
	public void testAuthorfindInNumberLimitOffset() throws SQLException {
		AuthorFinder.findInNumber(true, List.of(true), List.of(new java.sql.Timestamp(System.currentTimeMillis())), true, true)
				.withLimit(0)
				.withOffset(0)
				.execute();
	}

	@Test
	public void testAuthorfindInNumberLimitOffsetSilent() throws SQLException {
		AuthorFinder.findInNumber(true, List.of(true), List.of(new java.sql.Timestamp(System.currentTimeMillis())), true, true)
				.withLimit(0)
				.withOffset(0)
				.executeSilent();

	}

	@Test
	public void testAuthorfindInNumberWithConnection() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			AuthorFinder.findInNumber(true, List.of(true), List.of(new java.sql.Timestamp(System.currentTimeMillis())), true, true)
				.withConnection(connection)
				.execute();
		}
	}

	@Test
	public void testAuthorfindInNumberWithConnectionSilent() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			AuthorFinder.findInNumber(true, List.of(true), List.of(new java.sql.Timestamp(System.currentTimeMillis())), true, true)
				.withConnection(connection)
				.executeSilent();
		}
	}

	@Test
	public void testAuthorfindInNumberWithNullConnection() throws SQLException {
		AuthorFinder.findInNumber(true, List.of(true), List.of(new java.sql.Timestamp(System.currentTimeMillis())), true, true)
			.withConnection(null)
			.execute();
	}

	@Test
	public void testAuthorfindInNumberWithNullConnectionSilent() throws SQLException {
		AuthorFinder.findInNumber(true, List.of(true), List.of(new java.sql.Timestamp(System.currentTimeMillis())), true, true)
				.withConnection(null)
				.executeSilent();
	}

	@Test
	public void testAuthorfindInNumberWithNullConnectionLimitOffset() throws SQLException {
		AuthorFinder.findInNumber(true, List.of(true), List.of(new java.sql.Timestamp(System.currentTimeMillis())), true, true)
			.withConnection(null)
			.withLimit(0)
			.withOffset(0)
			.execute();
	}

	@Test
	public void testAuthorfindInNumberWithNullConnectionLimitOffsetSilent() throws SQLException {
		AuthorFinder.findInNumber(true, List.of(true), List.of(new java.sql.Timestamp(System.currentTimeMillis())), true, true)
				.withConnection(null)
				.withLimit(0)
				.withOffset(0)
				.executeSilent();
	}

	@Test
	public void testAuthorfindInNumberWithNullConnectionNullLimitNullOffset() throws SQLException {
		AuthorFinder.findInNumber(true, List.of(true), List.of(new java.sql.Timestamp(System.currentTimeMillis())), true, true)
			.withConnection(null)
			.withLimit(null)
			.withOffset(null)
			.execute();
	}

	@Test
	public void testAuthorfindInNumberWithNullConnectionNullLimitNullOffsetSilent() throws SQLException {
		AuthorFinder.findInNumber(true, List.of(true), List.of(new java.sql.Timestamp(System.currentTimeMillis())), true, true)
				.withConnection(null)
				.withLimit(null)
				.withOffset(null)
				.executeSilent();
	}

}
