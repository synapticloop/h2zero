package com.synapticloop.sample.h2zero.sqlite3.test.deleter;

// - - - - thoughtfully generated by synapticloop h2zero - - - - 
//    with the use of synapticloop templar templating language
//            (java/test/java-deleter-test.templar)


import static org.junit.Assert.*;

import org.junit.Assert;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;
import com.synapticloop.sample.h2zero.sqlite3.ConnectionManagerInitialiserOverride;
import com.synapticloop.h2zero.base.exception.H2ZeroFinderException;
import com.synapticloop.h2zero.base.manager.sqlite3.ConnectionManager;
import com.synapticloop.sample.h2zero.sqlite3.test.DatabaseSetupTest;


import java.sql.Connection;
import java.sql.SQLException;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;


import com.synapticloop.sample.h2zero.sqlite3.deleter.AuthorDeleter;

/**
 * WARNING NOTE: these tests are designed to test the generated SQL statements
 * __NOT__ whether the database actually returns sane results.
 */

public class AuthorTest extends DatabaseSetupTest {

	@Test
	public void testAuthorDeleteByPrimaryKey() throws SQLException {
		Assert.assertEquals(0, AuthorDeleter.deleteByPrimaryKey(1L).execute());
	}

	@Test
	public void testAuthorDeleteByPrimaryKeySilent() throws SQLException {
		Assert.assertEquals(0, AuthorDeleter.deleteByPrimaryKey(1L).executeSilent());
	}

	@Test
	public void testAuthorDeleteByPrimaryKeyWithConnection() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			Assert.assertEquals(0, AuthorDeleter.deleteByPrimaryKey(1L).withConnection(connection).execute());
		}
	}

	@Test
	public void testAuthorDeleteByPrimaryKeyWithConnectionSilent() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			Assert.assertEquals(0, AuthorDeleter.deleteByPrimaryKey(1L).withConnection(connection).executeSilent());
		}
	}

	@Test
	public void testAuthorDeleteAll() throws SQLException {
		Assert.assertEquals(0, AuthorDeleter.deleteAll().execute());
	}

	@Test
	public void testAuthorDeleteAllSilent() throws SQLException {
		Assert.assertEquals(0, AuthorDeleter.deleteAll().executeSilent());
	}

	@Test
	public void testAuthorDeleteAllWithConnection() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			Assert.assertEquals(0, AuthorDeleter.deleteAll().withConnection(connection).execute());
		}
	}

	@Test
	public void testAuthorDeleteAllWithConnectionSilent() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			Assert.assertEquals(0, AuthorDeleter.deleteAll().withConnection(connection).executeSilent());
		}
	}

	@Test
	public void testAuthordeleteInNumber() throws SQLException {
		Assert.assertEquals(0, AuthorDeleter.deleteInNumber(true, List.of(true), List.of(new java.sql.Timestamp(System.currentTimeMillis())), true, true).execute());
	}

	@Test
	public void testAuthordeleteInNumberSilent() throws SQLException {
		Assert.assertEquals(0, AuthorDeleter.deleteInNumber(true, List.of(true), List.of(new java.sql.Timestamp(System.currentTimeMillis())), true, true).executeSilent());
	}

	@Test
	public void testAuthordeleteInNumberWithConnection() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()){
			Assert.assertEquals(0, AuthorDeleter.deleteInNumber(true, List.of(true), List.of(new java.sql.Timestamp(System.currentTimeMillis())), true, true).withConnection(connection).execute());
		}
	}

	@Test
	public void testAuthordeleteInNumberWithConnectionSilent() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()){
			Assert.assertEquals(0, AuthorDeleter.deleteInNumber(true, List.of(true), List.of(new java.sql.Timestamp(System.currentTimeMillis())), true, true).withConnection(connection).executeSilent());
		}
	}

	@Test
	public void testAuthordeleteAllToBeEvaluated() throws SQLException {
		Assert.assertEquals(0, AuthorDeleter.deleteAllToBeEvaluated().execute());
	}

	@Test
	public void testAuthordeleteAllToBeEvaluatedSilent() throws SQLException {
		Assert.assertEquals(0, AuthorDeleter.deleteAllToBeEvaluated().executeSilent());
	}

	@Test
	public void testAuthordeleteAllToBeEvaluatedWithConnection() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()){
			Assert.assertEquals(0, AuthorDeleter.deleteAllToBeEvaluated().withConnection(connection).execute());
		}
	}

	@Test
	public void testAuthordeleteAllToBeEvaluatedWithConnectionSilent() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()){
			Assert.assertEquals(0, AuthorDeleter.deleteAllToBeEvaluated().withConnection(connection).executeSilent());
		}
	}

}
