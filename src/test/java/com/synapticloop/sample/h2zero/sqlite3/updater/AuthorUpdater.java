package com.synapticloop.sample.h2zero.sqlite3.updater;

// - - - - thoughtfully generated by synapticloop h2zero - - - - 
//    with the use of synapticloop templar templating language
//              (java-create-updater.templar)

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Types;
import java.sql.Timestamp;

import com.synapticloop.h2zero.base.manager.sqlite3.ConnectionManager;
import com.synapticloop.h2zero.base.sql.limitoffset.Updater;
import com.synapticloop.sample.h2zero.sqlite3.model.util.Constants;


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


public class AuthorUpdater {
	// the binder is unused in code, but will generate compile problems if this 
	// class is no longer referenced in the h2zero file. Just a nicety for
	// removing dead code
	@SuppressWarnings("unused")
	private static final String BINDER = Constants.AUTHOR_BINDER;

	private static final Logger LOGGER = LoggerFactory.getLogger(AuthorUpdater.class);

	// static fields generated by synapticloop h2zero
	private static final String SQL_UPDATE_START = "update author ";

	// static fields generated from the user input
	private static final String SQL_UPDATE_NUM_FOLLOWERS = SQL_UPDATE_START + " set num_followers = ? ";
	private static final String SQL_UPDATE_ID_AUTHOR = SQL_UPDATE_START + " set id_author = ? ";
	private static final String SQL_UPDATE_ID_AUTHOR_NUM_FOLLOWERS = SQL_UPDATE_START + " set id_author,num_followers = ? id_author,num_followers = ? , ";
	private static final String SQL_RESET_AUTHORS_TO_BE_FOLLOWED = SQL_UPDATE_START + "  set id_author_status = (select id_author_status from author_status where txt_author_status = 'FOLLOWED') " + "  where id_author_status = (select id_author_status from author_status where txt_author_status = 'TO_BE_EVALUATED') and dtm_started_following < ? order by dtm_started_following ";
	private static final String SQL_SET_FL_IS_UPDATING = SQL_UPDATE_START + " set fl_is_updating = ?";
	private static final String SQL_SET_FL_IS_UPDATING_WHERE_FL_AUTHOR_IS_FOLLOWED_BY_USER = SQL_UPDATE_START + " set fl_is_updating = ?" + " where fl_author_is_followed_by_user = 1";
	private static final String SQL_SET_FL_AUTHOR_IS_FOLLOWED_BY_USER_WHERE_FL_IS_UPDATING = SQL_UPDATE_START + " set fl_author_is_followed_by_user = ?, fl_is_updating = 1" + " where fl_is_updating = 1";
	private static final String SQL_SET_FL_IS_UPDATING_WHERE_FL_AUTHOR_IS_FOLLOWING_USER = SQL_UPDATE_START + " set fl_is_updating = ?" + " where fl_author_is_following_user = 1";
	private static final String SQL_SET_FL_AUTHOR_IS_FOLLOWING_USER_WHERE_FL_IS_UPDATING = SQL_UPDATE_START + " set fl_author_is_following_user = ?, fl_is_updating = 1" + " where fl_is_updating = 1";
	private static final String SQL_UPDATE_FL_IS_FOLLOWING = SQL_UPDATE_START + " set fl_is = ?";
	private static final String SQL_UPDATE_ALL_TO_BE_EVALUATED_TO_FOLLOWED = SQL_UPDATE_START + " set id_status_author = (select id_author_status from author_status where txt_author_status = 'FOLLOWED')" + "  where id_author_status = (select id_author_status from author_status where txt_author_status = 'TO_BE_EVALUATED') and dtm_started_following < ? ";

	private AuthorUpdater() {}

	/**
	 * This is the updater for 'updateNumFollowers' and will throw a SQLException on error
	 * See the 'updateNumFollowersSilent' method for a non-throwing method.
	 * 
	 * 
	 * @param numFollowersSet the field to set as a Long
	 * 
	 * @return The Updater 
	 */ 

	public static Updater updateNumFollowers(Long numFollowersSet) {
		return(
  				new Updater(
  				LOGGER,
  				SQL_UPDATE_NUM_FOLLOWERS,
  				new Object[] { numFollowersSet }
  		));
  	}
	/**
	 * This is the updater for 'updateIdAuthor' and will throw a SQLException on error
	 * See the 'updateIdAuthorSilent' method for a non-throwing method.
	 * 
	 * 
	 * @param idAuthorSet the field to set as a Long
	 * 
	 * @return The Updater 
	 */ 

	public static Updater updateIdAuthor(Long idAuthorSet) {
		return(
  				new Updater(
  				LOGGER,
  				SQL_UPDATE_ID_AUTHOR,
  				new Object[] { idAuthorSet }
  		));
  	}
	/**
	 * This is the updater for 'updateIdAuthorNumFollowers' and will throw a SQLException on error
	 * See the 'updateIdAuthorNumFollowersSilent' method for a non-throwing method.
	 * 
	 * 
	 * @param idAuthorSet the field to set as a Long
	 * @param numFollowersSet the field to set as a Long
	 * 
	 * @return The Updater 
	 */ 

	public static Updater updateIdAuthorNumFollowers(Long idAuthorSet, Long numFollowersSet) {
		return(
  				new Updater(
  				LOGGER,
  				SQL_UPDATE_ID_AUTHOR_NUM_FOLLOWERS,
  				new Object[] { idAuthorSet, numFollowersSet }
  		));
  	}
	/**
	 * This is the updater for 'resetAuthorsToBeFollowed' and will throw a SQLException on error
	 * See the 'resetAuthorsToBeFollowedSilent' method for a non-throwing method.
	 * 
	 * 
	 * @param dtmStartedFollowing - The where clause to set as a Timestamp
	 * 
	 * @return The Updater 
	 */ 

	public static Updater resetAuthorsToBeFollowed(Timestamp dtmStartedFollowing) {
		return(
  				new Updater(
  				LOGGER,
  				SQL_RESET_AUTHORS_TO_BE_FOLLOWED,
  				new Object[] { dtmStartedFollowing }
  		));
  	}
	/**
	 * This is the updater for 'setFlIsUpdating' and will throw a SQLException on error
	 * See the 'setFlIsUpdatingSilent' method for a non-throwing method.
	 * 
	 * 
	 * @param flIsUpdatingSet the field to set as a Boolean
	 * 
	 * @return The Updater 
	 */ 

	public static Updater setFlIsUpdating(Boolean flIsUpdatingSet) {
		return(
  				new Updater(
  				LOGGER,
  				SQL_SET_FL_IS_UPDATING,
  				new Object[] { flIsUpdatingSet }
  		));
  	}
	/**
	 * This is the updater for 'setFlIsUpdatingWhereFlAuthorIsFollowedByUser' and will throw a SQLException on error
	 * See the 'setFlIsUpdatingWhereFlAuthorIsFollowedByUserSilent' method for a non-throwing method.
	 * 
	 * 
	 * @param flIsUpdatingSet the field to set as a Boolean
	 * 
	 * @return The Updater 
	 */ 

	public static Updater setFlIsUpdatingWhereFlAuthorIsFollowedByUser(Boolean flIsUpdatingSet) {
		return(
  				new Updater(
  				LOGGER,
  				SQL_SET_FL_IS_UPDATING_WHERE_FL_AUTHOR_IS_FOLLOWED_BY_USER,
  				new Object[] { flIsUpdatingSet }
  		));
  	}
	/**
	 * This is the updater for 'setFlAuthorIsFollowedByUserWhereFlIsUpdating' and will throw a SQLException on error
	 * See the 'setFlAuthorIsFollowedByUserWhereFlIsUpdatingSilent' method for a non-throwing method.
	 * 
	 * 
	 * @param flAuthorIsFollowedByUserSet the field to set as a Boolean
	 * 
	 * @return The Updater 
	 */ 

	public static Updater setFlAuthorIsFollowedByUserWhereFlIsUpdating(Boolean flAuthorIsFollowedByUserSet) {
		return(
  				new Updater(
  				LOGGER,
  				SQL_SET_FL_AUTHOR_IS_FOLLOWED_BY_USER_WHERE_FL_IS_UPDATING,
  				new Object[] { flAuthorIsFollowedByUserSet }
  		));
  	}
	/**
	 * This is the updater for 'setFlIsUpdatingWhereFlAuthorIsFollowingUser' and will throw a SQLException on error
	 * See the 'setFlIsUpdatingWhereFlAuthorIsFollowingUserSilent' method for a non-throwing method.
	 * 
	 * 
	 * @param flIsUpdatingSet the field to set as a Boolean
	 * 
	 * @return The Updater 
	 */ 

	public static Updater setFlIsUpdatingWhereFlAuthorIsFollowingUser(Boolean flIsUpdatingSet) {
		return(
  				new Updater(
  				LOGGER,
  				SQL_SET_FL_IS_UPDATING_WHERE_FL_AUTHOR_IS_FOLLOWING_USER,
  				new Object[] { flIsUpdatingSet }
  		));
  	}
	/**
	 * This is the updater for 'setFlAuthorIsFollowingUserWhereFlIsUpdating' and will throw a SQLException on error
	 * See the 'setFlAuthorIsFollowingUserWhereFlIsUpdatingSilent' method for a non-throwing method.
	 * 
	 * 
	 * @param flAuthorIsFollowingUserSet the field to set as a Boolean
	 * 
	 * @return The Updater 
	 */ 

	public static Updater setFlAuthorIsFollowingUserWhereFlIsUpdating(Boolean flAuthorIsFollowingUserSet) {
		return(
  				new Updater(
  				LOGGER,
  				SQL_SET_FL_AUTHOR_IS_FOLLOWING_USER_WHERE_FL_IS_UPDATING,
  				new Object[] { flAuthorIsFollowingUserSet }
  		));
  	}
	/**
	 * This is the updater for 'updateFlIsFollowing' and will throw a SQLException on error
	 * See the 'updateFlIsFollowingSilent' method for a non-throwing method.
	 * 
	 * 
	 * @param flIsUpdatingSet the field to set as a Boolean
	 * 
	 * @return The Updater 
	 */ 

	public static Updater updateFlIsFollowing(Boolean flIsUpdatingSet) {
		return(
  				new Updater(
  				LOGGER,
  				SQL_UPDATE_FL_IS_FOLLOWING,
  				new Object[] { flIsUpdatingSet }
  		));
  	}
	/**
	 * This is the updater for 'updateAllToBeEvaluatedToFollowed' and will throw a SQLException on error
	 * See the 'updateAllToBeEvaluatedToFollowedSilent' method for a non-throwing method.
	 * 
	 * 
	 * @param dtmStartedFollowing - The where clause to set as a Timestamp
	 * 
	 * @return The Updater 
	 */ 

	public static Updater updateAllToBeEvaluatedToFollowed(Timestamp dtmStartedFollowing) {
		return(
  				new Updater(
  				LOGGER,
  				SQL_UPDATE_ALL_TO_BE_EVALUATED_TO_FOLLOWED,
  				new Object[] { dtmStartedFollowing }
  		));
  	}
}