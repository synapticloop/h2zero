package com.synapticloop.sample.h2zero.sqlite3.test.question;

//        - - - - thoughtfully generated by synapticloop h2zero - - - -        
//          with the use of synapticloop templar templating language
//                    (/java/test/java-question-test.templar)


import static org.junit.Assert.*;

import org.junit.Assert;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;
import com.synapticloop.sample.h2zero.sqlite3.ConnectionManagerInitialiserOverride;
import com.synapticloop.h2zero.base.manager.sqlite3.ConnectionManager;
import com.synapticloop.sample.h2zero.sqlite3.test.DatabaseSetupTest;


import java.math.*;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.sql.*;
import java.util.List;


import com.synapticloop.sample.h2zero.sqlite3.question.UserQuestion;

/**
 * <p><strong>WARNING NOTE:</strong> these tests are designed to test the generated SQL statements
 * <strong>__NOT__<strong> whether the database actually returns sane results.<p>
 */

public class UserTest extends DatabaseSetupTest {

	@Test
	public void testUserdoWeHaveMoreThanTwentyUsers() throws SQLException {
		UserQuestion.doWeHaveMoreThanTwentyUsers()
				.execute();
	}

	@Test
	public void testUserdoWeHaveMoreThanTwentyUsersSilent() {
		UserQuestion.doWeHaveMoreThanTwentyUsers()
				.executeSilent();
	}

	@Test
	public void testUserdoWeHaveMoreThanTwentyUsersWithConnection() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			UserQuestion.doWeHaveMoreThanTwentyUsers()
					.withConnection(connection)
					.execute();
		}
	}

	@Test
	public void testUserdoWeHaveMoreThanTwentyUsersWithConnectionSilent() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			UserQuestion.doWeHaveMoreThanTwentyUsers()
					.withConnection(connection)
					.executeSilent();
		}
	}

	@Test
	public void testUserdoWeHaveMoreThanTwentyUsersWithNullConnection() throws SQLException {
			UserQuestion.doWeHaveMoreThanTwentyUsers()
				.withConnection(null)
				.execute();
	}

	@Test
	public void testUserdoWeHaveMoreThanTwentyUsersWithNullConnectionSilent() {
		UserQuestion.doWeHaveMoreThanTwentyUsers()
				.withConnection(null)
				.executeSilent();
	}

	@Test
	public void testUserdoesUserNameExist() throws SQLException {
		UserQuestion.doesUserNameExist()
				.execute();
	}

	@Test
	public void testUserdoesUserNameExistSilent() {
		UserQuestion.doesUserNameExist()
				.executeSilent();
	}

	@Test
	public void testUserdoesUserNameExistWithConnection() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			UserQuestion.doesUserNameExist()
					.withConnection(connection)
					.execute();
		}
	}

	@Test
	public void testUserdoesUserNameExistWithConnectionSilent() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			UserQuestion.doesUserNameExist()
					.withConnection(connection)
					.executeSilent();
		}
	}

	@Test
	public void testUserdoesUserNameExistWithNullConnection() throws SQLException {
			UserQuestion.doesUserNameExist()
				.withConnection(null)
				.execute();
	}

	@Test
	public void testUserdoesUserNameExistWithNullConnectionSilent() {
		UserQuestion.doesUserNameExist()
				.withConnection(null)
				.executeSilent();
	}

	@Test
	public void testUserdoWeHaveUsersBetweenAgeExclusive() throws SQLException {
		UserQuestion.doWeHaveUsersBetweenAgeExclusive(1, 1)
				.execute();
	}

	@Test
	public void testUserdoWeHaveUsersBetweenAgeExclusiveSilent() {
		UserQuestion.doWeHaveUsersBetweenAgeExclusive(1, 1)
				.executeSilent();
	}

	@Test
	public void testUserdoWeHaveUsersBetweenAgeExclusiveWithConnection() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			UserQuestion.doWeHaveUsersBetweenAgeExclusive(1, 1)
					.withConnection(connection)
					.execute();
		}
	}

	@Test
	public void testUserdoWeHaveUsersBetweenAgeExclusiveWithConnectionSilent() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			UserQuestion.doWeHaveUsersBetweenAgeExclusive(1, 1)
					.withConnection(connection)
					.executeSilent();
		}
	}

	@Test
	public void testUserdoWeHaveUsersBetweenAgeExclusiveWithNullConnection() throws SQLException {
			UserQuestion.doWeHaveUsersBetweenAgeExclusive(1, 1)
				.withConnection(null)
				.execute();
	}

	@Test
	public void testUserdoWeHaveUsersBetweenAgeExclusiveWithNullConnectionSilent() {
		UserQuestion.doWeHaveUsersBetweenAgeExclusive(1, 1)
				.withConnection(null)
				.executeSilent();
	}

	@Test
	public void testUserdoWeHaveUsersInAges() throws SQLException {
		UserQuestion.doWeHaveUsersInAges(List.of(1))
				.execute();
	}

	@Test
	public void testUserdoWeHaveUsersInAgesSilent() {
		UserQuestion.doWeHaveUsersInAges(List.of(1))
				.executeSilent();
	}

	@Test
	public void testUserdoWeHaveUsersInAgesWithConnection() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			UserQuestion.doWeHaveUsersInAges(List.of(1))
					.withConnection(connection)
					.execute();
		}
	}

	@Test
	public void testUserdoWeHaveUsersInAgesWithConnectionSilent() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			UserQuestion.doWeHaveUsersInAges(List.of(1))
					.withConnection(connection)
					.executeSilent();
		}
	}

	@Test
	public void testUserdoWeHaveUsersInAgesWithNullConnection() throws SQLException {
			UserQuestion.doWeHaveUsersInAges(List.of(1))
				.withConnection(null)
				.execute();
	}

	@Test
	public void testUserdoWeHaveUsersInAgesWithNullConnectionSilent() {
		UserQuestion.doWeHaveUsersInAges(List.of(1))
				.withConnection(null)
				.executeSilent();
	}

}
