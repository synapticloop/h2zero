package com.synapticloop.sample.h2zero.sqlite3.deleter;

// - - - - thoughtfully generated by synapticloop h2zero - - - - 
//    with the use of synapticloop templar templating language
//                (java-create-deleter.templar)

import java.sql.Connection;
import java.sql.Timestamp;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.*;
import java.math.BigDecimal;
import java.util.List;
import java.util.ArrayList;
import com.synapticloop.h2zero.util.LruCache;

import com.synapticloop.h2zero.base.manager.sqlite3.ConnectionManager;
import com.synapticloop.h2zero.base.sql.sqlite3.Deleter;


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


import com.synapticloop.sample.h2zero.sqlite3.model.util.Constants;

public class AuthorDeleter {
	// the binder is unused in code, but will generate compile problems if this 
	// class is no longer referenced in the h2zero file. Just a nicety for
	// removing dead code
	@SuppressWarnings("unused")
	private static final String BINDER = Constants.AUTHOR_BINDER;

	private static final Logger LOGGER = LoggerFactory.getLogger(AuthorDeleter.class);

	// static fields generated by synapticloop h2zero
	private static final String SQL_BUILTIN_DELETE_ALL = "delete from author";
	private static final String SQL_DELETE_START = "delete from author ";
	private static final String SQL_BUILTIN_DELETE_BY_PRIMARY_KEY = SQL_DELETE_START + "where id_author = ?";

	// static fields generated from the user input
	private static final String SQL_DELETE_IN_NUMBER = SQL_DELETE_START + "  where fl_is_updating = ? and fl_is_updating in (...) and dtm_started_following in (...) and fl_is_updating = ? and fl_is_updating = ? ";
	private static final String SQL_DELETE_ALL_TO_BE_EVALUATED = SQL_DELETE_START + " where fl_is_updating = 0";
	// This is the cache for 'in Deleter' which have an ellipses (...) in the statement
	private static final LruCache<String, String> deleteInNumber_limit_statement_cache = new LruCache<>(1024);
	// now for the statement limit cache(s)
	private static final LruCache<String, String> deleteAll_limit_statement_cache = new LruCache<>(1024);
	private static final LruCache<String, String> deleteAllToBeEvaluated_limit_statement_cache = new LruCache<>(1024);

	// We don't allow instantiation
	private AuthorDeleter() {}

 	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 	 * 
 	 * The following deleters are built in by h2zero and are always generated 
 	 * 
 	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

	/**
	 * Delete a row in the AUTHOR table by its primary key
	 * 
	 * @param idAuthor the primary key to delete
	 * 
	 * @return the number of rows deleted
	 * 
	 */
	public static Deleter deleteByPrimaryKey(Long idAuthor) {
		return(
				new Deleter(
				LOGGER,
				SQL_BUILTIN_DELETE_BY_PRIMARY_KEY,
				new Object[] { idAuthor }
		));
	}
	/**
	 * Delete all of the rows in the table 'author'.
	 * 
	 * This database does not have the 'truncate' keyword hence the 'DELETE FROM' SQL
	 * statement is used
	 * 
	 * 
	 * @return The number of rows affected by this statement
	 */
	public static Deleter deleteAll() {
		return(
				new Deleter(
				LOGGER,
				SQL_BUILTIN_DELETE_ALL,
				new Object[] { }
		));
	}
	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * 
	 *     USER DEFINED DELETERS FOR THE TABLE: author
	 * 
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * 
	 * This is the start of the user defined Deleters which are generated
	 * through either the "deleters" JSON key, or the "fieldDeleters" JSON
	 * key.
	 * 
	 * There are 2 defined Deleters on the author table:
	 * 
	 * - deleteInNumber - from 'deleter' JSON key 
	 * - deleteAllToBeEvaluated - from 'deleter' JSON key 
	 * 
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

	// USER DEFINED DELETER CONNECTION, PARAMS, LIMIT
	/**
	 * deleteInNumber - from 'deleters' JSON key
	 *
	 * This is the main method for all other deleter methods with the same prefix,
	 * including the (silent method signatures).  All methods chain to this one.
	 * 
	 * @param flIsUpdating - maps to the fl_is_updating field (from the where clause)
	 * @param flIsUpdatingList - maps to the fl_is_updating field (from the where clause)
	 * @param dtmStartedFollowingList - maps to the dtm_started_following field (from the where clause)
	 * @param flIsUpdatingOne - maps to the fl_is_updating field (from the where clause)
	 * @param flIsUpdatingTwo - maps to the fl_is_updating field (from the where clause)
	 * 
	 * @return the Deleter
	 * 
	 */
	public static Deleter deleteInNumber(Boolean flIsUpdating, List<Boolean> flIsUpdatingList, List<Timestamp> dtmStartedFollowingList, Boolean flIsUpdatingOne, Boolean flIsUpdatingTwo ) {
		return(
				new Deleter(
				LOGGER,
				SQL_DELETE_IN_NUMBER,
				new Object[] {flIsUpdating, flIsUpdatingList, dtmStartedFollowingList, flIsUpdatingOne, flIsUpdatingTwo }
		));
	}
	// USER DEFINED DELETER CONNECTION, PARAMS, LIMIT
	/**
	 * deleteAllToBeEvaluated - from 'deleters' JSON key
	 *
	 * This is the main method for all other deleter methods with the same prefix,
	 * including the (silent method signatures).  All methods chain to this one.
	 * 
	 * 
	 * @return the Deleter
	 * 
	 */
	public static Deleter deleteAllToBeEvaluated( ) {
		return(
				new Deleter(
				LOGGER,
				SQL_DELETE_ALL_TO_BE_EVALUATED,
				new Object[] { }
		));
	}
}