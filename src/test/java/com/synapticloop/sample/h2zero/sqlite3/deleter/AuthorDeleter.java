package com.synapticloop.sample.h2zero.sqlite3.deleter;

// - - - - thoughtfully generated by synapticloop h2zero - - - - 
//    with the use of synapticloop templar templating language
//                (java-create-deleter.templar)

import java.sql.Connection;
import java.sql.Timestamp;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.*;
import java.math.BigDecimal;
import java.util.List;
import java.util.ArrayList;
import com.synapticloop.h2zero.util.LruCache;

import com.synapticloop.h2zero.base.manager.sqlite3.ConnectionManager;


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


import com.synapticloop.sample.h2zero.sqlite3.model.util.Constants;

public class AuthorDeleter {
	// the binder is unused in code, but will generate compile problems if this 
	// class is no longer referenced in the h2zero file. Just a nicety for
	// removing dead code
	@SuppressWarnings("unused")
	private static final String BINDER = Constants.AUTHOR_BINDER;

	private static final Logger LOGGER = LoggerFactory.getLogger(AuthorDeleter.class);

	// static fields generated by synapticloop h2zero
	private static final String SQL_BUILTIN_DELETE_ALL = "delete from author";
	private static final String SQL_DELETE_START = "delete from author ";
	private static final String SQL_BUILTIN_DELETE_BY_PRIMARY_KEY = SQL_DELETE_START + "where id_author = ?";

	// static fields generated from the user input
	private static final String SQL_DELETE_IN_NUMBER = SQL_DELETE_START + "  where fl_is_updating = ? and fl_is_updating in (...) and dtm_started_following in (...) and fl_is_updating = ? and fl_is_updating = ? ";
	private static final String SQL_DELETE_ALL_TO_BE_EVALUATED = SQL_DELETE_START + " where fl_is_updating = 0";
	// This is the cache for 'in Deleter' which have an ellipses (...) in the statement
	private static final LruCache<String, String> deleteInNumber_limit_statement_cache = new LruCache<>(1024);
	// now for the statement limit cache(s)
	private static final LruCache<String, String> deleteAll_limit_statement_cache = new LruCache<>(1024);
	private static final LruCache<String, String> deleteAllToBeEvaluated_limit_statement_cache = new LruCache<>(1024);

	// We don't allow instantiation
	private AuthorDeleter() {}

 	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 	 * 
 	 * The following deleters are built in by h2zero and are always generated 
 	 * 
 	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

	/**
	 * Delete a row in the AUTHOR table by its primary key
	 * 
	 * @param connection The connection to use - the caller must close this connection
	 * @param idAuthor the primary key to delete
	 * 
	 * @return the number of rows deleted
	 * 
	 * @throws SQLException if there was an error in the delete
	 */
	public static int deleteByPrimaryKey(Connection connection, Long idAuthor) throws SQLException {
		try (PreparedStatement preparedStatement = connection.prepareStatement(SQL_BUILTIN_DELETE_BY_PRIMARY_KEY)) {
			preparedStatement.setLong(1, idAuthor);
			return(preparedStatement.executeUpdate());
		}
	}

	/**
	 * Delete a row in the AUTHOR table by its primary key
	 * 
	 * @param idAuthor the primary key to delete
	 * 
	 * @return the number of rows deleted
	 * 
	 * @throws SQLException if there was an error in the delete
	 */
	public static int deleteByPrimaryKey(Long idAuthor) throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			return(deleteByPrimaryKey(connection, idAuthor));
		}
	}

	/**
	 * Delete a row in the AUTHOR table by its primary key silently
	 * (i.e. don't throw an exception if it couldn't be deleted).
	 * 
	 * @param connection - the connection to use - the caller must close this connection
	 * @param idAuthor the primary key to delete
	 * 
	 * @return the number of rows deleted
	 */
	public static int deleteByPrimaryKeySilent(Connection connection, Long idAuthor) {
		try {
			return(deleteByPrimaryKey(connection, idAuthor));
		} catch (SQLException ex) {
			LOGGER.error("Could not deleteByPrimaryKey, a SQL Exception occurred.", ex);
			return(-1);
		}
	}

	/**
	 * Delete a row in the AUTHOR table by its primary key silently
	 * (i.e. don't throw an exception if it coudn't be deleted).
	 * 
	 * @param idAuthor the primary key to delete
	 * 
	 * @return the number of rows deleted or -1 if there was an error
	 */
	public static int deleteByPrimaryKeySilent(Long idAuthor) {
		try (Connection connection = ConnectionManager.getConnection()) {
			return(deleteByPrimaryKeySilent(connection, idAuthor));
		} catch (SQLException ex) {
			LOGGER.error("Could not deleteByPrimaryKey, a SQL Exception occurred.", ex);
			return(-1);
		}
	}

	/**
	 * Delete all of the rows in the table 'author'.
	 * 
	 * This database does not have the 'truncate' keyword hence the 'DELETE FROM' SQL
	 * statement is used
	 * 
	 * @param connection - the connection to use - the caller must close this connection
	 * 
	 * @return The number of rows affected by this statement
	 */
	public static int deleteAll(Connection connection) throws SQLException {
		try (PreparedStatement preparedStatement = connection.prepareStatement(SQL_BUILTIN_DELETE_ALL)) {
			return(preparedStatement.executeUpdate());
		} catch (SQLException ex) {
			LOGGER.error("Could not deleteAll, a SQL Exception occurred.", ex);
			return(-1);
		}
	}

	/**
	 * Delete all the rows in the AUTHOR table
	 * 
	 * @return the number of rows deleted
	 * 
	 * @throws SQLException if there was an error in the delete
	 */
	public static int deleteAll() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			return(deleteAll(connection));
		}
	}

	/**
	 * Delete all the rows in the AUTHOR table silently - i.e
	 * swallow any SQL exceptions
	 * 
	 * @param connection - the connection to use - the caller must close this connection
	 * 
	 * @return the number of rows deleted or -1 if there was an error
	 */
	public static int deleteAllSilent(Connection connection) {
		try {
			return(deleteAll(connection));
		} catch (SQLException ex) {
			LOGGER.error("Could not deleteAll, a SQL Exception occurred.", ex);
			return(-1);
		}
	}

	/**
	 * Delete all the rows in the AUTHOR table silently - i.e
	 * swallow any SQL exceptions
	 * 
	 * @return the number of rows deleted, or -1 if there was an error
	 */
	public static int deleteAllSilent() {
		try (Connection connection = ConnectionManager.getConnection()) {
			return(deleteAll(connection));
		} catch (SQLException ex) {
			LOGGER.error("Could not deleteAll, a SQL Exception occurred.", ex);
			return(-1);
		}
	}

	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * 
	 *     USER DEFINED DELETERS FOR THE TABLE: author
	 * 
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * 
	 * This is the start of the user defined Deleters which are generated
	 * through either the "deleters" JSON key, or the "fieldDeleters" JSON
	 * key.
	 * 
	 * There are 2 defined Deleters on the author table:
	 * 
	 * - deleteInNumber - from 'deleter' JSON key 
	 * - deleteAllToBeEvaluated - from 'deleter' JSON key 
	 * 
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

	// USER DEFINED DELETER CONNECTION, PARAMS - NO LIMIT - SQLITE3 STATEMENT
	/**
	 * deleteInNumber - from 'deleters' JSON key
	 *
	 * This is the main method for all other deleter methods with the same prefix,
	 * including the (silent method signatures).  All methods chain to this one.
	 * 
	 * @param connection - the connection - the caller __MUST__ close this connection
	 *        if the caller created this connection. If the passed in connection is 
	 *        null, then a new connection will be created, utilised, and closed within
	 *        this method.
	 * @param flIsUpdating - maps to the fl_is_updating field (from the where clause)
	 * @param flIsUpdatingList - maps to the fl_is_updating field (from the where clause)
	 * @param dtmStartedFollowingList - maps to the dtm_started_following field (from the where clause)
	 * @param flIsUpdatingOne - maps to the fl_is_updating field (from the where clause)
	 * @param flIsUpdatingTwo - maps to the fl_is_updating field (from the where clause)
	 * 
	 * @return the number of rows deleted
	 * 
	 * @throws SQLException if there was an error in the deletion
	 */
	public static int deleteInNumber(Connection connection, Boolean flIsUpdating, List<Boolean> flIsUpdatingList, List<Timestamp> dtmStartedFollowingList, Boolean flIsUpdatingOne, Boolean flIsUpdatingTwo) throws SQLException {
		String cacheKey = "cacheKey"  + ":" + flIsUpdatingList.size() + ":"  + dtmStartedFollowingList.size() + ":"  + "";
		boolean hasConnection = (null != connection);
		String statement = null;
		if(!deleteInNumber_limit_statement_cache.containsKey(cacheKey)) {
			// place the cacheKey in the cache for later use

			String preparedStatementTemp = SQL_DELETE_IN_NUMBER;
			StringBuilder whereFieldStringBuilder = null;
			whereFieldStringBuilder = new StringBuilder();
			for(int i = 0; i < flIsUpdatingList.size(); i++) {
				if(i > 0) {
					whereFieldStringBuilder.append(", ");
				}
				whereFieldStringBuilder.append("?");
			}
			preparedStatementTemp = preparedStatementTemp.replaceFirst("\\.\\.\\.", whereFieldStringBuilder.toString());
			whereFieldStringBuilder = new StringBuilder();
			for(int i = 0; i < dtmStartedFollowingList.size(); i++) {
				if(i > 0) {
					whereFieldStringBuilder.append(", ");
				}
				whereFieldStringBuilder.append("?");
			}
			preparedStatementTemp = preparedStatementTemp.replaceFirst("\\.\\.\\.", whereFieldStringBuilder.toString());
			StringBuilder stringBuilder = new StringBuilder(preparedStatementTemp);

			statement = stringBuilder.toString();
			deleteInNumber_limit_statement_cache.put(cacheKey, statement);
		} else {
			statement = deleteInNumber_limit_statement_cache.get(cacheKey);
		}

		if(!hasConnection) {
			connection = ConnectionManager.getConnection();
		}
		try (PreparedStatement preparedStatement = connection.prepareStatement(statement)) {
			int i = 1;
			ConnectionManager.setBoolean(preparedStatement, i, flIsUpdating);
			i++;
			for (Boolean flIsUpdatingIn : flIsUpdatingList) {
				ConnectionManager.setBoolean(preparedStatement, i, flIsUpdatingIn);
				i++;
			}
			for (Timestamp dtmStartedFollowingIn : dtmStartedFollowingList) {
				ConnectionManager.setDatetime(preparedStatement, i, dtmStartedFollowingIn);
				i++;
			}
			ConnectionManager.setBoolean(preparedStatement, i, flIsUpdatingOne);
			i++;
			ConnectionManager.setBoolean(preparedStatement, i, flIsUpdatingTwo);
			i++;

			return(preparedStatement.executeUpdate());
		}
	}

  	// USER DEFINED DELETER CONNECTION, PARAMS SILENT
  	/**
  	 * deleteInNumber - from 'deleters' JSON key
  	 *
  	 * This is the main method for all other deleter methods with the same prefix,
  	 * including the (silent method signatures).  All methods chain to this one.
  	 * 
            	 * @param connection - the connection - the caller __MUST__ close this connection
	 *        if the caller created this connection. If the passed in connection is 
	 *        null, then a new connection will be created, utilised, and closed within
	 *        this method.
	 * @param flIsUpdating - maps to the fl_is_updating field (from the where clause)
	 * @param flIsUpdatingList - maps to the fl_is_updating field (from the where clause)
	 * @param dtmStartedFollowingList - maps to the dtm_started_following field (from the where clause)
	 * @param flIsUpdatingOne - maps to the fl_is_updating field (from the where clause)
	 * @param flIsUpdatingTwo - maps to the fl_is_updating field (from the where clause)
  	 * 
  	 * @return the number of rows deleted
  	 */
  	public static int deleteInNumberSilent(Connection connection, Boolean flIsUpdating, List<Boolean> flIsUpdatingList, List<Timestamp> dtmStartedFollowingList, Boolean flIsUpdatingOne, Boolean flIsUpdatingTwo) {
  		try {
  			return(deleteInNumber(connection,   flIsUpdating  ,     flIsUpdatingList  ,     dtmStartedFollowingList  ,     flIsUpdatingOne  ,     flIsUpdatingTwo    ));
  		} catch (SQLException ex) {
  			LOGGER.error("Could not deleteInNumber, a SQL Exception occurred.", ex);
  			return(-1);
  		}
  	}
  
	// USER DEFINED DELETER - NULL, PARAMS, NULL LOUD
	/**
	 * deleteInNumber - from 'deleters' JSON key.
	 * This will silently swallow any exceptions.
	 * 
	 * @param flIsUpdating - maps to the fl_is_updating field (from the where clause)
	 * @param flIsUpdatingList - maps to the fl_is_updating field (from the where clause)
	 * @param dtmStartedFollowingList - maps to the dtm_started_following field (from the where clause)
	 * @param flIsUpdatingOne - maps to the fl_is_updating field (from the where clause)
	 * @param flIsUpdatingTwo - maps to the fl_is_updating field (from the where clause)
	 * 
	 * @return the number of rows deleted or -1 if there was an error
	 */
  
	public static int deleteInNumber(Boolean flIsUpdating, List<Boolean> flIsUpdatingList, List<Timestamp> dtmStartedFollowingList, Boolean flIsUpdatingOne, Boolean flIsUpdatingTwo) throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			return(deleteInNumber(connection, flIsUpdating, flIsUpdatingList, dtmStartedFollowingList, flIsUpdatingOne, flIsUpdatingTwo));
		}
	}

	// USER DEFINED DELETER - NULL, PARAMS, NULL SILENT
	/**
	 * deleteInNumber - from 'deleters' JSON key.
	 * This will silently swallow any exceptions.
	 * 
	 * @param flIsUpdating - maps to the fl_is_updating field (from the where clause)
	 * @param flIsUpdatingList - maps to the fl_is_updating field (from the where clause)
	 * @param dtmStartedFollowingList - maps to the dtm_started_following field (from the where clause)
	 * @param flIsUpdatingOne - maps to the fl_is_updating field (from the where clause)
	 * @param flIsUpdatingTwo - maps to the fl_is_updating field (from the where clause)
	 * 
	 * @return the number of rows deleted or -1 if there was an error
	 */
  
	public static int deleteInNumberSilent(Boolean flIsUpdating, List<Boolean> flIsUpdatingList, List<Timestamp> dtmStartedFollowingList, Boolean flIsUpdatingOne, Boolean flIsUpdatingTwo) {
		try (Connection connection = ConnectionManager.getConnection()) {
			return(deleteInNumber(connection, flIsUpdating, flIsUpdatingList, dtmStartedFollowingList, flIsUpdatingOne, flIsUpdatingTwo));
		} catch (SQLException ex) {
			LOGGER.error("Could not deleteInNumber, a SQL Exception occurred.", ex);
			return(-1);
		}
	}

	// USER DEFINED DELETER CONNECTION, PARAMS - NO LIMIT - SQLITE3 STATEMENT
	/**
	 * deleteAllToBeEvaluated - from 'deleters' JSON key
	 *
	 * This is the main method for all other deleter methods with the same prefix,
	 * including the (silent method signatures).  All methods chain to this one.
	 * 
	 * @param connection - the connection - the caller __MUST__ close this connection
	 *        if the caller created this connection. If the passed in connection is 
	 *        null, then a new connection will be created, utilised, and closed within
	 *        this method.
	 * 
	 * @return the number of rows deleted
	 * 
	 * @throws SQLException if there was an error in the deletion
	 */
	public static int deleteAllToBeEvaluated(Connection connection) throws SQLException {
		String cacheKey = "cacheKey"  + "";
		boolean hasConnection = (null != connection);
		String statement = null;
		if(!deleteAllToBeEvaluated_limit_statement_cache.containsKey(cacheKey)) {
			// place the cacheKey in the cache for later use

			StringBuilder stringBuilder = new StringBuilder(SQL_DELETE_ALL_TO_BE_EVALUATED);

			statement = stringBuilder.toString();
			deleteAllToBeEvaluated_limit_statement_cache.put(cacheKey, statement);
		} else {
			statement = deleteAllToBeEvaluated_limit_statement_cache.get(cacheKey);
		}

		if(!hasConnection) {
			connection = ConnectionManager.getConnection();
		}
		try (PreparedStatement preparedStatement = connection.prepareStatement(statement)) {

			return(preparedStatement.executeUpdate());
		}
	}

  	// USER DEFINED DELETER CONNECTION, PARAMS SILENT
  	/**
  	 * deleteAllToBeEvaluated - from 'deleters' JSON key
  	 *
  	 * This is the main method for all other deleter methods with the same prefix,
  	 * including the (silent method signatures).  All methods chain to this one.
  	 * 
            	 * @param connection - the connection - the caller __MUST__ close this connection
	 *        if the caller created this connection. If the passed in connection is 
	 *        null, then a new connection will be created, utilised, and closed within
	 *        this method.
  	 * 
  	 * @return the number of rows deleted
  	 */
  	public static int deleteAllToBeEvaluatedSilent(Connection connection) {
  		try {
  			return(deleteAllToBeEvaluated(connection));
  		} catch (SQLException ex) {
  			LOGGER.error("Could not deleteAllToBeEvaluated, a SQL Exception occurred.", ex);
  			return(-1);
  		}
  	}
  
	// USER DEFINED DELETER - NULL, PARAMS, NULL LOUD
	/**
	 * deleteAllToBeEvaluated - from 'deleters' JSON key.
	 * This will silently swallow any exceptions.
	 * 
	 * 
	 * @return the number of rows deleted or -1 if there was an error
	 */
  
	public static int deleteAllToBeEvaluated() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			return(deleteAllToBeEvaluated(connection));
		}
	}

	// USER DEFINED DELETER - NULL, PARAMS, NULL SILENT
	/**
	 * deleteAllToBeEvaluated - from 'deleters' JSON key.
	 * This will silently swallow any exceptions.
	 * 
	 * 
	 * @return the number of rows deleted or -1 if there was an error
	 */
  
	public static int deleteAllToBeEvaluatedSilent() {
		try (Connection connection = ConnectionManager.getConnection()) {
			return(deleteAllToBeEvaluated(connection));
		} catch (SQLException ex) {
			LOGGER.error("Could not deleteAllToBeEvaluated, a SQL Exception occurred.", ex);
			return(-1);
		}
	}

}