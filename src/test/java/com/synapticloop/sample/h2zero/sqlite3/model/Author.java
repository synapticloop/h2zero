package com.synapticloop.sample.h2zero.sqlite3.model;

//        - - - - thoughtfully generated by synapticloop h2zero - - - -        
//          with the use of synapticloop templar templating language
//                  (/java/model/java-create-model.templar)

import com.synapticloop.h2zero.base.manager.sqlite3.ConnectionManager;
import com.synapticloop.h2zero.base.validator.bean.ValidationBean;
import com.synapticloop.h2zero.base.validator.bean.ValidationFieldBean;
import com.synapticloop.sample.h2zero.sqlite3.question.AuthorStatusQuestion;
import com.synapticloop.h2zero.base.validator.*;
import com.synapticloop.h2zero.base.model.sqlite3.ModelBase;
import com.synapticloop.h2zero.base.exception.H2ZeroPrimaryKeyException;
import com.synapticloop.h2zero.base.exception.H2ZeroFinderException;

import java.sql.Connection;
import java.sql.Timestamp;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.PreparedStatement;
import java.sql.SQLException;

import org.json.JSONObject;
import com.synapticloop.h2zero.generator.util.XmlHelper;

import com.synapticloop.h2zero.base.model.ModelBaseHelper;
import com.synapticloop.sample.h2zero.sqlite3.model.util.Constants;

import com.synapticloop.sample.h2zero.sqlite3.finder.AuthorFinder;


/**
 * <p>This is the model for the <code>Author</code> which maps to the <code>author</code> database table.</p>
 * 
 * <p>This model maps all of the fields from the database as defined in the
 * <code>.h2zero</code> file.  The parsed definition of the table and fields are:</p>
 * 
  * <p>This class contains all the base CRUD (Create, Read, Update, and Delete)
 * methods for a model.</p>
  * 
 * <table>
 *   <thead>
 *     <tr>
 *       <th>Field name</th>
 *       <th>SQL type</th>
 *       <th>Field length<br />(min:max)</th>
 *       <th>Nullable?</th>
 *       <th>Keys</th>
 *       <th>Comments</th>
 *     </tr>
 *   </thead>
 *   <tbody>
 *     <tr>
 *       <td><code>id_author</code></td>
 *       <td>bigint</td>
 *       <td> -- </td>
 *       <td>false</td>
 *       <td><code>primary</code></td>
 *       <td> -- </td>
 *     </tr>
 *     <tr>
 *       <td><code>id_author_status</code></td>
 *       <td>bigint</td>
 *       <td> -- </td>
 *       <td>true</td>
 *       <td> <code>foreign -> author_status.id_author_status</code></td>
 *       <td> -- </td>
 *     </tr>
 *     <tr>
 *       <td><code>txt_id_author</code></td>
 *       <td>varchar</td>
 *       <td>(0:256)</td>
 *       <td>false</td>
 *       <td> <primary>unique</primary></td>
 *       <td> -- </td>
 *     </tr>
 *     <tr>
 *       <td><code>nm_author</code></td>
 *       <td>varchar</td>
 *       <td>(0:256)</td>
 *       <td>false</td>
 *       <td></td>
 *       <td> -- </td>
 *     </tr>
 *     <tr>
 *       <td><code>nm_username</code></td>
 *       <td>varchar</td>
 *       <td>(0:256)</td>
 *       <td>false</td>
 *       <td></td>
 *       <td> -- </td>
 *     </tr>
 *     <tr>
 *       <td><code>txt_bio</code></td>
 *       <td>varchar</td>
 *       <td>(0:512)</td>
 *       <td>false</td>
 *       <td></td>
 *       <td> -- </td>
 *     </tr>
 *     <tr>
 *       <td><code>txt_url_cache_image</code></td>
 *       <td>varchar</td>
 *       <td>(0:512)</td>
 *       <td>false</td>
 *       <td></td>
 *       <td> -- </td>
 *     </tr>
 *     <tr>
 *       <td><code>num_following</code></td>
 *       <td>bigint</td>
 *       <td> -- </td>
 *       <td>true</td>
 *       <td></td>
 *       <td> -- </td>
 *     </tr>
 *     <tr>
 *       <td><code>num_followers</code></td>
 *       <td>bigint</td>
 *       <td> -- </td>
 *       <td>true</td>
 *       <td></td>
 *       <td> -- </td>
 *     </tr>
 *     <tr>
 *       <td><code>dtm_started_following</code></td>
 *       <td>datetime</td>
 *       <td> -- </td>
 *       <td>true</td>
 *       <td></td>
 *       <td> -- </td>
 *     </tr>
 *     <tr>
 *       <td><code>fl_is_updating</code></td>
 *       <td>boolean</td>
 *       <td> -- </td>
 *       <td>true</td>
 *       <td></td>
 *       <td> -- </td>
 *     </tr>
 *     <tr>
 *       <td><code>fl_author_is_following_user</code></td>
 *       <td>boolean</td>
 *       <td> -- </td>
 *       <td>true</td>
 *       <td></td>
 *       <td> -- </td>
 *     </tr>
 *     <tr>
 *       <td><code>fl_author_is_followed_by_user</code></td>
 *       <td>boolean</td>
 *       <td> -- </td>
 *       <td>true</td>
 *       <td></td>
 *       <td> -- </td>
 *     </tr>
 *   </tbody>
 * </table>
 * 
 * @author synapticloop h2zero
 * 
 * <p>@see <a href="https://github.com/synapticloop/h2zero">Synapticloop h2zero GitHub repository</a></p>
 */
public class Author extends ModelBase {
	// the binder is unused in code, but will generate compile problems if this 
	// class is no longer referenced in the h2zero file. Just a nicety for
	// removing dead code
	@SuppressWarnings("unused")
	private static final String BINDER = Constants.AUTHOR_BINDER;


	public static final String PRIMARY_KEY_FIELD = "id_author";  // the primary key - a convenience field

	private static final String SQL_INSERT = 
		"""
			insert into
			author (
				id_author_status,
				txt_id_author,
				nm_author,
				nm_username,
				txt_bio,
				txt_url_cache_image,
				num_following,
				num_followers,
				dtm_started_following,
				fl_is_updating,
				fl_author_is_following_user,
				fl_author_is_followed_by_user
			) values (
				?,
				?,
				?,
				?,
				?,
				?,
				?,
				?,
				?,
				?,
				?,
				?
			)
		""";
	private static final String SQL_UPDATE = 
		"""
			update
				author
			set
				id_author_status = ?,
				txt_id_author = ?,
				nm_author = ?,
				nm_username = ?,
				txt_bio = ?,
				txt_url_cache_image = ?,
				num_following = ?,
				num_followers = ?,
				dtm_started_following = ?,
				fl_is_updating = ?,
				fl_author_is_following_user = ?,
				fl_author_is_followed_by_user = ?
			where
		"""
			+ PRIMARY_KEY_FIELD + 
		"""
			= ?
		""";
	private static final String SQL_DELETE = "delete from author where " + PRIMARY_KEY_FIELD + " = ?";
	private static final String SQL_ENSURE = "select " + PRIMARY_KEY_FIELD + " from author where id_author_status = ? and txt_id_author = ? and nm_author = ? and nm_username = ? and txt_bio = ? and txt_url_cache_image = ? and num_following = ? and num_followers = ? and dtm_started_following = ? and fl_is_updating = ? and fl_author_is_following_user = ? and fl_author_is_followed_by_user = ?";


	// Static lookups for fields in the hit counter.
	// Whilst these aren't used internally (the offset to the array is 
	// automatically computed, external classes can use these static 
	// fields to look up the hit counts in the array 
	public static final int HIT_TOTAL = 0;  // The total number of hits on all fields of this model
	public static final int HIT_ID_AUTHOR = 1; // The number of hits on the id_author property
	public static final int HIT_ID_AUTHOR_STATUS = 2; // The number of hits on the id_author_status property
	public static final int HIT_TXT_ID_AUTHOR = 3; // The number of hits on the txt_id_author property
	public static final int HIT_NM_AUTHOR = 4; // The number of hits on the nm_author property
	public static final int HIT_NM_USERNAME = 5; // The number of hits on the nm_username property
	public static final int HIT_TXT_BIO = 6; // The number of hits on the txt_bio property
	public static final int HIT_TXT_URL_CACHE_IMAGE = 7; // The number of hits on the txt_url_cache_image property
	public static final int HIT_NUM_FOLLOWING = 8; // The number of hits on the num_following property
	public static final int HIT_NUM_FOLLOWERS = 9; // The number of hits on the num_followers property
	public static final int HIT_DTM_STARTED_FOLLOWING = 10; // The number of hits on the dtm_started_following property
	public static final int HIT_FL_IS_UPDATING = 11; // The number of hits on the fl_is_updating property
	public static final int HIT_FL_AUTHOR_IS_FOLLOWING_USER = 12; // The number of hits on the fl_author_is_following_user property
	public static final int HIT_FL_AUTHOR_IS_FOLLOWED_BY_USER = 13; // The number of hits on the fl_author_is_followed_by_user property


	// the list of fields for the hit - starting with 'TOTAL'
	private static final String[] HIT_FIELDS = { "TOTAL", "id_author", "id_author_status", "txt_id_author", "nm_author", "nm_username", "txt_bio", "txt_url_cache_image", "num_following", "num_followers", "dtm_started_following", "fl_is_updating", "fl_author_is_following_user", "fl_author_is_followed_by_user" };
	// the number of read-hits for a particular field
	private static final int[] HIT_COUNTS = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };


	private Long idAuthor = null; // maps to the id_author field
	private Long idAuthorStatus = null; // maps to the id_author_status field
	private String txtIdAuthor = null; // maps to the txt_id_author field
	private String nmAuthor = null; // maps to the nm_author field
	private String nmUsername = null; // maps to the nm_username field
	private String txtBio = null; // maps to the txt_bio field
	private String txtUrlCacheImage = null; // maps to the txt_url_cache_image field
	private Long numFollowing = null; // maps to the num_following field
	private Long numFollowers = null; // maps to the num_followers field
	private Timestamp dtmStartedFollowing = null; // maps to the dtm_started_following field
	private Boolean flIsUpdating = null; // maps to the fl_is_updating field
	private Boolean flAuthorIsFollowingUser = null; // maps to the fl_author_is_following_user field
	private Boolean flAuthorIsFollowedByUser = null; // maps to the fl_author_is_followed_by_user field

	/**
	 * <p>Create a new <code>Author</code> object with all fields
	 * some of which can be null.</p>
	 * 
	 * <p><strong>NOTE:</strong> this does not insert the object into the database
	 * the <code>.insert()</code> method must be called to insert this object.</p>
	 * 
	 * <p>Creating a new Author:</p>
	 * 
	 * <pre>new Author(
	 *     Long idAuthor,  // id_author 
	 *     Long idAuthorStatus,  // id_author_status  [NULLABLE]
	 *     String txtIdAuthor,  // txt_id_author 
	 *     String nmAuthor,  // nm_author 
	 *     String nmUsername,  // nm_username 
	 *     String txtBio,  // txt_bio 
	 *     String txtUrlCacheImage,  // txt_url_cache_image 
	 *     Long numFollowing,  // num_following  [NULLABLE]
	 *     Long numFollowers,  // num_followers  [NULLABLE]
	 *     Timestamp dtmStartedFollowing,  // dtm_started_following  [NULLABLE]
	 *     Boolean flIsUpdating,  // fl_is_updating  [NULLABLE]
	 *     Boolean flAuthorIsFollowingUser,  // fl_author_is_following_user  [NULLABLE]
	 *     Boolean flAuthorIsFollowedByUser // fl_author_is_followed_by_user  [NULLABLE]
	 * );</pre>
	 * 
	 */
	public Author(Long idAuthor, Long idAuthorStatus, String txtIdAuthor, String nmAuthor, String nmUsername, String txtBio, String txtUrlCacheImage, Long numFollowing, Long numFollowers, Timestamp dtmStartedFollowing, Boolean flIsUpdating, Boolean flAuthorIsFollowingUser, Boolean flAuthorIsFollowedByUser) {
		this.idAuthor = idAuthor;
		this.idAuthorStatus = idAuthorStatus;
		this.txtIdAuthor = txtIdAuthor;
		this.nmAuthor = nmAuthor;
		this.nmUsername = nmUsername;
		this.txtBio = txtBio;
		this.txtUrlCacheImage = txtUrlCacheImage;
		this.numFollowing = numFollowing;
		this.numFollowers = numFollowers;
		this.dtmStartedFollowing = dtmStartedFollowing;
		this.flIsUpdating = flIsUpdating;
		this.flAuthorIsFollowingUser = flAuthorIsFollowingUser;
		this.flAuthorIsFollowedByUser = flAuthorIsFollowedByUser;
	}

	/**
	 * <p>Create a new <code>Author</code> object with only the
	 * fields that are non-nullable.</p>
	 * 
	 * <p><strong>NOTE:</strong> this does not insert the object into the database
	 * the <code>.insert()</code> method must be called to insert this object</p>
	 * 
	 * <p>Creating a new Author:</p>
	 * 
	 * <pre>new Author(
	 *     Long idAuthor,  // id_author
	 *     String txtIdAuthor,  // txt_id_author
	 *     String nmAuthor,  // nm_author
	 *     String nmUsername,  // nm_username
	 *     String txtBio,  // txt_bio
	 *     String txtUrlCacheImage // txt_url_cache_image
	 * );</pre>
	 * 
	 */
	public Author(Long idAuthor, String txtIdAuthor, String nmAuthor, String nmUsername, String txtBio, String txtUrlCacheImage) {
		this.idAuthor = idAuthor;
		this.idAuthorStatus = null;
		this.txtIdAuthor = txtIdAuthor;
		this.nmAuthor = nmAuthor;
		this.nmUsername = nmUsername;
		this.txtBio = txtBio;
		this.txtUrlCacheImage = txtUrlCacheImage;
		this.numFollowing = null;
		this.numFollowers = null;
		this.dtmStartedFollowing = null;
		this.flIsUpdating = null;
		this.flAuthorIsFollowingUser = null;
		this.flAuthorIsFollowedByUser = null;
	}

	/**
	 * <p>Get a new Author model, or set the fields on an existing
	 * Author model.</p>
	 * 
	 * <p>If the passed in author is null, then a new Author
	 * will be created.  If not null, the fields will be updated on the passed in model.</p>
	 * 
	 * <p><strong>NOTE:</strong> You will still need to persist this to the database
	 * with an <code>upsert()</code> call - this will insert the model if it .
	 * doesn't exist, or update the existing model.</p>
	 * 
	 * @param author the model to check
	 * @param idAuthorStatus - maps to the <code>id_author_status</code> field.
	 * @param txtIdAuthor - maps to the <code>txt_id_author</code> field.
	 * @param nmAuthor - maps to the <code>nm_author</code> field.
	 * @param nmUsername - maps to the <code>nm_username</code> field.
	 * @param txtBio - maps to the <code>txt_bio</code> field.
	 * @param txtUrlCacheImage - maps to the <code>txt_url_cache_image</code> field.
	 * @param numFollowing - maps to the <code>num_following</code> field.
	 * @param numFollowers - maps to the <code>num_followers</code> field.
	 * @param dtmStartedFollowing - maps to the <code>dtm_started_following</code> field.
	 * @param flIsUpdating - maps to the <code>fl_is_updating</code> field.
	 * @param flAuthorIsFollowingUser - maps to the <code>fl_author_is_following_user</code> field.
	 * @param flAuthorIsFollowedByUser - maps to the <code>fl_author_is_followed_by_user</code> field.
	 * 
	 * @return Either the existing author with updated field values,
	 *   or a new Author with the field values set.
	 */
	public static Author getOrSet(Author author,Long idAuthorStatus, String txtIdAuthor, String nmAuthor, String nmUsername, String txtBio, String txtUrlCacheImage, Long numFollowing, Long numFollowers, Timestamp dtmStartedFollowing, Boolean flIsUpdating, Boolean flAuthorIsFollowingUser, Boolean flAuthorIsFollowedByUser) {
		if(null == author) {
			return (new Author(null, idAuthorStatus, txtIdAuthor, nmAuthor, nmUsername, txtBio, txtUrlCacheImage, numFollowing, numFollowers, dtmStartedFollowing, flIsUpdating, flAuthorIsFollowingUser, flAuthorIsFollowedByUser));
		} else {
			author.setIdAuthorStatus(idAuthorStatus);
			author.setTxtIdAuthor(txtIdAuthor);
			author.setNmAuthor(nmAuthor);
			author.setNmUsername(nmUsername);
			author.setTxtBio(txtBio);
			author.setTxtUrlCacheImage(txtUrlCacheImage);
			author.setNumFollowing(numFollowing);
			author.setNumFollowers(numFollowers);
			author.setDtmStartedFollowing(dtmStartedFollowing);
			author.setFlIsUpdating(flIsUpdating);
			author.setFlAuthorIsFollowingUser(flAuthorIsFollowingUser);
			author.setFlAuthorIsFollowedByUser(flAuthorIsFollowedByUser);

			return(author);
		}
	}

	/**
	 * Get a new Author model, or set the fields on an existing
	 * Author model.
	 * <p>
	 * If the passed in author is null, then a new Author
	 * will be created.  If not null, the fields will be updated on the existing model.
	 * <p>
	 * <strong>NOTE:</strong> You will still need to persist this to the database
	 * with an <code>upsert()</code> call.
	 * 
	 * @param author the model to check
	 * @param txtIdAuthor
	 * @param nmAuthor
	 * @param nmUsername
	 * @param txtBio
	 * @param txtUrlCacheImage
	 * 
	 * @return Either the existing author with updated field values,
	 *   or a new Author with the field values set.
	 */
	public static Author getOrSet(Author author, String txtIdAuthor, String nmAuthor, String nmUsername, String txtBio, String txtUrlCacheImage) {
		if(null == author) {
			return (new Author(null , txtIdAuthor, nmAuthor, nmUsername, txtBio, txtUrlCacheImage));
		} else {
			author.setTxtIdAuthor(txtIdAuthor);
			author.setNmAuthor(nmAuthor);
			author.setNmUsername(nmUsername);
			author.setTxtBio(txtBio);
			author.setTxtUrlCacheImage(txtUrlCacheImage);

			return(author);
		}
	}

	@Override
	public boolean primaryKeySet() {
		return(null != idAuthor);
	}


	@Override
	public void insert(Connection connection) throws SQLException, H2ZeroPrimaryKeyException {
		if(primaryKeySet()) {
			throw new H2ZeroPrimaryKeyException("Cannot insert author model when primary key is not null.");
		}

		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		try {
			// create this bean 
			preparedStatement = connection.prepareStatement(SQL_INSERT, Statement.RETURN_GENERATED_KEYS);
			ConnectionManager.setBigint(preparedStatement, 1, idAuthorStatus);
			ConnectionManager.setVarchar(preparedStatement, 2, txtIdAuthor);
			ConnectionManager.setVarchar(preparedStatement, 3, nmAuthor);
			ConnectionManager.setVarchar(preparedStatement, 4, nmUsername);
			ConnectionManager.setVarchar(preparedStatement, 5, txtBio);
			ConnectionManager.setVarchar(preparedStatement, 6, txtUrlCacheImage);
			ConnectionManager.setBigint(preparedStatement, 7, numFollowing);
			ConnectionManager.setBigint(preparedStatement, 8, numFollowers);
			ConnectionManager.setDatetime(preparedStatement, 9, dtmStartedFollowing);
			ConnectionManager.setBoolean(preparedStatement, 10, flIsUpdating);
			ConnectionManager.setBoolean(preparedStatement, 11, flAuthorIsFollowingUser);
			ConnectionManager.setBoolean(preparedStatement, 12, flAuthorIsFollowedByUser);
			preparedStatement.executeUpdate();
			resultSet = preparedStatement.getGeneratedKeys();
			if(resultSet.next()) {
				this.idAuthor = resultSet.getLong(1);
			} else {
				throw new H2ZeroPrimaryKeyException("Could not get return value for primary key!");
			}
		} finally {
			ConnectionManager.closeAll(resultSet, preparedStatement);
		}
	}

	@Override
	public void ensure(Connection connection) throws SQLException, H2ZeroPrimaryKeyException {

		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		try {
			preparedStatement = connection.prepareStatement(SQL_ENSURE);
			ConnectionManager.setBigint(preparedStatement, 1, idAuthorStatus);
			ConnectionManager.setVarchar(preparedStatement, 2, txtIdAuthor);
			ConnectionManager.setVarchar(preparedStatement, 3, nmAuthor);
			ConnectionManager.setVarchar(preparedStatement, 4, nmUsername);
			ConnectionManager.setVarchar(preparedStatement, 5, txtBio);
			ConnectionManager.setVarchar(preparedStatement, 6, txtUrlCacheImage);
			ConnectionManager.setBigint(preparedStatement, 7, numFollowing);
			ConnectionManager.setBigint(preparedStatement, 8, numFollowers);
			ConnectionManager.setDatetime(preparedStatement, 9, dtmStartedFollowing);
			ConnectionManager.setBoolean(preparedStatement, 10, flIsUpdating);
			ConnectionManager.setBoolean(preparedStatement, 11, flAuthorIsFollowingUser);
			ConnectionManager.setBoolean(preparedStatement, 12, flAuthorIsFollowedByUser);
			resultSet = preparedStatement.executeQuery();
			if(resultSet.next()) {
				this.idAuthor = resultSet.getLong(1);
			} else {
				// could not find the value - need to insert it - null is the primary key
				insert(connection);
			}
		} finally {
			ConnectionManager.closeAll(resultSet, preparedStatement);
		}
	}

	@Override
	public void update(Connection connection) throws SQLException, H2ZeroPrimaryKeyException {
		if(!primaryKeySet()) {
			throw new H2ZeroPrimaryKeyException("Cannot update bean when primary key is null.");
		}

		if(isDirty) {
			try (PreparedStatement preparedStatement = connection.prepareStatement(SQL_UPDATE)) {
				// update this bean, but only if dirty
				ConnectionManager.setBigint(preparedStatement, 1, idAuthorStatus);
				ConnectionManager.setVarchar(preparedStatement, 2, txtIdAuthor);
				ConnectionManager.setVarchar(preparedStatement, 3, nmAuthor);
				ConnectionManager.setVarchar(preparedStatement, 4, nmUsername);
				ConnectionManager.setVarchar(preparedStatement, 5, txtBio);
				ConnectionManager.setVarchar(preparedStatement, 6, txtUrlCacheImage);
				ConnectionManager.setBigint(preparedStatement, 7, numFollowing);
				ConnectionManager.setBigint(preparedStatement, 8, numFollowers);
				ConnectionManager.setDatetime(preparedStatement, 9, dtmStartedFollowing);
				ConnectionManager.setBoolean(preparedStatement, 10, flIsUpdating);
				ConnectionManager.setBoolean(preparedStatement, 11, flAuthorIsFollowingUser);
				ConnectionManager.setBoolean(preparedStatement, 12, flAuthorIsFollowedByUser);
				// now set the primary key
				preparedStatement.setLong(13, idAuthor);
				preparedStatement.executeUpdate();
			} finally {
				isDirty = false;
			}
		}
	}

	@Override
	public void delete(Connection connection) throws SQLException, H2ZeroPrimaryKeyException {
		if(!primaryKeySet()) {
			throw new H2ZeroPrimaryKeyException("Cannot delete bean when primary key is null.");
		}
		try (PreparedStatement preparedStatement = connection.prepareStatement(SQL_DELETE)) {
			preparedStatement.setLong(1, idAuthor);
			preparedStatement.executeUpdate();
		}
	}

	@Override
	public void refresh(Connection connection) throws SQLException, H2ZeroPrimaryKeyException, H2ZeroFinderException {
		if(!primaryKeySet()) {
			throw new H2ZeroPrimaryKeyException("Cannot refresh model 'Author' when primary key is null.");
		}

		Author author = AuthorFinder.findByPrimaryKey(this.idAuthor)
				.withConnection(connection)
				.executeSilent();

		if(null == author) {
			throw new H2ZeroFinderException("Could not find the model 'Author' with primaryKey of " + getPrimaryKey());
		}
		this.idAuthor = author.getIdAuthor();
		this.idAuthorStatus = author.getIdAuthorStatus();
		this.txtIdAuthor = author.getTxtIdAuthor();
		this.nmAuthor = author.getNmAuthor();
		this.nmUsername = author.getNmUsername();
		this.txtBio = author.getTxtBio();
		this.txtUrlCacheImage = author.getTxtUrlCacheImage();
		this.numFollowing = author.getNumFollowing();
		this.numFollowers = author.getNumFollowers();
		this.dtmStartedFollowing = author.getDtmStartedFollowing();
		this.flIsUpdating = author.getFlIsUpdating();
		this.flAuthorIsFollowingUser = author.getFlAuthorIsFollowingUser();
		this.flAuthorIsFollowedByUser = author.getFlAuthorIsFollowedByUser();
	}

	/**
	 * <p>Return the names of the hit fields as an array.  The first entry of the array
	 * is the static name <code>TOTAL</code></p>
	 *
	 * @return The array of the hit fields name
	 */
	public static String[] getHitFields() { return(HIT_FIELDS); }

	/**
	 * <p>Return the hit counts as an array, the first element being the total number of 
	 * hits for all fields</p>
	 * 
	 * @return The field hit counts as an array, the first entry in the array is the 
	 *         total number of hits for all fields
	 */	public static int[] getHitCounts() { return(HIT_COUNTS); }

	/**
	 * Get the hit count for a specific field - look at the <code>public static HIT_*</code>
	 * fields to retrieve a specific field.
	 *
	 * @param hitCountField the hit count field number to retrieve the hit count from
	 *
	 * @return the hit count for the field
	 * 
	 * <p>{@link #HIT_ID_AUTHOR Use <code>Author.HIT_ID_AUTHOR</code> to retrieve the hit count for the <code>id_author</code> field}</p>
	 * <p>{@link #HIT_ID_AUTHOR_STATUS Use <code>Author.HIT_ID_AUTHOR_STATUS</code> to retrieve the hit count for the <code>id_author_status</code> field}</p>
	 * <p>{@link #HIT_TXT_ID_AUTHOR Use <code>Author.HIT_TXT_ID_AUTHOR</code> to retrieve the hit count for the <code>txt_id_author</code> field}</p>
	 * <p>{@link #HIT_NM_AUTHOR Use <code>Author.HIT_NM_AUTHOR</code> to retrieve the hit count for the <code>nm_author</code> field}</p>
	 * <p>{@link #HIT_NM_USERNAME Use <code>Author.HIT_NM_USERNAME</code> to retrieve the hit count for the <code>nm_username</code> field}</p>
	 * <p>{@link #HIT_TXT_BIO Use <code>Author.HIT_TXT_BIO</code> to retrieve the hit count for the <code>txt_bio</code> field}</p>
	 * <p>{@link #HIT_TXT_URL_CACHE_IMAGE Use <code>Author.HIT_TXT_URL_CACHE_IMAGE</code> to retrieve the hit count for the <code>txt_url_cache_image</code> field}</p>
	 * <p>{@link #HIT_NUM_FOLLOWING Use <code>Author.HIT_NUM_FOLLOWING</code> to retrieve the hit count for the <code>num_following</code> field}</p>
	 * <p>{@link #HIT_NUM_FOLLOWERS Use <code>Author.HIT_NUM_FOLLOWERS</code> to retrieve the hit count for the <code>num_followers</code> field}</p>
	 * <p>{@link #HIT_DTM_STARTED_FOLLOWING Use <code>Author.HIT_DTM_STARTED_FOLLOWING</code> to retrieve the hit count for the <code>dtm_started_following</code> field}</p>
	 * <p>{@link #HIT_FL_IS_UPDATING Use <code>Author.HIT_FL_IS_UPDATING</code> to retrieve the hit count for the <code>fl_is_updating</code> field}</p>
	 * <p>{@link #HIT_FL_AUTHOR_IS_FOLLOWING_USER Use <code>Author.HIT_FL_AUTHOR_IS_FOLLOWING_USER</code> to retrieve the hit count for the <code>fl_author_is_following_user</code> field}</p>
	 * <p>{@link #HIT_FL_AUTHOR_IS_FOLLOWED_BY_USER Use <code>Author.HIT_FL_AUTHOR_IS_FOLLOWED_BY_USER</code> to retrieve the hit count for the <code>fl_author_is_followed_by_user</code> field}</p>
	 */
	public static int getHitCountForField(int hitCountField) { return(HIT_COUNTS[hitCountField]); }

	/**
	 * <p>The <code>id_author_status</code> is a foreign key, consequently this is a convenience
	 * method to get the AuthorStatus Model object, rather than returning the
	 * primary key field.</p>
	 * 
	 * <p>To find the referenced primary key field - use the <code>getIdAuthorStatus()</code>
	 * method.</p>
	 * 
	 * <p>This reference is a to a <code>CONSTANT</code> table, so the <code>ALL_LOOKUP</code>
	 * reference is used, rather than a call to the database.</p>
	 * 
	 * @return The model for the foreign key reference. 
	 */
	public AuthorStatus getAuthorStatus() {
		return(AuthorStatus.ALL_LOOKUP.get(this.idAuthorStatus));
	}

	/**
	 * <p>Update the field hit count.  Use the static variables <code>HIT_&lt;FIELD_NAME&gt;</code>
	 * variables for the offset.</p>
	 * 
	 * @param offset The offset of the <code>HIT_COUNTS</code> array to update
	 */
	private static void updateHitCount(int offset) {
		HIT_COUNTS[0]++;
		HIT_COUNTS[offset]++;
	}

	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * Boring ol' getters and setters 
	 * 
	 * Getters will update the hit count upon access.
	 * 
	 * Setters, if the passed in parameter's value differs will set the
	 * 'isDirty' flag
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

	/**
	 * <p>Convenience method for returning the primary key field (which is the id_author field).</p>
	 * 
	 * <p><strong>NOTE:</strong> This will update the hit count.</p>
	 * 
	 * @return The value of the primary key
	 */
	public Long getPrimaryKey() {updateHitCount(1); return(this.idAuthor); }

	/**
	 * <p>Set the primary key field (which is the id_author field).</p>
	 * 
	 * <p>If the primary key value has the same value as the passed in parameter, then 
	 * nothing will be done.</p>
	 * 
	 * <p>If the primary key value differs in value to the passed in parameter, then 
	 * the field will be set and this model will be marked as 'dirty'.</p>
	 * 
	 * @param idUser The primary key field to update
	 */
	public void setPrimaryKey(Long idAuthor) {if(isDifferent(this.idAuthor, idAuthor)) { this.idAuthor = idAuthor; this.isDirty = true;}}

	/**
	 * <p>Return the value of the id_author, updating the hit count for this field.</p>
	 * 
	 * @return the value of the id_author which may NOT be null.
	 */
	public Long getIdAuthor() {updateHitCount(1); return(this.idAuthor); }

	/**
	 * <p>Set the <code>id_author</code> value setting the 'isDirty' flag
	 * if the value has changed.  The 'isDirty' flag is used when the model is
	 * updated - and the update call will be ignored if the 'isDirty' flag is
	 * not set.</p>
	 * 
	 * <p>If the field value has the same value as the passed in parameter, then 
	 * nothing will be done.</p>
	 *
	 * <p>If the field value differs in value to the passed in parameter, then 
	 * the field will be set and this model will be marked as 'dirty'.</p>
	 *
	 * @param idAuthor the id_author value to be set
	 */
	public void setIdAuthor(Long idAuthor) {if(isDifferent(this.idAuthor, idAuthor)) { this.idAuthor = idAuthor; this.isDirty = true;}}

	/**
	 * <p>Return the value of the id_author_status, updating the hit count for this field.</p>
	 * 
	 * @return the value of the id_author_status which may be null.
	 */
	public Long getIdAuthorStatus() {updateHitCount(2); return(this.idAuthorStatus); }

	/**
	 * <p>Set the <code>id_author_status</code> value setting the 'isDirty' flag
	 * if the value has changed.  The 'isDirty' flag is used when the model is
	 * updated - and the update call will be ignored if the 'isDirty' flag is
	 * not set.</p>
	 * 
	 * <p>If the field value has the same value as the passed in parameter, then 
	 * nothing will be done.</p>
	 *
	 * <p>If the field value differs in value to the passed in parameter, then 
	 * the field will be set and this model will be marked as 'dirty'.</p>
	 *
	 * @param idAuthorStatus the id_author_status value to be set
	 */
	public void setIdAuthorStatus(Long idAuthorStatus) {if(isDifferent(this.idAuthorStatus, idAuthorStatus)) { this.idAuthorStatus = idAuthorStatus; this.isDirty = true;}}

	/**
	 * <p>Return the value of the txt_id_author, updating the hit count for this field.</p>
	 * 
	 * @return the value of the txt_id_author which may NOT be null.
	 */
	public String getTxtIdAuthor() {updateHitCount(3); return(this.txtIdAuthor); }

	/**
	 * <p>Set the <code>txt_id_author</code> value setting the 'isDirty' flag
	 * if the value has changed.  The 'isDirty' flag is used when the model is
	 * updated - and the update call will be ignored if the 'isDirty' flag is
	 * not set.</p>
	 * 
	 * <p>If the field value has the same value as the passed in parameter, then 
	 * nothing will be done.</p>
	 *
	 * <p>If the field value differs in value to the passed in parameter, then 
	 * the field will be set and this model will be marked as 'dirty'.</p>
	 *
	 * @param txtIdAuthor the txt_id_author value to be set
	 */
	public void setTxtIdAuthor(String txtIdAuthor) {if(isDifferent(this.txtIdAuthor, txtIdAuthor)) { this.txtIdAuthor = txtIdAuthor; this.isDirty = true;}}

	/**
	 * <p>Return the value of the nm_author, updating the hit count for this field.</p>
	 * 
	 * @return the value of the nm_author which may NOT be null.
	 */
	public String getNmAuthor() {updateHitCount(4); return(this.nmAuthor); }

	/**
	 * <p>Set the <code>nm_author</code> value setting the 'isDirty' flag
	 * if the value has changed.  The 'isDirty' flag is used when the model is
	 * updated - and the update call will be ignored if the 'isDirty' flag is
	 * not set.</p>
	 * 
	 * <p>If the field value has the same value as the passed in parameter, then 
	 * nothing will be done.</p>
	 *
	 * <p>If the field value differs in value to the passed in parameter, then 
	 * the field will be set and this model will be marked as 'dirty'.</p>
	 *
	 * @param nmAuthor the nm_author value to be set
	 */
	public void setNmAuthor(String nmAuthor) {if(isDifferent(this.nmAuthor, nmAuthor)) { this.nmAuthor = nmAuthor; this.isDirty = true;}}

	/**
	 * <p>Return the value of the nm_username, updating the hit count for this field.</p>
	 * 
	 * @return the value of the nm_username which may NOT be null.
	 */
	public String getNmUsername() {updateHitCount(5); return(this.nmUsername); }

	/**
	 * <p>Set the <code>nm_username</code> value setting the 'isDirty' flag
	 * if the value has changed.  The 'isDirty' flag is used when the model is
	 * updated - and the update call will be ignored if the 'isDirty' flag is
	 * not set.</p>
	 * 
	 * <p>If the field value has the same value as the passed in parameter, then 
	 * nothing will be done.</p>
	 *
	 * <p>If the field value differs in value to the passed in parameter, then 
	 * the field will be set and this model will be marked as 'dirty'.</p>
	 *
	 * @param nmUsername the nm_username value to be set
	 */
	public void setNmUsername(String nmUsername) {if(isDifferent(this.nmUsername, nmUsername)) { this.nmUsername = nmUsername; this.isDirty = true;}}

	/**
	 * <p>Return the value of the txt_bio, updating the hit count for this field.</p>
	 * 
	 * @return the value of the txt_bio which may NOT be null.
	 */
	public String getTxtBio() {updateHitCount(6); return(this.txtBio); }

	/**
	 * <p>Set the <code>txt_bio</code> value setting the 'isDirty' flag
	 * if the value has changed.  The 'isDirty' flag is used when the model is
	 * updated - and the update call will be ignored if the 'isDirty' flag is
	 * not set.</p>
	 * 
	 * <p>If the field value has the same value as the passed in parameter, then 
	 * nothing will be done.</p>
	 *
	 * <p>If the field value differs in value to the passed in parameter, then 
	 * the field will be set and this model will be marked as 'dirty'.</p>
	 *
	 * @param txtBio the txt_bio value to be set
	 */
	public void setTxtBio(String txtBio) {if(isDifferent(this.txtBio, txtBio)) { this.txtBio = txtBio; this.isDirty = true;}}

	/**
	 * <p>Return the value of the txt_url_cache_image, updating the hit count for this field.</p>
	 * 
	 * @return the value of the txt_url_cache_image which may NOT be null.
	 */
	public String getTxtUrlCacheImage() {updateHitCount(7); return(this.txtUrlCacheImage); }

	/**
	 * <p>Set the <code>txt_url_cache_image</code> value setting the 'isDirty' flag
	 * if the value has changed.  The 'isDirty' flag is used when the model is
	 * updated - and the update call will be ignored if the 'isDirty' flag is
	 * not set.</p>
	 * 
	 * <p>If the field value has the same value as the passed in parameter, then 
	 * nothing will be done.</p>
	 *
	 * <p>If the field value differs in value to the passed in parameter, then 
	 * the field will be set and this model will be marked as 'dirty'.</p>
	 *
	 * @param txtUrlCacheImage the txt_url_cache_image value to be set
	 */
	public void setTxtUrlCacheImage(String txtUrlCacheImage) {if(isDifferent(this.txtUrlCacheImage, txtUrlCacheImage)) { this.txtUrlCacheImage = txtUrlCacheImage; this.isDirty = true;}}

	/**
	 * <p>Return the value of the num_following, updating the hit count for this field.</p>
	 * 
	 * @return the value of the num_following which may be null.
	 */
	public Long getNumFollowing() {updateHitCount(8); return(this.numFollowing); }

	/**
	 * <p>Set the <code>num_following</code> value setting the 'isDirty' flag
	 * if the value has changed.  The 'isDirty' flag is used when the model is
	 * updated - and the update call will be ignored if the 'isDirty' flag is
	 * not set.</p>
	 * 
	 * <p>If the field value has the same value as the passed in parameter, then 
	 * nothing will be done.</p>
	 *
	 * <p>If the field value differs in value to the passed in parameter, then 
	 * the field will be set and this model will be marked as 'dirty'.</p>
	 *
	 * @param numFollowing the num_following value to be set
	 */
	public void setNumFollowing(Long numFollowing) {if(isDifferent(this.numFollowing, numFollowing)) { this.numFollowing = numFollowing; this.isDirty = true;}}

	/**
	 * <p>Return the value of the num_followers, updating the hit count for this field.</p>
	 * 
	 * @return the value of the num_followers which may be null.
	 */
	public Long getNumFollowers() {updateHitCount(9); return(this.numFollowers); }

	/**
	 * <p>Set the <code>num_followers</code> value setting the 'isDirty' flag
	 * if the value has changed.  The 'isDirty' flag is used when the model is
	 * updated - and the update call will be ignored if the 'isDirty' flag is
	 * not set.</p>
	 * 
	 * <p>If the field value has the same value as the passed in parameter, then 
	 * nothing will be done.</p>
	 *
	 * <p>If the field value differs in value to the passed in parameter, then 
	 * the field will be set and this model will be marked as 'dirty'.</p>
	 *
	 * @param numFollowers the num_followers value to be set
	 */
	public void setNumFollowers(Long numFollowers) {if(isDifferent(this.numFollowers, numFollowers)) { this.numFollowers = numFollowers; this.isDirty = true;}}

	/**
	 * <p>Return the value of the dtm_started_following, updating the hit count for this field.</p>
	 * 
	 * @return the value of the dtm_started_following which may be null.
	 */
	public Timestamp getDtmStartedFollowing() {updateHitCount(10); return(this.dtmStartedFollowing); }

	/**
	 * <p>Set the <code>dtm_started_following</code> value setting the 'isDirty' flag
	 * if the value has changed.  The 'isDirty' flag is used when the model is
	 * updated - and the update call will be ignored if the 'isDirty' flag is
	 * not set.</p>
	 * 
	 * <p>If the field value has the same value as the passed in parameter, then 
	 * nothing will be done.</p>
	 *
	 * <p>If the field value differs in value to the passed in parameter, then 
	 * the field will be set and this model will be marked as 'dirty'.</p>
	 *
	 * @param dtmStartedFollowing the dtm_started_following value to be set
	 */
	public void setDtmStartedFollowing(Timestamp dtmStartedFollowing) {if(isDifferent(this.dtmStartedFollowing, dtmStartedFollowing)) { this.dtmStartedFollowing = dtmStartedFollowing; this.isDirty = true;}}

	/**
	 * <p>Return the value of the fl_is_updating, updating the hit count for this field.</p>
	 * 
	 * @return the value of the fl_is_updating which may be null.
	 */
	public Boolean getFlIsUpdating() {updateHitCount(11); return(this.flIsUpdating); }

	/**
	 * <p>Set the <code>fl_is_updating</code> value setting the 'isDirty' flag
	 * if the value has changed.  The 'isDirty' flag is used when the model is
	 * updated - and the update call will be ignored if the 'isDirty' flag is
	 * not set.</p>
	 * 
	 * <p>If the field value has the same value as the passed in parameter, then 
	 * nothing will be done.</p>
	 *
	 * <p>If the field value differs in value to the passed in parameter, then 
	 * the field will be set and this model will be marked as 'dirty'.</p>
	 *
	 * @param flIsUpdating the fl_is_updating value to be set
	 */
	public void setFlIsUpdating(Boolean flIsUpdating) {if(isDifferent(this.flIsUpdating, flIsUpdating)) { this.flIsUpdating = flIsUpdating; this.isDirty = true;}}

	/**
	 * <p>Return the value of the fl_author_is_following_user, updating the hit count for this field.</p>
	 * 
	 * @return the value of the fl_author_is_following_user which may be null.
	 */
	public Boolean getFlAuthorIsFollowingUser() {updateHitCount(12); return(this.flAuthorIsFollowingUser); }

	/**
	 * <p>Set the <code>fl_author_is_following_user</code> value setting the 'isDirty' flag
	 * if the value has changed.  The 'isDirty' flag is used when the model is
	 * updated - and the update call will be ignored if the 'isDirty' flag is
	 * not set.</p>
	 * 
	 * <p>If the field value has the same value as the passed in parameter, then 
	 * nothing will be done.</p>
	 *
	 * <p>If the field value differs in value to the passed in parameter, then 
	 * the field will be set and this model will be marked as 'dirty'.</p>
	 *
	 * @param flAuthorIsFollowingUser the fl_author_is_following_user value to be set
	 */
	public void setFlAuthorIsFollowingUser(Boolean flAuthorIsFollowingUser) {if(isDifferent(this.flAuthorIsFollowingUser, flAuthorIsFollowingUser)) { this.flAuthorIsFollowingUser = flAuthorIsFollowingUser; this.isDirty = true;}}

	/**
	 * <p>Return the value of the fl_author_is_followed_by_user, updating the hit count for this field.</p>
	 * 
	 * @return the value of the fl_author_is_followed_by_user which may be null.
	 */
	public Boolean getFlAuthorIsFollowedByUser() {updateHitCount(13); return(this.flAuthorIsFollowedByUser); }

	/**
	 * <p>Set the <code>fl_author_is_followed_by_user</code> value setting the 'isDirty' flag
	 * if the value has changed.  The 'isDirty' flag is used when the model is
	 * updated - and the update call will be ignored if the 'isDirty' flag is
	 * not set.</p>
	 * 
	 * <p>If the field value has the same value as the passed in parameter, then 
	 * nothing will be done.</p>
	 *
	 * <p>If the field value differs in value to the passed in parameter, then 
	 * the field will be set and this model will be marked as 'dirty'.</p>
	 *
	 * @param flAuthorIsFollowedByUser the fl_author_is_followed_by_user value to be set
	 */
	public void setFlAuthorIsFollowedByUser(Boolean flAuthorIsFollowedByUser) {if(isDifferent(this.flAuthorIsFollowedByUser, flAuthorIsFollowedByUser)) { this.flAuthorIsFollowedByUser = flAuthorIsFollowedByUser; this.isDirty = true;}}

	@Override
	public ValidationBean validate() {
		ValidationBean validationBean = new ValidationBean();

		ValidationFieldBean idAuthorStatusValidationFieldBean = new BigintValidator("id_author_status", idAuthorStatus.toString(), 0, 0, true).validate();
		idAuthorStatusValidationFieldBean.setIsIncorrectForeignKey(!AuthorStatusQuestion.internalDoesPrimaryKeyExist(idAuthorStatus));
		validationBean.addValidationFieldBean(idAuthorStatusValidationFieldBean);

		validationBean.addValidationFieldBean(new VarcharValidator("txt_id_author", txtIdAuthor.toString(), 0, 256, false).validate());
		validationBean.addValidationFieldBean(new VarcharValidator("nm_author", nmAuthor.toString(), 0, 256, false).validate());
		validationBean.addValidationFieldBean(new VarcharValidator("nm_username", nmUsername.toString(), 0, 256, false).validate());
		validationBean.addValidationFieldBean(new VarcharValidator("txt_bio", txtBio.toString(), 0, 512, false).validate());
		validationBean.addValidationFieldBean(new VarcharValidator("txt_url_cache_image", txtUrlCacheImage.toString(), 0, 512, false).validate());
		validationBean.addValidationFieldBean(new BigintValidator("num_following", numFollowing.toString(), 0, 0, true).validate());
		validationBean.addValidationFieldBean(new BigintValidator("num_followers", numFollowers.toString(), 0, 0, true).validate());
		validationBean.addValidationFieldBean(new DatetimeValidator("dtm_started_following", dtmStartedFollowing.toString(), 0, 0, true).validate());
		validationBean.addValidationFieldBean(new BooleanValidator("fl_is_updating", flIsUpdating.toString(), 0, 0, true).validate());
		validationBean.addValidationFieldBean(new BooleanValidator("fl_author_is_following_user", flAuthorIsFollowingUser.toString(), 0, 0, true).validate());
		validationBean.addValidationFieldBean(new BooleanValidator("fl_author_is_followed_by_user", flAuthorIsFollowedByUser.toString(), 0, 0, true).validate());
		return(validationBean);
	}


	@Override
	public String toString() {
		return(
			"{\"Author\": {" +
			"\"idAuthor\":\"" + this.idAuthor + "\"" +
			"\"idAuthorStatus\":\"" + this.idAuthorStatus + "\"" +
			"\"txtIdAuthor\":\"" + this.txtIdAuthor + "\"" +
			"\"nmAuthor\":\"" + this.nmAuthor + "\"" +
			"\"nmUsername\":\"" + this.nmUsername + "\"" +
			"\"txtBio\":\"" + this.txtBio + "\"" +
			"\"txtUrlCacheImage\":\"" + this.txtUrlCacheImage + "\"" +
			"\"numFollowing\":\"" + this.numFollowing + "\"" +
			"\"numFollowers\":\"" + this.numFollowers + "\"" +
			"\"dtmStartedFollowing\":\"" + this.dtmStartedFollowing + "\"" +
			"\"flIsUpdating\":\"" + this.flIsUpdating + "\"" +
			"\"flAuthorIsFollowingUser\":\"" + this.flAuthorIsFollowingUser + "\"" +
			"\"flAuthorIsFollowedByUser\":\"" + this.flAuthorIsFollowedByUser + "\"" +
			"}");
	}
	public JSONObject getToJSON() {
		return(toJSON());
	}

	public JSONObject toJSON() {
		JSONObject jsonObject = new JSONObject();

		jsonObject.put("type", "table");
		jsonObject.put("name", "Author");
		JSONObject fieldsObject = new JSONObject();

		ModelBaseHelper.addToJSONObject(fieldsObject, "idAuthor", this.getIdAuthor());
		ModelBaseHelper.addToJSONObject(fieldsObject, "idAuthorStatus", this.getIdAuthorStatus());
		ModelBaseHelper.addToJSONObject(fieldsObject, "txtIdAuthor", this.getTxtIdAuthor());
		ModelBaseHelper.addToJSONObject(fieldsObject, "nmAuthor", this.getNmAuthor());
		ModelBaseHelper.addToJSONObject(fieldsObject, "nmUsername", this.getNmUsername());
		ModelBaseHelper.addToJSONObject(fieldsObject, "txtBio", this.getTxtBio());
		ModelBaseHelper.addToJSONObject(fieldsObject, "txtUrlCacheImage", this.getTxtUrlCacheImage());
		ModelBaseHelper.addToJSONObject(fieldsObject, "numFollowing", this.getNumFollowing());
		ModelBaseHelper.addToJSONObject(fieldsObject, "numFollowers", this.getNumFollowers());
		ModelBaseHelper.addToJSONObject(fieldsObject, "dtmStartedFollowing", this.getDtmStartedFollowing());
		ModelBaseHelper.addToJSONObject(fieldsObject, "flIsUpdating", this.getFlIsUpdating());
		ModelBaseHelper.addToJSONObject(fieldsObject, "flAuthorIsFollowingUser", this.getFlAuthorIsFollowingUser());
		ModelBaseHelper.addToJSONObject(fieldsObject, "flAuthorIsFollowedByUser", this.getFlAuthorIsFollowedByUser());

		jsonObject.put("fields", fieldsObject);

		return(jsonObject);
	}


	public String toJsonString() {
		return(toJSON().toString());
	}

	public String getJsonString() {
		return(toJsonString());
	}

	/**
	 * <p>Return an XML representation of the <code>Author</code> model as a <code>String</code>, 
	 * with the root node being the name of the table - i.e. <code>&lt;author /&gt;</code> 
	 * and the child nodes the name of the fields.</p>
	 * 
	 * <p><strong>NOTE:</strong> Any field marked as secure will not be included as
	 * part of the XML document</p>
	 * 
	 * @return An XML representation of the model as a <code>String</code>.
	 */
	public String toXMLString() {
		return("<author>" + 
			String.format("<id_author null=\"%b\">%s</id_author>", (this.getIdAuthor() == null), (this.getIdAuthor() != null ? this.getIdAuthor() : "")) + 
			String.format("<id_author_status null=\"%b\">%s</id_author_status>", (this.getIdAuthorStatus() == null), (this.getIdAuthorStatus() != null ? this.getIdAuthorStatus() : "")) + 
			String.format("<txt_id_author null=\"%b\">%s</txt_id_author>", (this.getTxtIdAuthor() == null), (this.getTxtIdAuthor() != null ? XmlHelper.escapeXml(this.getTxtIdAuthor()) : "")) + 
			String.format("<nm_author null=\"%b\">%s</nm_author>", (this.getNmAuthor() == null), (this.getNmAuthor() != null ? XmlHelper.escapeXml(this.getNmAuthor()) : "")) + 
			String.format("<nm_username null=\"%b\">%s</nm_username>", (this.getNmUsername() == null), (this.getNmUsername() != null ? XmlHelper.escapeXml(this.getNmUsername()) : "")) + 
			String.format("<txt_bio null=\"%b\">%s</txt_bio>", (this.getTxtBio() == null), (this.getTxtBio() != null ? XmlHelper.escapeXml(this.getTxtBio()) : "")) + 
			String.format("<txt_url_cache_image null=\"%b\">%s</txt_url_cache_image>", (this.getTxtUrlCacheImage() == null), (this.getTxtUrlCacheImage() != null ? XmlHelper.escapeXml(this.getTxtUrlCacheImage()) : "")) + 
			String.format("<num_following null=\"%b\">%s</num_following>", (this.getNumFollowing() == null), (this.getNumFollowing() != null ? this.getNumFollowing() : "")) + 
			String.format("<num_followers null=\"%b\">%s</num_followers>", (this.getNumFollowers() == null), (this.getNumFollowers() != null ? this.getNumFollowers() : "")) + 
			String.format("<dtm_started_following null=\"%b\">%s</dtm_started_following>", (this.getDtmStartedFollowing() == null), (this.getDtmStartedFollowing() != null ? this.getDtmStartedFollowing() : "")) + 
			String.format("<fl_is_updating null=\"%b\">%s</fl_is_updating>", (this.getFlIsUpdating() == null), (this.getFlIsUpdating() != null ? this.getFlIsUpdating() : "")) + 
			String.format("<fl_author_is_following_user null=\"%b\">%s</fl_author_is_following_user>", (this.getFlAuthorIsFollowingUser() == null), (this.getFlAuthorIsFollowingUser() != null ? this.getFlAuthorIsFollowingUser() : "")) + 
			String.format("<fl_author_is_followed_by_user null=\"%b\">%s</fl_author_is_followed_by_user>", (this.getFlAuthorIsFollowedByUser() == null), (this.getFlAuthorIsFollowedByUser() != null ? this.getFlAuthorIsFollowedByUser() : "")) + 
			"</author>");
	}


	/**
	 * <p>Get the hit count statistics as a JSON encoded object as a <code>String</code></p>.
	 *
	 * @return the JSON Object as a <code>String</code>.
	 */
	public static String getHitCountJson() {
		JSONObject jsonObject = new JSONObject();
		jsonObject.put("type", "Author");
		jsonObject.put("total", HIT_COUNTS[0]);
		jsonObject.put("idAuthor", HIT_COUNTS[1]);
		jsonObject.put("idAuthorStatus", HIT_COUNTS[2]);
		jsonObject.put("txtIdAuthor", HIT_COUNTS[3]);
		jsonObject.put("nmAuthor", HIT_COUNTS[4]);
		jsonObject.put("nmUsername", HIT_COUNTS[5]);
		jsonObject.put("txtBio", HIT_COUNTS[6]);
		jsonObject.put("txtUrlCacheImage", HIT_COUNTS[7]);
		jsonObject.put("numFollowing", HIT_COUNTS[8]);
		jsonObject.put("numFollowers", HIT_COUNTS[9]);
		jsonObject.put("dtmStartedFollowing", HIT_COUNTS[10]);
		jsonObject.put("flIsUpdating", HIT_COUNTS[11]);
		jsonObject.put("flAuthorIsFollowingUser", HIT_COUNTS[12]);
		jsonObject.put("flAuthorIsFollowedByUser", HIT_COUNTS[13]);
		return(jsonObject.toString());
	}

}