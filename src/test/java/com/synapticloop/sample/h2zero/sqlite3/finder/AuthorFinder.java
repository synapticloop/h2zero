package com.synapticloop.sample.h2zero.sqlite3.finder;

// - - - - thoughtfully generated by synapticloop h2zero - - - - 
//    with the use of synapticloop templar templating language
//                (java-create-finder.templar)

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.math.BigDecimal;
import java.util.List;
import java.util.ArrayList;

import com.synapticloop.h2zero.base.exception.H2ZeroFinderException;
import com.synapticloop.h2zero.base.manager.sqlite3.ConnectionManager;
import com.synapticloop.h2zero.util.LruCache;


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


import com.synapticloop.sample.h2zero.sqlite3.model.util.Constants;

import com.synapticloop.sample.h2zero.sqlite3.model.Author;

import com.synapticloop.h2zero.base.sql.limitoffset.MultiFinder;
import com.synapticloop.h2zero.base.sql.limitoffset.UniqueFinder;

public class AuthorFinder {
	// the binder is unused in code, but will generate compile problems if this 
	// class is no longer referenced in the h2zero file. Just a nicety for
	// removing dead code
	@SuppressWarnings("unused")
	private static final String BINDER = Constants.AUTHOR_BINDER;

	private static final Logger LOGGER = LoggerFactory.getLogger(AuthorFinder.class);
	private static final String SQL_SELECT_START = 
		"""
			select 
				id_author, 
				id_author_status, 
				txt_id_author, 
				nm_author, 
				nm_username, 
				txt_bio, 
				txt_url_cache_image, 
				num_following, 
				num_followers, 
				dtm_started_following, 
				fl_is_updating, 
				fl_author_is_following_user, 
				fl_author_is_followed_by_user
			from 
				author
		""";
	private static final String SQL_BUILTIN_FIND_BY_PRIMARY_KEY = SQL_SELECT_START + " where id_author = ?";

	private static final String SQL_FIND_BY_ID_AUTHOR_STATUS = SQL_SELECT_START + 
		"""
			where id_author_status = ?
		""";
	private static final String SQL_FIND_BY_FL_IS_UPDATING = SQL_SELECT_START + 
		"""
			where fl_is_updating = ?
		""";
	private static final String SQL_FIND_BY_TXT_ID_AUTHOR_ID_AUTHOR_STATUS = SQL_SELECT_START + 
		"""
			where txt_id_author = ? and id_author_status = ?
		""";
	private static final String SQL_FIND_BY_TXT_ID_AUTHOR = SQL_SELECT_START + 
		"""
			where txt_id_author = ?
		""";
	private static final String SQL_FIND_IN_STATUS = SQL_SELECT_START + 
		"""
			where id_author_status in (...)
		""";
	private static final String SQL_FIND_ALL_TO_BE_EVALUATED = SQL_SELECT_START + 
		"""
			where id_author_status = (select id_author_status from author_status where txt_author_status = 'TO_BE_EVALUATED') and dtm_started_following <= ? 
		""";
	private static final String SQL_FIND_FIRST_TO_BE_EVALUATED = SQL_SELECT_START + 
		"""
			where id_author_status =
			(select id_author_status from author_status where txt_author_status = 'TO_BE_EVALUATED') and
			dtm_started_following < ? order by dtm_started_following asc
		""";
	private static final String SQL_FIND_LIMITED_TO_BE_EVALUATED = SQL_SELECT_START + 
		"""
			where id_author_status = (select id_author_status from author_status where txt_author_status = 'TO_BE_EVALUATED') and dtm_started_following < ? order by dtm_started_following
		""";
	private static final String SQL_FIND_IN_NUMBER = SQL_SELECT_START + 
		"""
			where fl_is_updating = ? and
			fl_is_updating in (...) and
			dtm_started_following in (...) and
			fl_is_updating = ? and
			fl_is_updating = ?
		""";

	private AuthorFinder() {}

	/**
	 * <p>Create a UniqueFinder that can find a Author by its primary key</p>
	 * 
	 * <p>This will return a UniqueFinder, to execute the finder, either call</p>
	 * 
	 * <ul>
	 *   <li><code>finder.execute();</code> to execute the finder with exceptions thrown</li>
	 *   <li><code>finder.executeSilent();</code> to execute the finder no exceptions (i.e. they are caught, swallowed and logged)</li>
	 * </ul>
	 * 
	 * <p>You may also want to pass in a connection, in which case use the following:</p>
	 * 
	 * <pre>Author.findByPrimaryKey(primaryKey)
	 *     .withConnection(connection)
	 *     .execute();</pre>
	 * 
	 * <p>You may also want to pass in a connection without exceptions being thrown,
	 * in which case use the following:</p>
	 * 
	 * <pre>Author.findByPrimaryKey(primaryKey)
	 *     .withConnection(connection)
	 *     .executeSilent();</pre>
	 * 
	 * @param idAuthor the primary key
	 * 
	 * @return the parameterised UniqueFinder
	 */
	public static UniqueFinder<Author> findByPrimaryKey(Long idAuthor) {
		return(new UniqueFinder<Author>(
				LOGGER,
				SQL_BUILTIN_FIND_BY_PRIMARY_KEY,
				resultSet -> { try { return list(resultSet); } catch (SQLException e) { return(null); }},
				idAuthor
		));
	}

	/**
	 * <p>Create a MultiFinder that can find all Author rows</p>
	 * <p>
	 * <p>This will return a UniqueFinder, to execute the finder, either call</p>
	 * 
	 * <ul>
	 *   <li><code>finder.execute();</code> to execute the finder with exceptions thrown</li>
	 *   <li><code>finder.executeSilent();</code> to execute the finder no exceptions (i.e. they are caught, swallowed and logged)</li>
	 * </ul>
	 * 
	 * <p>You may also want to pass in a connection, in which case use the following:</p>
	 * 
	 * <pre>Author.findAll()
	 *     .withConnection(connection)
	 *     .execute();</pre>
	 * 
	 * <p>You may also want to pass in a connection without exceptions being thrown,
	 * in which case use the following:</p>
	 * 
	 * <pre>Author.findAll()
	 *     .withConnection(connection)
	 *     .executeSilent();</pre>
	 * 
	 * <p>Additionally, you can limit and offset this query (with or without a connection)</p>
	 * 
	 * <pre>Author.findAll()
	 *     .withLimit(limit)
	 *     .withOffset(offset)
	 *     .executeSilent();</pre>
	 * 
	 * @return the parameterised MultiFinder
	 */
	public static MultiFinder<Author> findAll() {
		return(
				new MultiFinder<Author>(
				LOGGER,
				SQL_SELECT_START,
				resultSet -> { try {return list(resultSet);} catch (SQLException e) { return(null); }},
				new Object[] {}
		));
	}

	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * 
	 * This is the start of the user defined finders which are generated
	 * through either the "finders" JSON key, or the "fieldFinders" JSON
	 * key.
	 * 
	 * There are 9 defined finders on the author table, of those finders
	 * the following are the regular finders, either defined through the
	 * 'finders' or 'fieldFinders' JSON key
	 * 
	 * - findByIdAuthorStatus - Generated from the 'fieldFinders' JSON key
	 * - findByFlIsUpdating - Generated from the 'fieldFinders' JSON key
	 * - findByTxtIdAuthorIdAuthorStatus - Generated from the 'fieldFinders' JSON key
	 * - findByTxtIdAuthor - Generated from the 'fieldFinders' JSON key
	 * - findInStatus - Generated from the 'finders' JSON key
	 * - findAllToBeEvaluated - Generated from the 'finders' JSON key
	 * - findFirstToBeEvaluated - Generated from the 'finders' JSON key
	 * - findLimitedToBeEvaluated - Generated from the 'finders' JSON key
	 * - findInNumber - Generated from the 'finders' JSON key
	 * 
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

	/**
	 * This is the <code>findByIdAuthorStatus</code> finder.
	 * 
	 * <p><em>(This finder was generated through the '<code>fieldFinders</code>' JSON key)</em></p>
	 * 
	 * <p>Create a MultiFinder<Author> Finder
	 * that can be invoked through:</p>
	 * 
	 * <ul>
	 *   <li><code>finder.execute();</code> to execute the finder with exceptions thrown</li>
	 *   <li><code>finder.executeSilent();</code> to execute the finder no exceptions (i.e. they are caught, swallowed and logged)</li>
	 * </ul>
	 * 
	 * <p>You may also want to pass in a connection, in which case use the following:</p>
	 * 
	 * <pre>Author.findByIdAuthorStatus(...)
	 *     .withConnection(connection)
	 *     .execute();</pre>
	 * 
	 * <p>You may also want to pass in a connection without exceptions being thrown,
	 * in which case use the following:</p>
	 * 
	 * <pre>Author.findByIdAuthorStatus(...)
	 *     .withConnection(connection)
	 *     .executeSilent();</pre>
	 * 
	 * <p>Additionally, you can limit and offset this query (with or without a connection)</p>
	 * 
	 * <pre>Author.findByIdAuthorStatus(...)
	 *     .withLimit(limit)
	 *     .withOffset(offset)
	 *     .executeSilent();</pre>
	 * 
	 * @return the parameterised MultiFinder
	 * @param idAuthorStatus - maps to the id_author_status field
	 * 
	 * @return the MultiFinder<Author>()
	 * 
	 */
	public static MultiFinder<Author> findByIdAuthorStatus(Long idAuthorStatus) {
		return(
				new MultiFinder<Author>(
				LOGGER,
				SQL_FIND_BY_ID_AUTHOR_STATUS,
				resultSet -> { try {return list(resultSet);} catch (SQLException e) { return(null); }},
				new Object[] {idAuthorStatus}
		));
	}
	/**
	 * This is the <code>findByFlIsUpdating</code> finder.
	 * 
	 * <p><em>(This finder was generated through the '<code>fieldFinders</code>' JSON key)</em></p>
	 * 
	 * <p>Create a MultiFinder<Author> Finder
	 * that can be invoked through:</p>
	 * 
	 * <ul>
	 *   <li><code>finder.execute();</code> to execute the finder with exceptions thrown</li>
	 *   <li><code>finder.executeSilent();</code> to execute the finder no exceptions (i.e. they are caught, swallowed and logged)</li>
	 * </ul>
	 * 
	 * <p>You may also want to pass in a connection, in which case use the following:</p>
	 * 
	 * <pre>Author.findByFlIsUpdating(...)
	 *     .withConnection(connection)
	 *     .execute();</pre>
	 * 
	 * <p>You may also want to pass in a connection without exceptions being thrown,
	 * in which case use the following:</p>
	 * 
	 * <pre>Author.findByFlIsUpdating(...)
	 *     .withConnection(connection)
	 *     .executeSilent();</pre>
	 * 
	 * <p>Additionally, you can limit and offset this query (with or without a connection)</p>
	 * 
	 * <pre>Author.findByFlIsUpdating(...)
	 *     .withLimit(limit)
	 *     .withOffset(offset)
	 *     .executeSilent();</pre>
	 * 
	 * @return the parameterised MultiFinder
	 * @param flIsUpdating - maps to the fl_is_updating field
	 * 
	 * @return the MultiFinder<Author>()
	 * 
	 */
	public static MultiFinder<Author> findByFlIsUpdating(Boolean flIsUpdating) {
		return(
				new MultiFinder<Author>(
				LOGGER,
				SQL_FIND_BY_FL_IS_UPDATING,
				resultSet -> { try {return list(resultSet);} catch (SQLException e) { return(null); }},
				new Object[] {flIsUpdating}
		));
	}
	/**
	 * This is the <code>findByTxtIdAuthorIdAuthorStatus</code> finder.
	 * 
	 * <p><em>(This finder was generated through the '<code>fieldFinders</code>' JSON key)</em></p>
	 * 
	 * <p>Create a MultiFinder<Author> Finder
	 * that can be invoked through:</p>
	 * 
	 * <ul>
	 *   <li><code>finder.execute();</code> to execute the finder with exceptions thrown</li>
	 *   <li><code>finder.executeSilent();</code> to execute the finder no exceptions (i.e. they are caught, swallowed and logged)</li>
	 * </ul>
	 * 
	 * <p>You may also want to pass in a connection, in which case use the following:</p>
	 * 
	 * <pre>Author.findByTxtIdAuthorIdAuthorStatus(...)
	 *     .withConnection(connection)
	 *     .execute();</pre>
	 * 
	 * <p>You may also want to pass in a connection without exceptions being thrown,
	 * in which case use the following:</p>
	 * 
	 * <pre>Author.findByTxtIdAuthorIdAuthorStatus(...)
	 *     .withConnection(connection)
	 *     .executeSilent();</pre>
	 * 
	 * <p>Additionally, you can limit and offset this query (with or without a connection)</p>
	 * 
	 * <pre>Author.findByTxtIdAuthorIdAuthorStatus(...)
	 *     .withLimit(limit)
	 *     .withOffset(offset)
	 *     .executeSilent();</pre>
	 * 
	 * @return the parameterised MultiFinder
	 * @param txtIdAuthor - maps to the txt_id_author field
	 * @param idAuthorStatus - maps to the id_author_status field
	 * 
	 * @return the MultiFinder<Author>()
	 * 
	 */
	public static MultiFinder<Author> findByTxtIdAuthorIdAuthorStatus(String txtIdAuthor, Long idAuthorStatus) {
		return(
				new MultiFinder<Author>(
				LOGGER,
				SQL_FIND_BY_TXT_ID_AUTHOR_ID_AUTHOR_STATUS,
				resultSet -> { try {return list(resultSet);} catch (SQLException e) { return(null); }},
				new Object[] {txtIdAuthor, idAuthorStatus}
		));
	}
	/**
	 * This is the <code>findByTxtIdAuthor</code> finder.
	 * 
	 * <p><em>(This finder was generated through the '<code>fieldFinders</code>' JSON key)</em></p>
	 * 
	 * <p>Create a UniqueFinder<Author> Finder
	 * that can be invoked through:</p>
	 * 
	 * <ul>
	 *   <li><code>finder.execute();</code> to execute the finder with exceptions thrown</li>
	 *   <li><code>finder.executeSilent();</code> to execute the finder no exceptions (i.e. they are caught, swallowed and logged)</li>
	 * </ul>
	 * 
	 * <p>You may also want to pass in a connection, in which case use the following:</p>
	 * 
	 * <pre>Author.findByTxtIdAuthor(...)
	 *     .withConnection(connection)
	 *     .execute();</pre>
	 * 
	 * <p>You may also want to pass in a connection without exceptions being thrown,
	 * in which case use the following:</p>
	 * 
	 * <pre>Author.findByTxtIdAuthor(...)
	 *     .withConnection(connection)
	 *     .executeSilent();</pre>
	 * 
	 * <p>Additionally, you can limit and offset this query (with or without a connection)</p>
	 * 
	 * <pre>Author.findByTxtIdAuthor(...)
	 *     .withLimit(limit)
	 *     .withOffset(offset)
	 *     .executeSilent();</pre>
	 * 
	 * @return the parameterised MultiFinder
	 * @param txtIdAuthor - maps to the txt_id_author field
	 * 
	 * @return the UniqueFinder<Author>()
	 * 
	 */
	public static UniqueFinder<Author> findByTxtIdAuthor(String txtIdAuthor) {
		return(
				new UniqueFinder<Author>(
				LOGGER,
				SQL_FIND_BY_TXT_ID_AUTHOR,
				resultSet -> { try {return list(resultSet);} catch (SQLException e) { return(null); }},
				new Object[] {txtIdAuthor}
		));
	}
	/**
	 * This is the <code>findInStatus</code> finder.
	 * 
	 * <p><em>(This finder was generated through the '<code>finders</code>' JSON key)</em></p>
	 * 
	 * <p>Create a MultiFinder<Author> Finder
	 * that can be invoked through:</p>
	 * 
	 * <ul>
	 *   <li><code>finder.execute();</code> to execute the finder with exceptions thrown</li>
	 *   <li><code>finder.executeSilent();</code> to execute the finder no exceptions (i.e. they are caught, swallowed and logged)</li>
	 * </ul>
	 * 
	 * <p>You may also want to pass in a connection, in which case use the following:</p>
	 * 
	 * <pre>Author.findInStatus(...)
	 *     .withConnection(connection)
	 *     .execute();</pre>
	 * 
	 * <p>You may also want to pass in a connection without exceptions being thrown,
	 * in which case use the following:</p>
	 * 
	 * <pre>Author.findInStatus(...)
	 *     .withConnection(connection)
	 *     .executeSilent();</pre>
	 * 
	 * <p>Additionally, you can limit and offset this query (with or without a connection)</p>
	 * 
	 * <pre>Author.findInStatus(...)
	 *     .withLimit(limit)
	 *     .withOffset(offset)
	 *     .executeSilent();</pre>
	 * 
	 * @return the parameterised MultiFinder
	 * @param idAuthorStatusList - maps to the id_author_status field
	 * 
	 * @return the MultiFinder<Author>()
	 * 
	 */
	public static MultiFinder<Author> findInStatus(List<Long> idAuthorStatusList) {
		return(
				new MultiFinder<Author>(
				LOGGER,
				SQL_FIND_IN_STATUS,
				resultSet -> { try {return list(resultSet);} catch (SQLException e) { return(null); }},
				new Object[] {idAuthorStatusList}
		));
	}
	/**
	 * This is the <code>findAllToBeEvaluated</code> finder.
	 * 
	 * <p><em>(This finder was generated through the '<code>finders</code>' JSON key)</em></p>
	 * 
	 * <p>Create a MultiFinder<Author> Finder
	 * that can be invoked through:</p>
	 * 
	 * <ul>
	 *   <li><code>finder.execute();</code> to execute the finder with exceptions thrown</li>
	 *   <li><code>finder.executeSilent();</code> to execute the finder no exceptions (i.e. they are caught, swallowed and logged)</li>
	 * </ul>
	 * 
	 * <p>You may also want to pass in a connection, in which case use the following:</p>
	 * 
	 * <pre>Author.findAllToBeEvaluated(...)
	 *     .withConnection(connection)
	 *     .execute();</pre>
	 * 
	 * <p>You may also want to pass in a connection without exceptions being thrown,
	 * in which case use the following:</p>
	 * 
	 * <pre>Author.findAllToBeEvaluated(...)
	 *     .withConnection(connection)
	 *     .executeSilent();</pre>
	 * 
	 * <p>Additionally, you can limit and offset this query (with or without a connection)</p>
	 * 
	 * <pre>Author.findAllToBeEvaluated(...)
	 *     .withLimit(limit)
	 *     .withOffset(offset)
	 *     .executeSilent();</pre>
	 * 
	 * @return the parameterised MultiFinder
	 * @param dtmStartedFollowing - maps to the dtm_started_following field
	 * 
	 * @return the MultiFinder<Author>()
	 * 
	 */
	public static MultiFinder<Author> findAllToBeEvaluated(Timestamp dtmStartedFollowing) {
		return(
				new MultiFinder<Author>(
				LOGGER,
				SQL_FIND_ALL_TO_BE_EVALUATED,
				resultSet -> { try {return list(resultSet);} catch (SQLException e) { return(null); }},
				new Object[] {dtmStartedFollowing}
		));
	}
	/**
	 * This is the <code>findFirstToBeEvaluated</code> finder.
	 * 
	 * <p><em>(This finder was generated through the '<code>finders</code>' JSON key)</em></p>
	 * 
	 * <p>Create a UniqueFinder<Author> Finder
	 * that can be invoked through:</p>
	 * 
	 * <ul>
	 *   <li><code>finder.execute();</code> to execute the finder with exceptions thrown</li>
	 *   <li><code>finder.executeSilent();</code> to execute the finder no exceptions (i.e. they are caught, swallowed and logged)</li>
	 * </ul>
	 * 
	 * <p>You may also want to pass in a connection, in which case use the following:</p>
	 * 
	 * <pre>Author.findFirstToBeEvaluated(...)
	 *     .withConnection(connection)
	 *     .execute();</pre>
	 * 
	 * <p>You may also want to pass in a connection without exceptions being thrown,
	 * in which case use the following:</p>
	 * 
	 * <pre>Author.findFirstToBeEvaluated(...)
	 *     .withConnection(connection)
	 *     .executeSilent();</pre>
	 * 
	 * <p>Additionally, you can limit and offset this query (with or without a connection)</p>
	 * 
	 * <pre>Author.findFirstToBeEvaluated(...)
	 *     .withLimit(limit)
	 *     .withOffset(offset)
	 *     .executeSilent();</pre>
	 * 
	 * @return the parameterised MultiFinder
	 * @param dtmStartedFollowing - maps to the dtm_started_following field
	 * 
	 * @return the UniqueFinder<Author>()
	 * 
	 */
	public static UniqueFinder<Author> findFirstToBeEvaluated(Timestamp dtmStartedFollowing) {
		return(
				new UniqueFinder<Author>(
				LOGGER,
				SQL_FIND_FIRST_TO_BE_EVALUATED,
				resultSet -> { try {return list(resultSet);} catch (SQLException e) { return(null); }},
				new Object[] {dtmStartedFollowing}
		));
	}
	/**
	 * This is the <code>findLimitedToBeEvaluated</code> finder.
	 * 
	 * <p><em>(This finder was generated through the '<code>finders</code>' JSON key)</em></p>
	 * 
	 * <p>Create a MultiFinder<Author> Finder
	 * that can be invoked through:</p>
	 * 
	 * <ul>
	 *   <li><code>finder.execute();</code> to execute the finder with exceptions thrown</li>
	 *   <li><code>finder.executeSilent();</code> to execute the finder no exceptions (i.e. they are caught, swallowed and logged)</li>
	 * </ul>
	 * 
	 * <p>You may also want to pass in a connection, in which case use the following:</p>
	 * 
	 * <pre>Author.findLimitedToBeEvaluated(...)
	 *     .withConnection(connection)
	 *     .execute();</pre>
	 * 
	 * <p>You may also want to pass in a connection without exceptions being thrown,
	 * in which case use the following:</p>
	 * 
	 * <pre>Author.findLimitedToBeEvaluated(...)
	 *     .withConnection(connection)
	 *     .executeSilent();</pre>
	 * 
	 * <p>Additionally, you can limit and offset this query (with or without a connection)</p>
	 * 
	 * <pre>Author.findLimitedToBeEvaluated(...)
	 *     .withLimit(limit)
	 *     .withOffset(offset)
	 *     .executeSilent();</pre>
	 * 
	 * @return the parameterised MultiFinder
	 * @param dtmStartedFollowing - maps to the dtm_started_following field
	 * 
	 * @return the MultiFinder<Author>()
	 * 
	 */
	public static MultiFinder<Author> findLimitedToBeEvaluated(Timestamp dtmStartedFollowing) {
		return(
				new MultiFinder<Author>(
				LOGGER,
				SQL_FIND_LIMITED_TO_BE_EVALUATED,
				resultSet -> { try {return list(resultSet);} catch (SQLException e) { return(null); }},
				new Object[] {dtmStartedFollowing}
		));
	}
	/**
	 * This is the <code>findInNumber</code> finder.
	 * 
	 * <p><em>(This finder was generated through the '<code>finders</code>' JSON key)</em></p>
	 * 
	 * <p>Create a MultiFinder<Author> Finder
	 * that can be invoked through:</p>
	 * 
	 * <ul>
	 *   <li><code>finder.execute();</code> to execute the finder with exceptions thrown</li>
	 *   <li><code>finder.executeSilent();</code> to execute the finder no exceptions (i.e. they are caught, swallowed and logged)</li>
	 * </ul>
	 * 
	 * <p>You may also want to pass in a connection, in which case use the following:</p>
	 * 
	 * <pre>Author.findInNumber(...)
	 *     .withConnection(connection)
	 *     .execute();</pre>
	 * 
	 * <p>You may also want to pass in a connection without exceptions being thrown,
	 * in which case use the following:</p>
	 * 
	 * <pre>Author.findInNumber(...)
	 *     .withConnection(connection)
	 *     .executeSilent();</pre>
	 * 
	 * <p>Additionally, you can limit and offset this query (with or without a connection)</p>
	 * 
	 * <pre>Author.findInNumber(...)
	 *     .withLimit(limit)
	 *     .withOffset(offset)
	 *     .executeSilent();</pre>
	 * 
	 * @return the parameterised MultiFinder
	 * @param flIsUpdating - maps to the fl_is_updating field
	 * @param flIsUpdatingList - maps to the fl_is_updating field
	 * @param dtmStartedFollowingList - maps to the dtm_started_following field
	 * @param flIsUpdatingOne - maps to the fl_is_updating field
	 * @param flIsUpdatingTwo - maps to the fl_is_updating field
	 * 
	 * @return the MultiFinder<Author>()
	 * 
	 */
	public static MultiFinder<Author> findInNumber(Boolean flIsUpdating, List<Boolean> flIsUpdatingList, List<Timestamp> dtmStartedFollowingList, Boolean flIsUpdatingOne, Boolean flIsUpdatingTwo) {
		return(
				new MultiFinder<Author>(
				LOGGER,
				SQL_FIND_IN_NUMBER,
				resultSet -> { try {return list(resultSet);} catch (SQLException e) { return(null); }},
				new Object[] {flIsUpdating, flIsUpdatingList, dtmStartedFollowingList, flIsUpdatingOne, flIsUpdatingTwo}
		));
	}
	/**
	 * Return the results as a list of Author, this will be empty if
	 * none are found.
	 * 
	 * @param resultSet the results as a list of Author
	 * 
	 * @return the list of results
	 * 
	 * @throws SQLException if there was a problem retrieving the results
	 */
	private static List<Author> list(ResultSet resultSet) throws SQLException {
		List<Author> arrayList = new ArrayList<Author>();
		while(resultSet.next()) {
			arrayList.add(new Author(
					ConnectionManager.getNullableResultLong(resultSet, 1),
					ConnectionManager.getNullableResultLong(resultSet, 2),
					ConnectionManager.getNullableResultString(resultSet, 3),
					ConnectionManager.getNullableResultString(resultSet, 4),
					ConnectionManager.getNullableResultString(resultSet, 5),
					ConnectionManager.getNullableResultString(resultSet, 6),
					ConnectionManager.getNullableResultString(resultSet, 7),
					ConnectionManager.getNullableResultLong(resultSet, 8),
					ConnectionManager.getNullableResultLong(resultSet, 9),
					ConnectionManager.getNullableResultTimestamp(resultSet, 10),
					ConnectionManager.getNullableResultBoolean(resultSet, 11),
					ConnectionManager.getNullableResultBoolean(resultSet, 12),
					ConnectionManager.getNullableResultBoolean(resultSet, 13)));
		}
		return(arrayList);
	}

	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * 
	 * This is the start of the user defined select clause finders which are 
	 * generated through the "finders" JSON key, with a 'selectClause' 
	 * key on the finder.
	 * 
	 * All selectClause finders return a subset of the data from a row of the 
	 * database table (or tables if there is a join statement) as a generated
	 * bean
	 * 
	 * There are 9 defined finders on the author table, of those finders
	 * the following are the select clause finders:
	 * 
	 * 
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

}