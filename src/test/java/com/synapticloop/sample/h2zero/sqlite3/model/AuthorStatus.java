package com.synapticloop.sample.h2zero.sqlite3.model;

//        - - - - thoughtfully generated by synapticloop h2zero - - - -        
//          with the use of synapticloop templar templating language
//                  (/java/model/java-create-model.templar)

import java.util.HashMap;

import java.util.Map;


import org.json.JSONObject;
import com.synapticloop.h2zero.util.XmlHelper;

import com.synapticloop.h2zero.base.model.ModelBaseHelper;
import com.synapticloop.sample.h2zero.sqlite3.model.util.Constants;


/**
 * <p>This is the model for the <code>AuthorStatus</code> which maps to the <code>author_status</code> database table.</p>
 * 
 * <p>This model maps all of the fields from the database as defined in the
 * <code>.h2zero</code> file.  The parsed definition of the table and fields are:</p>
 * 
  * <p><strong>NOTE:</strong> This is a constant table which cannot be changed and no CRUD methods are available.</p>
  * 
 * <table>
 *   <thead>
 *     <tr>
 *       <th>Field name</th>
 *       <th>SQL type</th>
 *       <th>Field length<br />(min:max)</th>
 *       <th>Nullable?</th>
 *       <th>Keys</th>
 *       <th>Comments</th>
 *     </tr>
 *   </thead>
 *   <tbody>
 *     <tr>
 *       <td><code>id_author_status</code></td>
 *       <td>bigint</td>
 *       <td> -- </td>
 *       <td>false</td>
 *       <td><code>primary</code></td>
 *       <td> -- </td>
 *     </tr>
 *     <tr>
 *       <td><code>txt_author_status</code></td>
 *       <td>varchar</td>
 *       <td>(0:256)</td>
 *       <td>false</td>
 *       <td> <primary>unique</primary></td>
 *       <td> -- </td>
 *     </tr>
 *     <tr>
 *       <td><code>txt_desc_author_status</code></td>
 *       <td>varchar</td>
 *       <td>(0:256)</td>
 *       <td>false</td>
 *       <td> <primary>unique</primary></td>
 *       <td> -- </td>
 *     </tr>
 *   </tbody>
 * </table>
 * 
 * <p><strong>NOTE:</strong>This table is a <code>CONSTANT</code> table with the following values:</p>


 * <table>
 *   <thead>
 *     <tr>
 *       <th>Constant<br />accessor</th>
 *       <th>id_author_status</th> *       <th>txt_author_status</th> *       <th>txt_desc_author_status</th> *     </tr>
 *   </thead>
 *   <tbody>
 *     <tr>
 *       <td><code>AuthorStatus.WAITING</code></td>
 *       <td><code>1</code></td>
 *       <td><code>'WAITING'</code></td>
 *       <td><code>'Waiting for the number of followers for the author to be hit'</code></td>
 *     <tr>
 *     <tr>
 *       <td><code>AuthorStatus.TO_BE_EVALUATED</code></td>
 *       <td><code>2</code></td>
 *       <td><code>'TO_BE_EVALUATED'</code></td>
 *       <td><code>'Author is waiting to be evaluated.'</code></td>
 *     <tr>
 *     <tr>
 *       <td><code>AuthorStatus.IGNORED</code></td>
 *       <td><code>3</code></td>
 *       <td><code>'IGNORED'</code></td>
 *       <td><code>'Author is being ignored.'</code></td>
 *     <tr>
 *     <tr>
 *       <td><code>AuthorStatus.FOLLOWED</code></td>
 *       <td><code>4</code></td>
 *       <td><code>'FOLLOWED'</code></td>
 *       <td><code>'Author is followed.'</code></td>
 *     <tr>
 *   </tbody>
 * </table>
 * 
 * @author synapticloop h2zero
 * 
 * <p>@see <a href="https://github.com/synapticloop/h2zero">Synapticloop h2zero GitHub repository</a></p>
 */
public class AuthorStatus  {
	// the binder is unused in code, but will generate compile problems if this 
	// class is no longer referenced in the h2zero file. Just a nicety for
	// removing dead code
	@SuppressWarnings("unused")
	private static final String BINDER = Constants.AUTHOR_STATUS_BINDER;

	public static final AuthorStatus WAITING = new AuthorStatus(Long.valueOf(1), "WAITING", "Waiting for the number of followers for the author to be hit");
	public static final AuthorStatus TO_BE_EVALUATED = new AuthorStatus(Long.valueOf(2), "TO_BE_EVALUATED", "Author is waiting to be evaluated.");
	public static final AuthorStatus IGNORED = new AuthorStatus(Long.valueOf(3), "IGNORED", "Author is being ignored.");
	public static final AuthorStatus FOLLOWED = new AuthorStatus(Long.valueOf(4), "FOLLOWED", "Author is followed.");
 	public static final Long WAITING_PRIMARY_KEY_VALUE = Long.valueOf(1);
 	public static final Long TO_BE_EVALUATED_PRIMARY_KEY_VALUE = Long.valueOf(2);
 	public static final Long IGNORED_PRIMARY_KEY_VALUE = Long.valueOf(3);
 	public static final Long FOLLOWED_PRIMARY_KEY_VALUE = Long.valueOf(4);

	public static final AuthorStatus[] ALL =  {
		AuthorStatus.WAITING, AuthorStatus.TO_BE_EVALUATED, AuthorStatus.IGNORED, AuthorStatus.FOLLOWED
	};

	public static final Map<Long, AuthorStatus> ALL_LOOKUP = new HashMap<>();
	static{
		ALL_LOOKUP.put(Long.valueOf(1), AuthorStatus.WAITING);
		ALL_LOOKUP.put(Long.valueOf(2), AuthorStatus.TO_BE_EVALUATED);
		ALL_LOOKUP.put(Long.valueOf(3), AuthorStatus.IGNORED);
		ALL_LOOKUP.put(Long.valueOf(4), AuthorStatus.FOLLOWED);

	};


	public static final String PRIMARY_KEY_FIELD = "id_author_status";  // the primary key - a convenience field



	private Long idAuthorStatus = null; // maps to the id_author_status field
	private String txtAuthorStatus = null; // maps to the txt_author_status field
	private String txtDescAuthorStatus = null; // maps to the txt_desc_author_status field

	/**
	 * <p>Create a new <code>AuthorStatus</code> object with all fields
	 * some of which can be null.</p>
	 * 
	 * <p><strong>NOTE:</strong> this does not insert the object into the database
	 * the <code>.insert()</code> method must be called to insert this object.</p>
	 * 
	 * <p>Creating a new AuthorStatus:</p>
	 * 
	 * <pre>new AuthorStatus(
	 *     Long idAuthorStatus,  // id_author_status 
	 *     String txtAuthorStatus,  // txt_author_status 
	 *     String txtDescAuthorStatus // txt_desc_author_status 
	 * );</pre>
	 * 
	 */
	public AuthorStatus(Long idAuthorStatus, String txtAuthorStatus, String txtDescAuthorStatus) {
		this.idAuthorStatus = idAuthorStatus;
		this.txtAuthorStatus = txtAuthorStatus;
		this.txtDescAuthorStatus = txtDescAuthorStatus;
	}


	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * Boring ol' getters and setters 
	 * 
	 * Getters will update the hit count upon access.
	 * 
	 * Setters, if the passed in parameter's value differs will set the
	 * 'isDirty' flag
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

	/**
	 * <p>Convenience method for returning the primary key field (which is the id_author_status field).</p>
	 * 
	 * <p><strong>NOTE:</strong> This will update the hit count.</p>
	 * 
	 * @return The value of the primary key
	 */
	public Long getPrimaryKey() {return(this.idAuthorStatus); }


	/**
	 * <p>Return the value of the id_author_status, updating the hit count for this field.</p>
	 * 
	 * @return the value of the id_author_status which may NOT be null.
	 */
	public Long getIdAuthorStatus() {return(this.idAuthorStatus); }

	/**
	 * <p>Return the value of the txt_author_status, updating the hit count for this field.</p>
	 * 
	 * @return the value of the txt_author_status which may NOT be null.
	 */
	public String getTxtAuthorStatus() {return(this.txtAuthorStatus); }

	/**
	 * <p>Return the value of the txt_desc_author_status, updating the hit count for this field.</p>
	 * 
	 * @return the value of the txt_desc_author_status which may NOT be null.
	 */
	public String getTxtDescAuthorStatus() {return(this.txtDescAuthorStatus); }

	@Override
	public String toString() {
		return(
			"{\"AuthorStatus\": {" +
			"\"idAuthorStatus\":\"" + this.idAuthorStatus + "\"" +
			"\"txtAuthorStatus\":\"" + this.txtAuthorStatus + "\"" +
			"\"txtDescAuthorStatus\":\"" + this.txtDescAuthorStatus + "\"" +
			"}");
	}
	public JSONObject getToJSON() {
		return(toJSON());
	}

	public JSONObject toJSON() {
		JSONObject jsonObject = new JSONObject();

		jsonObject.put("type", "table");
		jsonObject.put("name", "AuthorStatus");
		JSONObject fieldsObject = new JSONObject();

		ModelBaseHelper.addToJSONObject(fieldsObject, "idAuthorStatus", this.getIdAuthorStatus());
		ModelBaseHelper.addToJSONObject(fieldsObject, "txtAuthorStatus", this.getTxtAuthorStatus());
		ModelBaseHelper.addToJSONObject(fieldsObject, "txtDescAuthorStatus", this.getTxtDescAuthorStatus());

		jsonObject.put("fields", fieldsObject);

		return(jsonObject);
	}


	public String toJsonString() {
		return(toJSON().toString());
	}

	public String getJsonString() {
		return(toJsonString());
	}

	/**
	 * <p>Return an XML representation of the <code>AuthorStatus</code> model as a <code>String</code>, 
	 * with the root node being the name of the table - i.e. <code>&lt;author_status /&gt;</code> 
	 * and the child nodes the name of the fields.</p>
	 * 
	 * <p><strong>NOTE:</strong> Any field marked as secure will not be included as
	 * part of the XML document</p>
	 * 
	 * @return An XML representation of the model as a <code>String</code>.
	 */
	public String toXMLString() {
		return("<author_status>" + 
			String.format("<id_author_status null=\"%b\">%s</id_author_status>", (this.getIdAuthorStatus() == null), (this.getIdAuthorStatus() != null ? this.getIdAuthorStatus() : "")) + 
			String.format("<txt_author_status null=\"%b\">%s</txt_author_status>", (this.getTxtAuthorStatus() == null), (this.getTxtAuthorStatus() != null ? XmlHelper.escapeXml(this.getTxtAuthorStatus()) : "")) + 
			String.format("<txt_desc_author_status null=\"%b\">%s</txt_desc_author_status>", (this.getTxtDescAuthorStatus() == null), (this.getTxtDescAuthorStatus() != null ? XmlHelper.escapeXml(this.getTxtDescAuthorStatus()) : "")) + 
			"</author_status>");
	}

}