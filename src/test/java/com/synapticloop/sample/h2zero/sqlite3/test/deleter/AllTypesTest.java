package com.synapticloop.sample.h2zero.sqlite3.test.deleter;

//        - - - - thoughtfully generated by synapticloop h2zero - - - -        
//          with the use of synapticloop templar templating language
//                    (/java/test/java-deleter-test.templar)


import static org.junit.Assert.*;

import org.junit.Assert;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;
import com.synapticloop.sample.h2zero.sqlite3.ConnectionManagerInitialiserOverride;
import com.synapticloop.h2zero.base.exception.H2ZeroFinderException;
import com.synapticloop.h2zero.base.manager.sqlite3.ConnectionManager;
import com.synapticloop.sample.h2zero.sqlite3.test.DatabaseSetupTest;


import java.math.*;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;


import com.synapticloop.sample.h2zero.sqlite3.deleter.AllTypesDeleter;

/**
 * WARNING NOTE: these tests are designed to test the generated SQL statements
 * __NOT__ whether the database actually returns sane results.
 */

public class AllTypesTest extends DatabaseSetupTest {

	@Test
	public void testAllTypesDeleteByPrimaryKey() throws SQLException {
		Assert.assertEquals(0, AllTypesDeleter.deleteByPrimaryKey(1L).execute());
	}

	@Test
	public void testAllTypesDeleteByPrimaryKeySilent() throws SQLException {
		Assert.assertEquals(0, AllTypesDeleter.deleteByPrimaryKey(1L).executeSilent());
	}

	@Test
	public void testAllTypesDeleteByPrimaryKeyWithConnection() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			Assert.assertEquals(0, AllTypesDeleter.deleteByPrimaryKey(1L).withConnection(connection).execute());
		}
	}

	@Test
	public void testAllTypesDeleteByPrimaryKeyWithConnectionSilent() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			Assert.assertEquals(0, AllTypesDeleter.deleteByPrimaryKey(1L).withConnection(connection).executeSilent());
		}
	}

	@Test
	public void testAllTypesDeleteAll() throws SQLException {
		Assert.assertEquals(0, AllTypesDeleter.deleteAll().execute());
	}

	@Test
	public void testAllTypesDeleteAllSilent() throws SQLException {
		Assert.assertEquals(0, AllTypesDeleter.deleteAll().executeSilent());
	}

	@Test
	public void testAllTypesDeleteAllWithConnection() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			Assert.assertEquals(0, AllTypesDeleter.deleteAll().withConnection(connection).execute());
		}
	}

	@Test
	public void testAllTypesDeleteAllWithConnectionSilent() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			Assert.assertEquals(0, AllTypesDeleter.deleteAll().withConnection(connection).executeSilent());
		}
	}

	@Test
	public void testAllTypesdeleteByIdAllTypes() throws SQLException {
		Assert.assertEquals(0, AllTypesDeleter.deleteByIdAllTypes(1L).execute());
	}

	@Test
	public void testAllTypesdeleteByIdAllTypesSilent() throws SQLException {
		Assert.assertEquals(0, AllTypesDeleter.deleteByIdAllTypes(1L).executeSilent());
	}

	@Test
	public void testAllTypesdeleteByIdAllTypesWithConnection() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()){
			Assert.assertEquals(0, AllTypesDeleter.deleteByIdAllTypes(1L).withConnection(connection).execute());
		}
	}

	@Test
	public void testAllTypesdeleteByIdAllTypesWithConnectionSilent() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()){
			Assert.assertEquals(0, AllTypesDeleter.deleteByIdAllTypes(1L).withConnection(connection).executeSilent());
		}
	}

	@Test
	public void testAllTypesdeleteByTestBigint() throws SQLException {
		Assert.assertEquals(0, AllTypesDeleter.deleteByTestBigint(1L).execute());
	}

	@Test
	public void testAllTypesdeleteByTestBigintSilent() throws SQLException {
		Assert.assertEquals(0, AllTypesDeleter.deleteByTestBigint(1L).executeSilent());
	}

	@Test
	public void testAllTypesdeleteByTestBigintWithConnection() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()){
			Assert.assertEquals(0, AllTypesDeleter.deleteByTestBigint(1L).withConnection(connection).execute());
		}
	}

	@Test
	public void testAllTypesdeleteByTestBigintWithConnectionSilent() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()){
			Assert.assertEquals(0, AllTypesDeleter.deleteByTestBigint(1L).withConnection(connection).executeSilent());
		}
	}

	@Test
	public void testAllTypesdeleteByTestBoolean() throws SQLException {
		Assert.assertEquals(0, AllTypesDeleter.deleteByTestBoolean(true).execute());
	}

	@Test
	public void testAllTypesdeleteByTestBooleanSilent() throws SQLException {
		Assert.assertEquals(0, AllTypesDeleter.deleteByTestBoolean(true).executeSilent());
	}

	@Test
	public void testAllTypesdeleteByTestBooleanWithConnection() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()){
			Assert.assertEquals(0, AllTypesDeleter.deleteByTestBoolean(true).withConnection(connection).execute());
		}
	}

	@Test
	public void testAllTypesdeleteByTestBooleanWithConnectionSilent() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()){
			Assert.assertEquals(0, AllTypesDeleter.deleteByTestBoolean(true).withConnection(connection).executeSilent());
		}
	}

	@Test
	public void testAllTypesdeleteByTestDate() throws SQLException {
		Assert.assertEquals(0, AllTypesDeleter.deleteByTestDate(new java.sql.Date(System.currentTimeMillis())).execute());
	}

	@Test
	public void testAllTypesdeleteByTestDateSilent() throws SQLException {
		Assert.assertEquals(0, AllTypesDeleter.deleteByTestDate(new java.sql.Date(System.currentTimeMillis())).executeSilent());
	}

	@Test
	public void testAllTypesdeleteByTestDateWithConnection() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()){
			Assert.assertEquals(0, AllTypesDeleter.deleteByTestDate(new java.sql.Date(System.currentTimeMillis())).withConnection(connection).execute());
		}
	}

	@Test
	public void testAllTypesdeleteByTestDateWithConnectionSilent() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()){
			Assert.assertEquals(0, AllTypesDeleter.deleteByTestDate(new java.sql.Date(System.currentTimeMillis())).withConnection(connection).executeSilent());
		}
	}

	@Test
	public void testAllTypesdeleteByTestDatetime() throws SQLException {
		Assert.assertEquals(0, AllTypesDeleter.deleteByTestDatetime(new java.sql.Timestamp(System.currentTimeMillis())).execute());
	}

	@Test
	public void testAllTypesdeleteByTestDatetimeSilent() throws SQLException {
		Assert.assertEquals(0, AllTypesDeleter.deleteByTestDatetime(new java.sql.Timestamp(System.currentTimeMillis())).executeSilent());
	}

	@Test
	public void testAllTypesdeleteByTestDatetimeWithConnection() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()){
			Assert.assertEquals(0, AllTypesDeleter.deleteByTestDatetime(new java.sql.Timestamp(System.currentTimeMillis())).withConnection(connection).execute());
		}
	}

	@Test
	public void testAllTypesdeleteByTestDatetimeWithConnectionSilent() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()){
			Assert.assertEquals(0, AllTypesDeleter.deleteByTestDatetime(new java.sql.Timestamp(System.currentTimeMillis())).withConnection(connection).executeSilent());
		}
	}

	@Test
	public void testAllTypesdeleteByTestDouble() throws SQLException {
		Assert.assertEquals(0, AllTypesDeleter.deleteByTestDouble(0.0).execute());
	}

	@Test
	public void testAllTypesdeleteByTestDoubleSilent() throws SQLException {
		Assert.assertEquals(0, AllTypesDeleter.deleteByTestDouble(0.0).executeSilent());
	}

	@Test
	public void testAllTypesdeleteByTestDoubleWithConnection() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()){
			Assert.assertEquals(0, AllTypesDeleter.deleteByTestDouble(0.0).withConnection(connection).execute());
		}
	}

	@Test
	public void testAllTypesdeleteByTestDoubleWithConnectionSilent() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()){
			Assert.assertEquals(0, AllTypesDeleter.deleteByTestDouble(0.0).withConnection(connection).executeSilent());
		}
	}

	@Test
	public void testAllTypesdeleteByTestFloat() throws SQLException {
		Assert.assertEquals(0, AllTypesDeleter.deleteByTestFloat(0.0f).execute());
	}

	@Test
	public void testAllTypesdeleteByTestFloatSilent() throws SQLException {
		Assert.assertEquals(0, AllTypesDeleter.deleteByTestFloat(0.0f).executeSilent());
	}

	@Test
	public void testAllTypesdeleteByTestFloatWithConnection() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()){
			Assert.assertEquals(0, AllTypesDeleter.deleteByTestFloat(0.0f).withConnection(connection).execute());
		}
	}

	@Test
	public void testAllTypesdeleteByTestFloatWithConnectionSilent() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()){
			Assert.assertEquals(0, AllTypesDeleter.deleteByTestFloat(0.0f).withConnection(connection).executeSilent());
		}
	}

	@Test
	public void testAllTypesdeleteByTestInt() throws SQLException {
		Assert.assertEquals(0, AllTypesDeleter.deleteByTestInt(1).execute());
	}

	@Test
	public void testAllTypesdeleteByTestIntSilent() throws SQLException {
		Assert.assertEquals(0, AllTypesDeleter.deleteByTestInt(1).executeSilent());
	}

	@Test
	public void testAllTypesdeleteByTestIntWithConnection() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()){
			Assert.assertEquals(0, AllTypesDeleter.deleteByTestInt(1).withConnection(connection).execute());
		}
	}

	@Test
	public void testAllTypesdeleteByTestIntWithConnectionSilent() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()){
			Assert.assertEquals(0, AllTypesDeleter.deleteByTestInt(1).withConnection(connection).executeSilent());
		}
	}

	@Test
	public void testAllTypesdeleteByTestInteger() throws SQLException {
		Assert.assertEquals(0, AllTypesDeleter.deleteByTestInteger(1).execute());
	}

	@Test
	public void testAllTypesdeleteByTestIntegerSilent() throws SQLException {
		Assert.assertEquals(0, AllTypesDeleter.deleteByTestInteger(1).executeSilent());
	}

	@Test
	public void testAllTypesdeleteByTestIntegerWithConnection() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()){
			Assert.assertEquals(0, AllTypesDeleter.deleteByTestInteger(1).withConnection(connection).execute());
		}
	}

	@Test
	public void testAllTypesdeleteByTestIntegerWithConnectionSilent() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()){
			Assert.assertEquals(0, AllTypesDeleter.deleteByTestInteger(1).withConnection(connection).executeSilent());
		}
	}

	@Test
	public void testAllTypesdeleteByTestMediumint() throws SQLException {
		Assert.assertEquals(0, AllTypesDeleter.deleteByTestMediumint(1).execute());
	}

	@Test
	public void testAllTypesdeleteByTestMediumintSilent() throws SQLException {
		Assert.assertEquals(0, AllTypesDeleter.deleteByTestMediumint(1).executeSilent());
	}

	@Test
	public void testAllTypesdeleteByTestMediumintWithConnection() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()){
			Assert.assertEquals(0, AllTypesDeleter.deleteByTestMediumint(1).withConnection(connection).execute());
		}
	}

	@Test
	public void testAllTypesdeleteByTestMediumintWithConnectionSilent() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()){
			Assert.assertEquals(0, AllTypesDeleter.deleteByTestMediumint(1).withConnection(connection).executeSilent());
		}
	}

	@Test
	public void testAllTypesdeleteByTestNumeric() throws SQLException {
		Assert.assertEquals(0, AllTypesDeleter.deleteByTestNumeric(new java.math.BigDecimal("0.0")).execute());
	}

	@Test
	public void testAllTypesdeleteByTestNumericSilent() throws SQLException {
		Assert.assertEquals(0, AllTypesDeleter.deleteByTestNumeric(new java.math.BigDecimal("0.0")).executeSilent());
	}

	@Test
	public void testAllTypesdeleteByTestNumericWithConnection() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()){
			Assert.assertEquals(0, AllTypesDeleter.deleteByTestNumeric(new java.math.BigDecimal("0.0")).withConnection(connection).execute());
		}
	}

	@Test
	public void testAllTypesdeleteByTestNumericWithConnectionSilent() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()){
			Assert.assertEquals(0, AllTypesDeleter.deleteByTestNumeric(new java.math.BigDecimal("0.0")).withConnection(connection).executeSilent());
		}
	}

	@Test
	public void testAllTypesdeleteByTestSmallint() throws SQLException {
		Assert.assertEquals(0, AllTypesDeleter.deleteByTestSmallint((short) 0).execute());
	}

	@Test
	public void testAllTypesdeleteByTestSmallintSilent() throws SQLException {
		Assert.assertEquals(0, AllTypesDeleter.deleteByTestSmallint((short) 0).executeSilent());
	}

	@Test
	public void testAllTypesdeleteByTestSmallintWithConnection() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()){
			Assert.assertEquals(0, AllTypesDeleter.deleteByTestSmallint((short) 0).withConnection(connection).execute());
		}
	}

	@Test
	public void testAllTypesdeleteByTestSmallintWithConnectionSilent() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()){
			Assert.assertEquals(0, AllTypesDeleter.deleteByTestSmallint((short) 0).withConnection(connection).executeSilent());
		}
	}

	@Test
	public void testAllTypesdeleteByTestText() throws SQLException {
		Assert.assertEquals(0, AllTypesDeleter.deleteByTestText("text").execute());
	}

	@Test
	public void testAllTypesdeleteByTestTextSilent() throws SQLException {
		Assert.assertEquals(0, AllTypesDeleter.deleteByTestText("text").executeSilent());
	}

	@Test
	public void testAllTypesdeleteByTestTextWithConnection() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()){
			Assert.assertEquals(0, AllTypesDeleter.deleteByTestText("text").withConnection(connection).execute());
		}
	}

	@Test
	public void testAllTypesdeleteByTestTextWithConnectionSilent() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()){
			Assert.assertEquals(0, AllTypesDeleter.deleteByTestText("text").withConnection(connection).executeSilent());
		}
	}

	@Test
	public void testAllTypesdeleteByTestTinyint() throws SQLException {
		Assert.assertEquals(0, AllTypesDeleter.deleteByTestTinyint(true).execute());
	}

	@Test
	public void testAllTypesdeleteByTestTinyintSilent() throws SQLException {
		Assert.assertEquals(0, AllTypesDeleter.deleteByTestTinyint(true).executeSilent());
	}

	@Test
	public void testAllTypesdeleteByTestTinyintWithConnection() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()){
			Assert.assertEquals(0, AllTypesDeleter.deleteByTestTinyint(true).withConnection(connection).execute());
		}
	}

	@Test
	public void testAllTypesdeleteByTestTinyintWithConnectionSilent() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()){
			Assert.assertEquals(0, AllTypesDeleter.deleteByTestTinyint(true).withConnection(connection).executeSilent());
		}
	}

	@Test
	public void testAllTypesdeleteByTestVarchar() throws SQLException {
		Assert.assertEquals(0, AllTypesDeleter.deleteByTestVarchar("varchar").execute());
	}

	@Test
	public void testAllTypesdeleteByTestVarcharSilent() throws SQLException {
		Assert.assertEquals(0, AllTypesDeleter.deleteByTestVarchar("varchar").executeSilent());
	}

	@Test
	public void testAllTypesdeleteByTestVarcharWithConnection() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()){
			Assert.assertEquals(0, AllTypesDeleter.deleteByTestVarchar("varchar").withConnection(connection).execute());
		}
	}

	@Test
	public void testAllTypesdeleteByTestVarcharWithConnectionSilent() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()){
			Assert.assertEquals(0, AllTypesDeleter.deleteByTestVarchar("varchar").withConnection(connection).executeSilent());
		}
	}

}
