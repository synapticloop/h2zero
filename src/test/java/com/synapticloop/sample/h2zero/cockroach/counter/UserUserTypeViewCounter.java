package com.synapticloop.sample.h2zero.cockroach.counter;

// - - - - thoughtfully generated by synapticloop h2zero - - - - 
//    with the use of synapticloop templar templating language
//       (/java/counter/java-create-view-counter.templar)

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import java.util.List;
import java.sql.*;

import com.synapticloop.h2zero.base.manager.cockroach.ConnectionManager;


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


import com.synapticloop.sample.h2zero.cockroach.model.util.Constants;

import com.synapticloop.h2zero.base.sql.nolimitoffset.Counter;

/**
 * <p>This class contains all of the counters that are defined in the h2zero
 * file.</p>
 * 
 * <p>A counter may only return a simple integer (i.e. the count) response
 * from a query.</p>
 * 
 * <p>View name: <code>user_user_type</code></p>
 * 
 * 
* <p>To execute any counter SQL query, you may optionally pass in a connection, and execute it (silently if desired)</p>
 *
 * <p><strong><em>Executing a counter without a passed in connection.</em></strong></p>
 *
 * <pre>UserUserTypeCounter.counterName(parameter1, parameter2, ...)
 *          .execute();
 * </pre>
 *
 * <p><strong><em>Executing a counter WITH a passed in connection.</em></strong></p>
 *
 * <pre>UserUserTypeCounter.counterName(parameter1, parameter2, ...)
 *          .withConnection(connection)
 *          .execute();
 *  </pre>
 *
 * <p><strong><em>Executing a counter WITHOUT a passed in connection SILENTLY
 * (i.e. All Exceptions are silently swallowed and logged as an error through
 * the logger.)</em></strong></p>
 *
 * <pre>UserUserTypeCounter.counterName(parameter1, parameter2, ...)
 *          .executeSilent();
 * </pre>
 *
 * <p><strong><em>Executing a counter WITH a passed in connection SILENTLY
 * (i.e. All Exceptions are silently swallowed and logged as an error through
 * the logger.)</em></strong></p>
 *
 * <pre>UserUserTypeCounter.counterName(parameter1, parameter2, ...)
 *          .withConnection(connection)
 *          .executeSilent();
 * </pre>
 *
 * @author synapticloop h2zero
 * 
 * <p>@see <a href="https://github.com/synapticloop/h2zero">Synapticloop h2zero GitHub repository</a></p>
 */
public class UserUserTypeViewCounter {
	// the binder is unused in code, but will generate compile problems if this 
	// class is no longer referenced in the h2zero file. Just a nicety for
	// removing dead code
	@SuppressWarnings("unused")
	private static final String BINDER = Constants.USER_USER_TYPE_BINDER;

	private static final Logger LOGGER = LoggerFactory.getLogger(UserUserTypeViewCounter.class);


	private static final String SQL_BUILTIN_COUNT_ALL = "select count(*) from user_user_type";



	private UserUserTypeViewCounter() {}

	/**
	 * Find the count of all UserUserType objects
	 * 
	 * @return the count of UserUserType objects
	 * 
	 * @throws SQLException if there was an error in the SQL statement
	 */
	public static Counter countAll() throws SQLException {
	return(
		new Counter(
				LOGGER,
				SQL_BUILTIN_COUNT_ALL));
	}

}