package com.synapticloop.sample.h2zero.mysql.question;

//        - - - - thoughtfully generated by synapticloop h2zero - - - -        
//          with the use of synapticloop templar templating language
//                (/java/question/java-create-question.templar)

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;

import com.synapticloop.h2zero.base.exception.H2ZeroFinderException;
import com.synapticloop.h2zero.base.manager.mysql.ConnectionManager;


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


import com.synapticloop.sample.h2zero.mysql.model.util.Constants;

import com.synapticloop.h2zero.base.sql.nolimitoffset.Question;
import java.util.HashMap;
import java.util.Map;
import java.util.List;

/**
 * <p>This class contains all of the questions that are defined in the h2zero
 * file.</p>
 * 
 * <p>A question may only return a simple true/false response from a query.</p>
 * 
 * <p>Table name: <code>user</code></p>
 * 
 * <p>Questions defined:
 * <ul>
 * <li><code>doWeHaveMoreThanTwentyUsers</code> - SQL query run {@link #SQL_DO_WE_HAVE_MORE_THAN_TWENTY_USERS}</li>
 * <li><code>doesUserNameExist</code> - SQL query run {@link #SQL_DOES_USER_NAME_EXIST}</li>
 * <li><code>doWeHaveUsersBetweenAgeExclusive</code> - SQL query run {@link #SQL_DO_WE_HAVE_USERS_BETWEEN_AGE_EXCLUSIVE}</li>
 * <li><code>doWeHaveUsersInAges</code> - SQL query run {@link #SQL_DO_WE_HAVE_USERS_IN_AGES}</li>
 * </ul>
 * 
* <p>To execute any question SQL query, you may pass in a connection, and execute it (silently if desired)</p>
 *
 * <p><strong><em>Executing a question without a passed in connection.</em></strong></p>
 *
 * <pre>UserQuestion.questionName(parameter1, parameter2, ...)
 *          .execute();
 * </pre>
 *
 * <p><strong><em>Executing a question WITH a passed in connection.</em></strong></p>
 *
 * <pre>UserQuestion.questionName(parameter1, parameter2, ...)
 *          .withConnection(connection)
 *          .execute();
 *  </pre>
 *
 * <p><strong><em>Executing a question WITHOUT a passed in connection SILENTLY
 * (i.e. All Exceptions are silently swallowed and logged as an error through
 * the logger.)</em></strong></p>
 *
 * <pre>UserQuestion.questionName(parameter1, parameter2, ...)
 *          .executeSilent();
 * </pre>
 *
 * <p><strong><em>Executing a question WITH a passed in connection SILENTLY
 * (i.e. All Exceptions are silently swallowed and logged as an error through
 * the logger.)</em></strong></p>
 *
 * <pre>UserQuestion.questionName(parameter1, parameter2, ...)
 *          .withConnection(connection)
 *          .executeSilent();
 * </pre>
 *
 * @author synapticloop h2zero
 * 
 * <p>@see <a href="https://github.com/synapticloop/h2zero">Synapticloop h2zero GitHub repository</a></p>
 */
public class UserQuestion {
	// the binder is unused in code, but will generate compile problems if this 
	// class is no longer referenced in the h2zero file. Just a nicety for
	// removing dead code
	@SuppressWarnings("unused")
	private static final String BINDER = Constants.USER_BINDER;

	private static final Logger LOGGER = LoggerFactory.getLogger(UserQuestion.class);


	// this is an internal SQL question select statement used by the validator
	private static final String SQL_INTERNAL_DOES_PRIMARY_KEY_EXIST = "SELECT (COUNT(*) = 1) WHERE id_user = ?";

	private static final String SQL_DO_WE_HAVE_MORE_THAN_TWENTY_USERS = "select count(*) > 20 from user";
	private static final String SQL_DOES_USER_NAME_EXIST = "select count(*) > 0 from user";
	private static final String SQL_DO_WE_HAVE_USERS_BETWEEN_AGE_EXCLUSIVE = "select count(*) > 0 from user" + " where num_age > ? and num_age < ?";
	private static final String SQL_DO_WE_HAVE_USERS_IN_AGES = "select count(*) > 0 from user" + " where num_age in (...)";


	/**
	 * <p>An internal method to check whether a specific primary key exists, 
	 * generated as part of the validation methods.</p>
	 * 
	 * @param idUser The primary key for this model.
	 * 
	 * @return whether the primary key exists
	 */
	public static boolean internalDoesPrimaryKeyExist(Long idUser) {
		ResultSet resultSet = null;

		boolean answer = false;

		try {
			Connection connection = ConnectionManager.getConnection();
			PreparedStatement preparedStatement = connection.prepareStatement(SQL_INTERNAL_DOES_PRIMARY_KEY_EXIST);
			ConnectionManager.setBigint(preparedStatement, 1, idUser);

			resultSet = preparedStatement.executeQuery();
			if(resultSet.next()) {
				answer = resultSet.getBoolean(1);
			}
		} catch (SQLException sqlex) {
			if(LOGGER.isWarnEnabled()) {
				LOGGER.warn("SQLException internalDoesPrimaryKeyExist(): " + sqlex.getMessage());
				if(LOGGER.isDebugEnabled()) {
					sqlex.printStackTrace();
				}
			}
		} finally {
			ConnectionManager.closeAll(resultSet);
		}
		return(answer);
	}

	/**
	 * <p>Return the question object (optionally setting a connection) for this query,
	 * ready for execution.</p>
	 *
	 * <p>A <code>Connection</code> object may optionally be set for this query.
	 * Note that if no connection is set, one will automatically be retrieved from
	 * the connection pool.</p>
	 *
	 * <p><code>.withConnection(connection)</code></p>
	 *
	 * <p>And then can be executed with the following call:</p>
	 *
	 * <p><code>.execute()</code></p>
	 *
	 * <p>Alternatively the call can be executed silently (i.e. any exceptions that
	 * may have been thrown will be silently swallowed and the error logged.)</p>
	 *
	 * <p><code>.executeSilent()</code></p>
	 *
	 * <p>This question executes the following sql statement:</p>
	 *
	 * <pre>select count(*) > 20 from user
	 * </pre>
	 *
	 *
	 * @return The question object (optionally setting a connection) ready for 
	 *    and execution.
	 */
	public static Question doWeHaveMoreThanTwentyUsers() {
		return(
				new Question(
						LOGGER, 
						SQL_DO_WE_HAVE_MORE_THAN_TWENTY_USERS, 
						new Object[] {  } ));
	}

	/**
	 * <p>Return the question object (optionally setting a connection) for this query,
	 * ready for execution.</p>
	 *
	 * <p>A <code>Connection</code> object may optionally be set for this query.
	 * Note that if no connection is set, one will automatically be retrieved from
	 * the connection pool.</p>
	 *
	 * <p><code>.withConnection(connection)</code></p>
	 *
	 * <p>And then can be executed with the following call:</p>
	 *
	 * <p><code>.execute()</code></p>
	 *
	 * <p>Alternatively the call can be executed silently (i.e. any exceptions that
	 * may have been thrown will be silently swallowed and the error logged.)</p>
	 *
	 * <p><code>.executeSilent()</code></p>
	 *
	 * <p>This question executes the following sql statement:</p>
	 *
	 * <pre>select count(*) > 0 from user
	 * </pre>
	 *
	 *
	 * @return The question object (optionally setting a connection) ready for 
	 *    and execution.
	 */
	public static Question doesUserNameExist() {
		return(
				new Question(
						LOGGER, 
						SQL_DOES_USER_NAME_EXIST, 
						new Object[] {  } ));
	}

	/**
	 * <p>Return the question object (optionally setting a connection) for this query,
	 * ready for execution.</p>
	 *
	 * <p>A <code>Connection</code> object may optionally be set for this query.
	 * Note that if no connection is set, one will automatically be retrieved from
	 * the connection pool.</p>
	 *
	 * <p><code>.withConnection(connection)</code></p>
	 *
	 * <p>And then can be executed with the following call:</p>
	 *
	 * <p><code>.execute()</code></p>
	 *
	 * <p>Alternatively the call can be executed silently (i.e. any exceptions that
	 * may have been thrown will be silently swallowed and the error logged.)</p>
	 *
	 * <p><code>.executeSilent()</code></p>
	 *
	 * <p>This question executes the following sql statement:</p>
	 *
	 * <pre>select count(*) > 0 from user
	 * where num_age > ? and num_age < ?
	 * </pre>
	 *
	 * @param numAgeFrom maps to the <code>num_age<code> field
	 * @param numAgeTo maps to the <code>num_age<code> field
	 *
	 * @return The question object (optionally setting a connection) ready for 
	 *    and execution.
	 */
	public static Question doWeHaveUsersBetweenAgeExclusive(Integer numAgeFrom, Integer numAgeTo) {
		return(
				new Question(
						LOGGER, 
						SQL_DO_WE_HAVE_USERS_BETWEEN_AGE_EXCLUSIVE, 
						new Object[] { numAgeFrom, numAgeTo } ));
	}

	/**
	 * <p>Return the question object (optionally setting a connection) for this query,
	 * ready for execution.</p>
	 *
	 * <p>A <code>Connection</code> object may optionally be set for this query.
	 * Note that if no connection is set, one will automatically be retrieved from
	 * the connection pool.</p>
	 *
	 * <p><code>.withConnection(connection)</code></p>
	 *
	 * <p>And then can be executed with the following call:</p>
	 *
	 * <p><code>.execute()</code></p>
	 *
	 * <p>Alternatively the call can be executed silently (i.e. any exceptions that
	 * may have been thrown will be silently swallowed and the error logged.)</p>
	 *
	 * <p><code>.executeSilent()</code></p>
	 *
	 * <p>This question executes the following sql statement:</p>
	 *
	 * <pre>select count(*) > 0 from user
	 * where num_age in (...)
	 * </pre>
	 *
	 * @param numAgeList The list of <code>num_age<code> fields to be 
	 *        set on the prepared SQL statement which is part of an 'in' clause.
	 *
	 * @return The question object (optionally setting a connection) ready for 
	 *    and execution.
	 */
	public static Question doWeHaveUsersInAges(List<Integer> numAgeList) {
		return(
				new Question(
						LOGGER, 
						SQL_DO_WE_HAVE_USERS_IN_AGES, 
						new Object[] { numAgeList } ));
	}

}