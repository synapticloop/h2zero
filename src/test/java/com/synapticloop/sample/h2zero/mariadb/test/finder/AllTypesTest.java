package com.synapticloop.sample.h2zero.mariadb.test.finder;

// - - - - thoughtfully generated by synapticloop h2zero - - - - 
//    with the use of synapticloop templar templating language
//            (java/test/java-finder-test.templar)


import static org.junit.Assert.*;

import org.junit.Assert;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;
import com.synapticloop.sample.h2zero.mariadb.ConnectionManagerInitialiserOverride;
import com.synapticloop.h2zero.base.manager.mariadb.ConnectionManager;
import com.synapticloop.sample.h2zero.mariadb.test.DatabaseSetupTest;


import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.sql.*;
import java.util.List;


import com.synapticloop.sample.h2zero.mariadb.finder.AllTypesFinder;

/**
 * WARNING NOTE: these tests are designed to test the generated SQL statements
 * __NOT__ whether the database actually returns sane results.
 * 
 * These will also test to ensure that connections are setting closed properly
 * so that there are no resource leakages.
 */

public class AllTypesTest extends DatabaseSetupTest {

	@Test
	public void testAllTypesFindByPrimaryKey() throws SQLException {
		int numConnections = ConnectionManager.getComboPooledDataSource().getNumConnections();
		int numBusyConnections = ConnectionManager.getComboPooledDataSource().getNumBusyConnections();
		// this shouldn't find anything - and we don't care - only about SQLExceptions
		AllTypesFinder.findByPrimaryKey(1L)
				.execute();

		Assert.assertEquals(numConnections, ConnectionManager.getComboPooledDataSource().getNumConnections());
		// need to sleep to ensure that the connection has time to close - hacky... :(
		try { Thread.sleep(1); } catch (InterruptedException e) { /* do nothing */ }
		Assert.assertEquals(numBusyConnections, ConnectionManager.getComboPooledDataSource().getNumBusyConnections());
	}

	@Test
	public void testAllTypesFindByPrimaryKeySilent() throws SQLException {
		int numConnections = ConnectionManager.getComboPooledDataSource().getNumConnections();
		int numBusyConnections = ConnectionManager.getComboPooledDataSource().getNumBusyConnections();
		Assert.assertNull(AllTypesFinder.findByPrimaryKey(-831486134981L)
				.executeSilent());

		Assert.assertEquals(numConnections, ConnectionManager.getComboPooledDataSource().getNumConnections());
		// need to sleep to ensure that the connection has time to close - hacky... :(
		try { Thread.sleep(1); } catch (InterruptedException e) { /* do nothing */ }
		Assert.assertEquals(numBusyConnections, ConnectionManager.getComboPooledDataSource().getNumBusyConnections());
	}

	@Test
	public void testAllTypesFindByPrimaryKeyWithConnection() throws SQLException {
		int numConnections = ConnectionManager.getComboPooledDataSource().getNumConnections();
		int numBusyConnections = ConnectionManager.getComboPooledDataSource().getNumBusyConnections();
		try (Connection connection = ConnectionManager.getConnection()) {
			AllTypesFinder.findByPrimaryKey(1L)
				.withConnection(connection)
				.execute();

		}
		Assert.assertEquals(numConnections, ConnectionManager.getComboPooledDataSource().getNumConnections());
		// need to sleep to ensure that the connection has time to close - hacky... :(
		try { Thread.sleep(1); } catch (InterruptedException e) { /* do nothing */ }
		Assert.assertEquals(numBusyConnections, ConnectionManager.getComboPooledDataSource().getNumBusyConnections());
	}

	@Test
	public void testAllTypesFindByPrimaryKeyWithConnectionSilent() throws SQLException {
		int numConnections = ConnectionManager.getComboPooledDataSource().getNumConnections();
		int numBusyConnections = ConnectionManager.getComboPooledDataSource().getNumBusyConnections();
		try (Connection connection = ConnectionManager.getConnection()) {
			Assert.assertNull(AllTypesFinder.findByPrimaryKey(-831486134981L)
				.withConnection(connection)
				.executeSilent());

		}
		Assert.assertEquals(numConnections, ConnectionManager.getComboPooledDataSource().getNumConnections());
		// need to sleep to ensure that the connection has time to close - hacky... :(
		try { Thread.sleep(1); } catch (InterruptedException e) { /* do nothing */ }
		Assert.assertEquals(numBusyConnections, ConnectionManager.getComboPooledDataSource().getNumBusyConnections());
	}

	@Test
	public void testAllTypesFindAll() throws SQLException {
		int numConnections = ConnectionManager.getComboPooledDataSource().getNumConnections();
		int numBusyConnections = ConnectionManager.getComboPooledDataSource().getNumBusyConnections();
		Assert.assertEquals(0, AllTypesFinder.findAll()
				.execute()
				.size());

		Assert.assertEquals(numConnections, ConnectionManager.getComboPooledDataSource().getNumConnections());
		// need to sleep to ensure that the connection has time to close - hacky... :(
		try { Thread.sleep(1); } catch (InterruptedException e) { /* do nothing */ }
		Assert.assertEquals(numBusyConnections, ConnectionManager.getComboPooledDataSource().getNumBusyConnections());
	}

	@Test
	public void testAllTypesFindAllLimitOffset() throws SQLException {
		int numConnections = ConnectionManager.getComboPooledDataSource().getNumConnections();
		int numBusyConnections = ConnectionManager.getComboPooledDataSource().getNumBusyConnections();
		Assert.assertEquals(0, AllTypesFinder.findAll()
			.withLimit(1)
			.withOffset(0)
			.execute()
			.size());
		Assert.assertEquals(numConnections, ConnectionManager.getComboPooledDataSource().getNumConnections());
		// need to sleep to ensure that the connection has time to close - hacky... :(
		try { Thread.sleep(1); } catch (InterruptedException e) { /* do nothing */ }
		Assert.assertEquals(numBusyConnections, ConnectionManager.getComboPooledDataSource().getNumBusyConnections());
	}

	@Test
	public void testAllTypesFindAllSilent() throws SQLException {
		int numConnections = ConnectionManager.getComboPooledDataSource().getNumConnections();
		int numBusyConnections = ConnectionManager.getComboPooledDataSource().getNumBusyConnections();
		Assert.assertEquals(0, AllTypesFinder.findAll()
				.executeSilent()
				.size());

		Assert.assertEquals(numConnections, ConnectionManager.getComboPooledDataSource().getNumConnections());
		// need to sleep to ensure that the connection has time to close - hacky... :(
		try { Thread.sleep(1); } catch (InterruptedException e) { /* do nothing */ }
		Assert.assertEquals(numBusyConnections, ConnectionManager.getComboPooledDataSource().getNumBusyConnections());
	}

	@Test
	public void testAllTypesFindAllLimitOffsetSilent() throws SQLException {
		int numConnections = ConnectionManager.getComboPooledDataSource().getNumConnections();
		int numBusyConnections = ConnectionManager.getComboPooledDataSource().getNumBusyConnections();
		Assert.assertEquals(0, AllTypesFinder.findAll()
				.withLimit(1)
				.withOffset(0)
				.executeSilent()
				.size());

		Assert.assertEquals(numConnections, ConnectionManager.getComboPooledDataSource().getNumConnections());
		// need to sleep to ensure that the connection has time to close - hacky... :(
		try { Thread.sleep(1); } catch (InterruptedException e) { /* do nothing */ }
		Assert.assertEquals(numBusyConnections, ConnectionManager.getComboPooledDataSource().getNumBusyConnections());
	}

	@Test
	public void testAllTypesFindAllWithConnection() throws SQLException {
		int numConnections = ConnectionManager.getComboPooledDataSource().getNumConnections();
		int numBusyConnections = ConnectionManager.getComboPooledDataSource().getNumBusyConnections();
		try (Connection connection = ConnectionManager.getConnection()) {
			Assert.assertEquals(0, AllTypesFinder.findAll()
				.withConnection(connection)
				.execute()
				.size());

		}
		Assert.assertEquals(numConnections, ConnectionManager.getComboPooledDataSource().getNumConnections());
		// need to sleep to ensure that the connection has time to close - hacky... :(
		try { Thread.sleep(1); } catch (InterruptedException e) { /* do nothing */ }
		Assert.assertEquals(numBusyConnections, ConnectionManager.getComboPooledDataSource().getNumBusyConnections());
	}

	@Test
	public void testAllTypesFindAllWithConnectionSilent() throws SQLException {
		int numConnections = ConnectionManager.getComboPooledDataSource().getNumConnections();
		int numBusyConnections = ConnectionManager.getComboPooledDataSource().getNumBusyConnections();
		try (Connection connection = ConnectionManager.getConnection()) {
			Assert.assertEquals(0, AllTypesFinder.findAll()
				.withConnection(connection)
				.executeSilent()
				.size());

		}
		Assert.assertEquals(numConnections, ConnectionManager.getComboPooledDataSource().getNumConnections());
		// need to sleep to ensure that the connection has time to close - hacky... :(
		try { Thread.sleep(1); } catch (InterruptedException e) { /* do nothing */ }
		Assert.assertEquals(numBusyConnections, ConnectionManager.getComboPooledDataSource().getNumBusyConnections());
	}

	@Test
	public void testAllTypesFindAllWithConnectionLimit() throws SQLException {
		int numConnections = ConnectionManager.getComboPooledDataSource().getNumConnections();
		int numBusyConnections = ConnectionManager.getComboPooledDataSource().getNumBusyConnections();
		try (Connection connection = ConnectionManager.getConnection()) {
			AllTypesFinder.findAll().withConnection(connection)
				.withLimit(1)
				.withOffset(0)
				.execute();
		}

		Assert.assertEquals(numConnections, ConnectionManager.getComboPooledDataSource().getNumConnections());
		// need to sleep to ensure that the connection has time to close - hacky... :(
		try { Thread.sleep(1); } catch (InterruptedException e) { /* do nothing */ }
		Assert.assertEquals(numBusyConnections, ConnectionManager.getComboPooledDataSource().getNumBusyConnections());
	}

	@Test
	public void testAllTypesFindAllWithConnectionLimitSilent() throws SQLException {
		int numConnections = ConnectionManager.getComboPooledDataSource().getNumConnections();
		int numBusyConnections = ConnectionManager.getComboPooledDataSource().getNumBusyConnections();
		try (Connection connection = ConnectionManager.getConnection()) {
			Assert.assertEquals(0, AllTypesFinder.findAll()
				.withConnection(connection)
				.withLimit(1)
				.withOffset(0)
				.executeSilent()
				.size());
		}

		Assert.assertEquals(numConnections, ConnectionManager.getComboPooledDataSource().getNumConnections());
		// need to sleep to ensure that the connection has time to close - hacky... :(
		try { Thread.sleep(1); } catch (InterruptedException e) { /* do nothing */ }
		Assert.assertEquals(numBusyConnections, ConnectionManager.getComboPooledDataSource().getNumBusyConnections());
	}

	@Test
	public void testAllTypesFindAllWithConnectionOffset() throws SQLException {
		int numConnections = ConnectionManager.getComboPooledDataSource().getNumConnections();
		int numBusyConnections = ConnectionManager.getComboPooledDataSource().getNumBusyConnections();
		try (Connection connection = ConnectionManager.getConnection()) {
			AllTypesFinder.findAll()
				.withConnection(connection)
				.withLimit(null)
				.withOffset(1)
				.execute();
			Assert.fail("A SQL Exception should have been thrown as there was an offset without a limit set.");		} catch(SQLException ignored) {
		}		Assert.assertEquals(numConnections, ConnectionManager.getComboPooledDataSource().getNumConnections());
		// need to sleep to ensure that the connection has time to close - hacky... :(
		try { Thread.sleep(1); } catch (InterruptedException e) { /* do nothing */ }
		Assert.assertEquals(numBusyConnections, ConnectionManager.getComboPooledDataSource().getNumBusyConnections());
	}

	@Test
	public void testAllTypesFindAllWithConnectionOffsetSilent() throws SQLException {
		int numConnections = ConnectionManager.getComboPooledDataSource().getNumConnections();
		int numBusyConnections = ConnectionManager.getComboPooledDataSource().getNumBusyConnections();
		try (Connection connection = ConnectionManager.getConnection()) {
			AllTypesFinder.findAll()
				.withConnection(connection)
				.withLimit(null)
				.withOffset(0)
				.executeSilent();

		}
		Assert.assertEquals(numConnections, ConnectionManager.getComboPooledDataSource().getNumConnections());
		// need to sleep to ensure that the connection has time to close - hacky... :(
		try { Thread.sleep(1); } catch (InterruptedException e) { /* do nothing */ }
		Assert.assertEquals(numBusyConnections, ConnectionManager.getComboPooledDataSource().getNumBusyConnections());
	}

	@Test
	public void testAllTypesFindAllWithConnectionLimitOffset() throws SQLException {
		int numConnections = ConnectionManager.getComboPooledDataSource().getNumConnections();
		int numBusyConnections = ConnectionManager.getComboPooledDataSource().getNumBusyConnections();
		try (Connection connection = ConnectionManager.getConnection()) {
			AllTypesFinder.findAll()
				.withConnection(connection)
				.withLimit(1)
				.withOffset(0)
				.execute();
		}
		Assert.assertEquals(numConnections, ConnectionManager.getComboPooledDataSource().getNumConnections());
		// need to sleep to ensure that the connection has time to close - hacky... :(
		try { Thread.sleep(1); } catch (InterruptedException e) { /* do nothing */ }
		Assert.assertEquals(numBusyConnections, ConnectionManager.getComboPooledDataSource().getNumBusyConnections());
	}

	@Test
	public void testAllTypesFindAllWithNullConnectionLimitOffset() throws SQLException {
		int numConnections = ConnectionManager.getComboPooledDataSource().getNumConnections();
		int numBusyConnections = ConnectionManager.getComboPooledDataSource().getNumBusyConnections();
		AllTypesFinder.findAll()
				.withConnection(null)
				.withLimit(1)
				.withOffset(0)
				.execute();

		Assert.assertEquals(numConnections, ConnectionManager.getComboPooledDataSource().getNumConnections());
		// need to sleep to ensure that the connection has time to close - hacky... :(
		try { Thread.sleep(1); } catch (InterruptedException e) { /* do nothing */ }
		Assert.assertEquals(numBusyConnections, ConnectionManager.getComboPooledDataSource().getNumBusyConnections());
	}

}
