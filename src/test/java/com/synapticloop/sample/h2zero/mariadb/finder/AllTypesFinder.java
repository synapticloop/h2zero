package com.synapticloop.sample.h2zero.mariadb.finder;

// - - - - thoughtfully generated by synapticloop h2zero - - - - 
//    with the use of synapticloop templar templating language
//           (/java/finder/java-create-finder.templar)

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Date;
import java.sql.Blob;
import java.sql.Timestamp;
import java.sql.Time;
import java.math.BigDecimal;
import java.util.List;
import java.util.ArrayList;

import com.synapticloop.h2zero.base.exception.H2ZeroFinderException;
import com.synapticloop.h2zero.base.manager.mariadb.ConnectionManager;
import com.synapticloop.h2zero.util.LruCache;


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


import com.synapticloop.sample.h2zero.mariadb.model.util.Constants;

import com.synapticloop.sample.h2zero.mariadb.model.AllTypes;

import com.synapticloop.h2zero.base.sql.limitoffset.MultiFinder;
import com.synapticloop.h2zero.base.sql.limitoffset.UniqueFinder;

public class AllTypesFinder {
	// the binder is unused in code, but will generate compile problems if this 
	// class is no longer referenced in the h2zero file. Just a nicety for
	// removing dead code
	@SuppressWarnings("unused")
	private static final String BINDER = Constants.ALL_TYPES_BINDER;

	private static final Logger LOGGER = LoggerFactory.getLogger(AllTypesFinder.class);
	private static final String SQL_SELECT_START = 
		"""
			select 
				id_all_types, 
				test_bigint, 
				test_blob, 
				test_bool, 
				test_char, 
				test_boolean, 
				test_binary, 
				test_varbinary, 
				test_date, 
				test_datetime, 
				test_dec, 
				test_decimal, 
				test_double, 
				test_float, 
				test_int, 
				test_integer, 
				test_longtext, 
				test_mediumblob, 
				test_mediumint, 
				test_mediumtext, 
				test_numeric, 
				test_smallint, 
				test_time, 
				test_text, 
				test_timestamp, 
				test_tinyint, 
				test_tinytext, 
				test_varchar, 
				test_year
			from 
				all_types
		""";
	private static final String SQL_BUILTIN_FIND_BY_PRIMARY_KEY = SQL_SELECT_START + " where id_all_types = ?";

	private static final String SQL_FIND_BY_ID_ALL_TYPES = SQL_SELECT_START + 
		"""
			where id_all_types = ?
		""";
	private static final String SQL_FIND_BY_TEST_BIGINT = SQL_SELECT_START + 
		"""
			where test_bigint = ?
		""";
	private static final String SQL_FIND_BY_TEST_BOOL = SQL_SELECT_START + 
		"""
			where test_bool = ?
		""";
	private static final String SQL_FIND_BY_TEST_CHAR = SQL_SELECT_START + 
		"""
			where test_char = ?
		""";
	private static final String SQL_FIND_BY_TEST_BOOLEAN = SQL_SELECT_START + 
		"""
			where test_boolean = ?
		""";
	private static final String SQL_FIND_BY_TEST_DATE = SQL_SELECT_START + 
		"""
			where test_date = ?
		""";
	private static final String SQL_FIND_BY_TEST_DATETIME = SQL_SELECT_START + 
		"""
			where test_datetime = ?
		""";
	private static final String SQL_FIND_BY_TEST_DEC = SQL_SELECT_START + 
		"""
			where test_dec = ?
		""";
	private static final String SQL_FIND_BY_TEST_DECIMAL = SQL_SELECT_START + 
		"""
			where test_decimal = ?
		""";
	private static final String SQL_FIND_BY_TEST_DOUBLE = SQL_SELECT_START + 
		"""
			where test_double = ?
		""";
	private static final String SQL_FIND_BY_TEST_FLOAT = SQL_SELECT_START + 
		"""
			where test_float = ?
		""";
	private static final String SQL_FIND_BY_TEST_INT = SQL_SELECT_START + 
		"""
			where test_int = ?
		""";
	private static final String SQL_FIND_BY_TEST_INTEGER = SQL_SELECT_START + 
		"""
			where test_integer = ?
		""";
	private static final String SQL_FIND_BY_TEST_LONGTEXT = SQL_SELECT_START + 
		"""
			where test_longtext = ?
		""";
	private static final String SQL_FIND_BY_TEST_MEDIUMINT = SQL_SELECT_START + 
		"""
			where test_mediumint = ?
		""";
	private static final String SQL_FIND_BY_TEST_MEDIUMTEXT = SQL_SELECT_START + 
		"""
			where test_mediumtext = ?
		""";
	private static final String SQL_FIND_BY_TEST_NUMERIC = SQL_SELECT_START + 
		"""
			where test_numeric = ?
		""";
	private static final String SQL_FIND_BY_TEST_SMALLINT = SQL_SELECT_START + 
		"""
			where test_smallint = ?
		""";
	private static final String SQL_FIND_BY_TEST_TIME = SQL_SELECT_START + 
		"""
			where test_time = ?
		""";
	private static final String SQL_FIND_BY_TEST_TEXT = SQL_SELECT_START + 
		"""
			where test_text = ?
		""";
	private static final String SQL_FIND_BY_TEST_TIMESTAMP = SQL_SELECT_START + 
		"""
			where test_timestamp = ?
		""";
	private static final String SQL_FIND_BY_TEST_TINYINT = SQL_SELECT_START + 
		"""
			where test_tinyint = ?
		""";
	private static final String SQL_FIND_BY_TEST_TINYTEXT = SQL_SELECT_START + 
		"""
			where test_tinytext = ?
		""";
	private static final String SQL_FIND_BY_TEST_VARCHAR = SQL_SELECT_START + 
		"""
			where test_varchar = ?
		""";
	private static final String SQL_FIND_BY_TEST_YEAR = SQL_SELECT_START + 
		"""
			where test_year = ?
		""";

	private AllTypesFinder() {}

	/**
	 * <p>Create a UniqueFinder that can find a AllTypes by its primary key</p>
	 * 
	 * <p>This will return a UniqueFinder, to execute the finder, either call</p>
	 * 
	 * <ul>
	 *   <li><code>finder.execute();</code> to execute the finder with exceptions thrown</li>
	 *   <li><code>finder.executeSilent();</code> to execute the finder no exceptions (i.e. they are caught, swallowed and logged)</li>
	 * </ul>
	 * 
	 * <p>You may also want to pass in a connection, in which case use the following:</p>
	 * 
	 * <pre>AllTypes.findByPrimaryKey(primaryKey)
	 *     .withConnection(connection)
	 *     .execute();</pre>
	 * 
	 * <p>You may also want to pass in a connection without exceptions being thrown,
	 * in which case use the following:</p>
	 * 
	 * <pre>AllTypes.findByPrimaryKey(primaryKey)
	 *     .withConnection(connection)
	 *     .executeSilent();</pre>
	 * 
	 * @param idAllTypes the primary key
	 * 
	 * @return the parameterised UniqueFinder
	 */
	public static UniqueFinder<AllTypes> findByPrimaryKey(Long idAllTypes) {
		return(new UniqueFinder<AllTypes>(
				LOGGER,
				SQL_BUILTIN_FIND_BY_PRIMARY_KEY,
				resultSet -> { try { return list(resultSet); } catch (SQLException e) { return(null); }},
				idAllTypes
		));
	}

	/**
	 * <p>Create a MultiFinder that can find all AllTypes rows</p>
	 * <p>
	 * <p>This will return a UniqueFinder, to execute the finder, either call</p>
	 * 
	 * <ul>
	 *   <li><code>finder.execute();</code> to execute the finder with exceptions thrown</li>
	 *   <li><code>finder.executeSilent();</code> to execute the finder no exceptions (i.e. they are caught, swallowed and logged)</li>
	 * </ul>
	 * 
	 * <p>You may also want to pass in a connection, in which case use the following:</p>
	 * 
	 * <pre>AllTypes.findAll()
	 *     .withConnection(connection)
	 *     .execute();</pre>
	 * 
	 * <p>You may also want to pass in a connection without exceptions being thrown,
	 * in which case use the following:</p>
	 * 
	 * <pre>AllTypes.findAll()
	 *     .withConnection(connection)
	 *     .executeSilent();</pre>
	 * 
	 * <p>Additionally, you can limit and offset this query (with or without a connection)</p>
	 * 
	 * <pre>AllTypes.findAll()
	 *     .withLimit(limit)
	 *     .withOffset(offset)
	 *     .executeSilent();</pre>
	 * 
	 * @return the parameterised MultiFinder
	 */
	public static MultiFinder<AllTypes> findAll() {
		return(
				new MultiFinder<AllTypes>(
				LOGGER,
				SQL_SELECT_START,
				resultSet -> { try {return list(resultSet);} catch (SQLException e) { return(null); }},
				new Object[] {}
		));
	}

	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * 
	 * This is the start of the user defined finders which are generated
	 * through either the "finders" JSON key, or the "fieldFinders" JSON
	 * key.
	 * 
	 * There are 25 defined finders on the all_types table, of those finders
	 * the following are the regular finders, either defined through the
	 * 'finders' or 'fieldFinders' JSON key
	 * 
	 * - findByIdAllTypes - Generated from the 'fieldFinders' JSON key
	 * - findByTestBigint - Generated from the 'fieldFinders' JSON key
	 * - findByTestBool - Generated from the 'fieldFinders' JSON key
	 * - findByTestChar - Generated from the 'fieldFinders' JSON key
	 * - findByTestBoolean - Generated from the 'fieldFinders' JSON key
	 * - findByTestDate - Generated from the 'fieldFinders' JSON key
	 * - findByTestDatetime - Generated from the 'fieldFinders' JSON key
	 * - findByTestDec - Generated from the 'fieldFinders' JSON key
	 * - findByTestDecimal - Generated from the 'fieldFinders' JSON key
	 * - findByTestDouble - Generated from the 'fieldFinders' JSON key
	 * - findByTestFloat - Generated from the 'fieldFinders' JSON key
	 * - findByTestInt - Generated from the 'fieldFinders' JSON key
	 * - findByTestInteger - Generated from the 'fieldFinders' JSON key
	 * - findByTestLongtext - Generated from the 'fieldFinders' JSON key
	 * - findByTestMediumint - Generated from the 'fieldFinders' JSON key
	 * - findByTestMediumtext - Generated from the 'fieldFinders' JSON key
	 * - findByTestNumeric - Generated from the 'fieldFinders' JSON key
	 * - findByTestSmallint - Generated from the 'fieldFinders' JSON key
	 * - findByTestTime - Generated from the 'fieldFinders' JSON key
	 * - findByTestText - Generated from the 'fieldFinders' JSON key
	 * - findByTestTimestamp - Generated from the 'fieldFinders' JSON key
	 * - findByTestTinyint - Generated from the 'fieldFinders' JSON key
	 * - findByTestTinytext - Generated from the 'fieldFinders' JSON key
	 * - findByTestVarchar - Generated from the 'fieldFinders' JSON key
	 * - findByTestYear - Generated from the 'fieldFinders' JSON key
	 * 
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

	/**
	 * This is the <code>findByIdAllTypes</code> finder.
	 * 
	 * <p><em>(This finder was generated through the '<code>fieldFinders</code>' JSON key)</em></p>
	 * 
	 * <p>Create a MultiFinder<AllTypes> Finder
	 * that can be invoked through:</p>
	 * 
	 * <ul>
	 *   <li><code>finder.execute();</code> to execute the finder with exceptions thrown</li>
	 *   <li><code>finder.executeSilent();</code> to execute the finder no exceptions (i.e. they are caught, swallowed and logged)</li>
	 * </ul>
	 * 
	 * <p>You may also want to pass in a connection, in which case use the following:</p>
	 * 
	 * <pre>AllTypes.findByIdAllTypes(...)
	 *     .withConnection(connection)
	 *     .execute();</pre>
	 * 
	 * <p>You may also want to pass in a connection without exceptions being thrown,
	 * in which case use the following:</p>
	 * 
	 * <pre>AllTypes.findByIdAllTypes(...)
	 *     .withConnection(connection)
	 *     .executeSilent();</pre>
	 * 
	 * <p>Additionally, you can limit and offset this query (with or without a connection)</p>
	 * 
	 * <pre>AllTypes.findByIdAllTypes(...)
	 *     .withLimit(limit)
	 *     .withOffset(offset)
	 *     .executeSilent();</pre>
	 * 
	 * @param idAllTypes - maps to the id_all_types field
	 * 
	 * @return the parameterised MultiFinder()
	 * 
	 */
	public static MultiFinder<AllTypes> findByIdAllTypes(Long idAllTypes) {
		return(
				new MultiFinder<AllTypes>(
				LOGGER,
				SQL_FIND_BY_ID_ALL_TYPES,
				resultSet -> { try {return list(resultSet);} catch (SQLException e) { return(null); }},
				new Object[] {idAllTypes}
		));
	}
	/**
	 * This is the <code>findByTestBigint</code> finder.
	 * 
	 * <p><em>(This finder was generated through the '<code>fieldFinders</code>' JSON key)</em></p>
	 * 
	 * <p>Create a MultiFinder<AllTypes> Finder
	 * that can be invoked through:</p>
	 * 
	 * <ul>
	 *   <li><code>finder.execute();</code> to execute the finder with exceptions thrown</li>
	 *   <li><code>finder.executeSilent();</code> to execute the finder no exceptions (i.e. they are caught, swallowed and logged)</li>
	 * </ul>
	 * 
	 * <p>You may also want to pass in a connection, in which case use the following:</p>
	 * 
	 * <pre>AllTypes.findByTestBigint(...)
	 *     .withConnection(connection)
	 *     .execute();</pre>
	 * 
	 * <p>You may also want to pass in a connection without exceptions being thrown,
	 * in which case use the following:</p>
	 * 
	 * <pre>AllTypes.findByTestBigint(...)
	 *     .withConnection(connection)
	 *     .executeSilent();</pre>
	 * 
	 * <p>Additionally, you can limit and offset this query (with or without a connection)</p>
	 * 
	 * <pre>AllTypes.findByTestBigint(...)
	 *     .withLimit(limit)
	 *     .withOffset(offset)
	 *     .executeSilent();</pre>
	 * 
	 * @param testBigint - maps to the test_bigint field
	 * 
	 * @return the parameterised MultiFinder()
	 * 
	 */
	public static MultiFinder<AllTypes> findByTestBigint(Long testBigint) {
		return(
				new MultiFinder<AllTypes>(
				LOGGER,
				SQL_FIND_BY_TEST_BIGINT,
				resultSet -> { try {return list(resultSet);} catch (SQLException e) { return(null); }},
				new Object[] {testBigint}
		));
	}
	/**
	 * This is the <code>findByTestBool</code> finder.
	 * 
	 * <p><em>(This finder was generated through the '<code>fieldFinders</code>' JSON key)</em></p>
	 * 
	 * <p>Create a MultiFinder<AllTypes> Finder
	 * that can be invoked through:</p>
	 * 
	 * <ul>
	 *   <li><code>finder.execute();</code> to execute the finder with exceptions thrown</li>
	 *   <li><code>finder.executeSilent();</code> to execute the finder no exceptions (i.e. they are caught, swallowed and logged)</li>
	 * </ul>
	 * 
	 * <p>You may also want to pass in a connection, in which case use the following:</p>
	 * 
	 * <pre>AllTypes.findByTestBool(...)
	 *     .withConnection(connection)
	 *     .execute();</pre>
	 * 
	 * <p>You may also want to pass in a connection without exceptions being thrown,
	 * in which case use the following:</p>
	 * 
	 * <pre>AllTypes.findByTestBool(...)
	 *     .withConnection(connection)
	 *     .executeSilent();</pre>
	 * 
	 * <p>Additionally, you can limit and offset this query (with or without a connection)</p>
	 * 
	 * <pre>AllTypes.findByTestBool(...)
	 *     .withLimit(limit)
	 *     .withOffset(offset)
	 *     .executeSilent();</pre>
	 * 
	 * @param testBool - maps to the test_bool field
	 * 
	 * @return the parameterised MultiFinder()
	 * 
	 */
	public static MultiFinder<AllTypes> findByTestBool(Boolean testBool) {
		return(
				new MultiFinder<AllTypes>(
				LOGGER,
				SQL_FIND_BY_TEST_BOOL,
				resultSet -> { try {return list(resultSet);} catch (SQLException e) { return(null); }},
				new Object[] {testBool}
		));
	}
	/**
	 * This is the <code>findByTestChar</code> finder.
	 * 
	 * <p><em>(This finder was generated through the '<code>fieldFinders</code>' JSON key)</em></p>
	 * 
	 * <p>Create a MultiFinder<AllTypes> Finder
	 * that can be invoked through:</p>
	 * 
	 * <ul>
	 *   <li><code>finder.execute();</code> to execute the finder with exceptions thrown</li>
	 *   <li><code>finder.executeSilent();</code> to execute the finder no exceptions (i.e. they are caught, swallowed and logged)</li>
	 * </ul>
	 * 
	 * <p>You may also want to pass in a connection, in which case use the following:</p>
	 * 
	 * <pre>AllTypes.findByTestChar(...)
	 *     .withConnection(connection)
	 *     .execute();</pre>
	 * 
	 * <p>You may also want to pass in a connection without exceptions being thrown,
	 * in which case use the following:</p>
	 * 
	 * <pre>AllTypes.findByTestChar(...)
	 *     .withConnection(connection)
	 *     .executeSilent();</pre>
	 * 
	 * <p>Additionally, you can limit and offset this query (with or without a connection)</p>
	 * 
	 * <pre>AllTypes.findByTestChar(...)
	 *     .withLimit(limit)
	 *     .withOffset(offset)
	 *     .executeSilent();</pre>
	 * 
	 * @param testChar - maps to the test_char field
	 * 
	 * @return the parameterised MultiFinder()
	 * 
	 */
	public static MultiFinder<AllTypes> findByTestChar(String testChar) {
		return(
				new MultiFinder<AllTypes>(
				LOGGER,
				SQL_FIND_BY_TEST_CHAR,
				resultSet -> { try {return list(resultSet);} catch (SQLException e) { return(null); }},
				new Object[] {testChar}
		));
	}
	/**
	 * This is the <code>findByTestBoolean</code> finder.
	 * 
	 * <p><em>(This finder was generated through the '<code>fieldFinders</code>' JSON key)</em></p>
	 * 
	 * <p>Create a MultiFinder<AllTypes> Finder
	 * that can be invoked through:</p>
	 * 
	 * <ul>
	 *   <li><code>finder.execute();</code> to execute the finder with exceptions thrown</li>
	 *   <li><code>finder.executeSilent();</code> to execute the finder no exceptions (i.e. they are caught, swallowed and logged)</li>
	 * </ul>
	 * 
	 * <p>You may also want to pass in a connection, in which case use the following:</p>
	 * 
	 * <pre>AllTypes.findByTestBoolean(...)
	 *     .withConnection(connection)
	 *     .execute();</pre>
	 * 
	 * <p>You may also want to pass in a connection without exceptions being thrown,
	 * in which case use the following:</p>
	 * 
	 * <pre>AllTypes.findByTestBoolean(...)
	 *     .withConnection(connection)
	 *     .executeSilent();</pre>
	 * 
	 * <p>Additionally, you can limit and offset this query (with or without a connection)</p>
	 * 
	 * <pre>AllTypes.findByTestBoolean(...)
	 *     .withLimit(limit)
	 *     .withOffset(offset)
	 *     .executeSilent();</pre>
	 * 
	 * @param testBoolean - maps to the test_boolean field
	 * 
	 * @return the parameterised MultiFinder()
	 * 
	 */
	public static MultiFinder<AllTypes> findByTestBoolean(Boolean testBoolean) {
		return(
				new MultiFinder<AllTypes>(
				LOGGER,
				SQL_FIND_BY_TEST_BOOLEAN,
				resultSet -> { try {return list(resultSet);} catch (SQLException e) { return(null); }},
				new Object[] {testBoolean}
		));
	}
	/**
	 * This is the <code>findByTestDate</code> finder.
	 * 
	 * <p><em>(This finder was generated through the '<code>fieldFinders</code>' JSON key)</em></p>
	 * 
	 * <p>Create a MultiFinder<AllTypes> Finder
	 * that can be invoked through:</p>
	 * 
	 * <ul>
	 *   <li><code>finder.execute();</code> to execute the finder with exceptions thrown</li>
	 *   <li><code>finder.executeSilent();</code> to execute the finder no exceptions (i.e. they are caught, swallowed and logged)</li>
	 * </ul>
	 * 
	 * <p>You may also want to pass in a connection, in which case use the following:</p>
	 * 
	 * <pre>AllTypes.findByTestDate(...)
	 *     .withConnection(connection)
	 *     .execute();</pre>
	 * 
	 * <p>You may also want to pass in a connection without exceptions being thrown,
	 * in which case use the following:</p>
	 * 
	 * <pre>AllTypes.findByTestDate(...)
	 *     .withConnection(connection)
	 *     .executeSilent();</pre>
	 * 
	 * <p>Additionally, you can limit and offset this query (with or without a connection)</p>
	 * 
	 * <pre>AllTypes.findByTestDate(...)
	 *     .withLimit(limit)
	 *     .withOffset(offset)
	 *     .executeSilent();</pre>
	 * 
	 * @param testDate - maps to the test_date field
	 * 
	 * @return the parameterised MultiFinder()
	 * 
	 */
	public static MultiFinder<AllTypes> findByTestDate(Date testDate) {
		return(
				new MultiFinder<AllTypes>(
				LOGGER,
				SQL_FIND_BY_TEST_DATE,
				resultSet -> { try {return list(resultSet);} catch (SQLException e) { return(null); }},
				new Object[] {testDate}
		));
	}
	/**
	 * This is the <code>findByTestDatetime</code> finder.
	 * 
	 * <p><em>(This finder was generated through the '<code>fieldFinders</code>' JSON key)</em></p>
	 * 
	 * <p>Create a MultiFinder<AllTypes> Finder
	 * that can be invoked through:</p>
	 * 
	 * <ul>
	 *   <li><code>finder.execute();</code> to execute the finder with exceptions thrown</li>
	 *   <li><code>finder.executeSilent();</code> to execute the finder no exceptions (i.e. they are caught, swallowed and logged)</li>
	 * </ul>
	 * 
	 * <p>You may also want to pass in a connection, in which case use the following:</p>
	 * 
	 * <pre>AllTypes.findByTestDatetime(...)
	 *     .withConnection(connection)
	 *     .execute();</pre>
	 * 
	 * <p>You may also want to pass in a connection without exceptions being thrown,
	 * in which case use the following:</p>
	 * 
	 * <pre>AllTypes.findByTestDatetime(...)
	 *     .withConnection(connection)
	 *     .executeSilent();</pre>
	 * 
	 * <p>Additionally, you can limit and offset this query (with or without a connection)</p>
	 * 
	 * <pre>AllTypes.findByTestDatetime(...)
	 *     .withLimit(limit)
	 *     .withOffset(offset)
	 *     .executeSilent();</pre>
	 * 
	 * @param testDatetime - maps to the test_datetime field
	 * 
	 * @return the parameterised MultiFinder()
	 * 
	 */
	public static MultiFinder<AllTypes> findByTestDatetime(Timestamp testDatetime) {
		return(
				new MultiFinder<AllTypes>(
				LOGGER,
				SQL_FIND_BY_TEST_DATETIME,
				resultSet -> { try {return list(resultSet);} catch (SQLException e) { return(null); }},
				new Object[] {testDatetime}
		));
	}
	/**
	 * This is the <code>findByTestDec</code> finder.
	 * 
	 * <p><em>(This finder was generated through the '<code>fieldFinders</code>' JSON key)</em></p>
	 * 
	 * <p>Create a MultiFinder<AllTypes> Finder
	 * that can be invoked through:</p>
	 * 
	 * <ul>
	 *   <li><code>finder.execute();</code> to execute the finder with exceptions thrown</li>
	 *   <li><code>finder.executeSilent();</code> to execute the finder no exceptions (i.e. they are caught, swallowed and logged)</li>
	 * </ul>
	 * 
	 * <p>You may also want to pass in a connection, in which case use the following:</p>
	 * 
	 * <pre>AllTypes.findByTestDec(...)
	 *     .withConnection(connection)
	 *     .execute();</pre>
	 * 
	 * <p>You may also want to pass in a connection without exceptions being thrown,
	 * in which case use the following:</p>
	 * 
	 * <pre>AllTypes.findByTestDec(...)
	 *     .withConnection(connection)
	 *     .executeSilent();</pre>
	 * 
	 * <p>Additionally, you can limit and offset this query (with or without a connection)</p>
	 * 
	 * <pre>AllTypes.findByTestDec(...)
	 *     .withLimit(limit)
	 *     .withOffset(offset)
	 *     .executeSilent();</pre>
	 * 
	 * @param testDec - maps to the test_dec field
	 * 
	 * @return the parameterised MultiFinder()
	 * 
	 */
	public static MultiFinder<AllTypes> findByTestDec(BigDecimal testDec) {
		return(
				new MultiFinder<AllTypes>(
				LOGGER,
				SQL_FIND_BY_TEST_DEC,
				resultSet -> { try {return list(resultSet);} catch (SQLException e) { return(null); }},
				new Object[] {testDec}
		));
	}
	/**
	 * This is the <code>findByTestDecimal</code> finder.
	 * 
	 * <p><em>(This finder was generated through the '<code>fieldFinders</code>' JSON key)</em></p>
	 * 
	 * <p>Create a MultiFinder<AllTypes> Finder
	 * that can be invoked through:</p>
	 * 
	 * <ul>
	 *   <li><code>finder.execute();</code> to execute the finder with exceptions thrown</li>
	 *   <li><code>finder.executeSilent();</code> to execute the finder no exceptions (i.e. they are caught, swallowed and logged)</li>
	 * </ul>
	 * 
	 * <p>You may also want to pass in a connection, in which case use the following:</p>
	 * 
	 * <pre>AllTypes.findByTestDecimal(...)
	 *     .withConnection(connection)
	 *     .execute();</pre>
	 * 
	 * <p>You may also want to pass in a connection without exceptions being thrown,
	 * in which case use the following:</p>
	 * 
	 * <pre>AllTypes.findByTestDecimal(...)
	 *     .withConnection(connection)
	 *     .executeSilent();</pre>
	 * 
	 * <p>Additionally, you can limit and offset this query (with or without a connection)</p>
	 * 
	 * <pre>AllTypes.findByTestDecimal(...)
	 *     .withLimit(limit)
	 *     .withOffset(offset)
	 *     .executeSilent();</pre>
	 * 
	 * @param testDecimal - maps to the test_decimal field
	 * 
	 * @return the parameterised MultiFinder()
	 * 
	 */
	public static MultiFinder<AllTypes> findByTestDecimal(BigDecimal testDecimal) {
		return(
				new MultiFinder<AllTypes>(
				LOGGER,
				SQL_FIND_BY_TEST_DECIMAL,
				resultSet -> { try {return list(resultSet);} catch (SQLException e) { return(null); }},
				new Object[] {testDecimal}
		));
	}
	/**
	 * This is the <code>findByTestDouble</code> finder.
	 * 
	 * <p><em>(This finder was generated through the '<code>fieldFinders</code>' JSON key)</em></p>
	 * 
	 * <p>Create a MultiFinder<AllTypes> Finder
	 * that can be invoked through:</p>
	 * 
	 * <ul>
	 *   <li><code>finder.execute();</code> to execute the finder with exceptions thrown</li>
	 *   <li><code>finder.executeSilent();</code> to execute the finder no exceptions (i.e. they are caught, swallowed and logged)</li>
	 * </ul>
	 * 
	 * <p>You may also want to pass in a connection, in which case use the following:</p>
	 * 
	 * <pre>AllTypes.findByTestDouble(...)
	 *     .withConnection(connection)
	 *     .execute();</pre>
	 * 
	 * <p>You may also want to pass in a connection without exceptions being thrown,
	 * in which case use the following:</p>
	 * 
	 * <pre>AllTypes.findByTestDouble(...)
	 *     .withConnection(connection)
	 *     .executeSilent();</pre>
	 * 
	 * <p>Additionally, you can limit and offset this query (with or without a connection)</p>
	 * 
	 * <pre>AllTypes.findByTestDouble(...)
	 *     .withLimit(limit)
	 *     .withOffset(offset)
	 *     .executeSilent();</pre>
	 * 
	 * @param testDouble - maps to the test_double field
	 * 
	 * @return the parameterised MultiFinder()
	 * 
	 */
	public static MultiFinder<AllTypes> findByTestDouble(Double testDouble) {
		return(
				new MultiFinder<AllTypes>(
				LOGGER,
				SQL_FIND_BY_TEST_DOUBLE,
				resultSet -> { try {return list(resultSet);} catch (SQLException e) { return(null); }},
				new Object[] {testDouble}
		));
	}
	/**
	 * This is the <code>findByTestFloat</code> finder.
	 * 
	 * <p><em>(This finder was generated through the '<code>fieldFinders</code>' JSON key)</em></p>
	 * 
	 * <p>Create a MultiFinder<AllTypes> Finder
	 * that can be invoked through:</p>
	 * 
	 * <ul>
	 *   <li><code>finder.execute();</code> to execute the finder with exceptions thrown</li>
	 *   <li><code>finder.executeSilent();</code> to execute the finder no exceptions (i.e. they are caught, swallowed and logged)</li>
	 * </ul>
	 * 
	 * <p>You may also want to pass in a connection, in which case use the following:</p>
	 * 
	 * <pre>AllTypes.findByTestFloat(...)
	 *     .withConnection(connection)
	 *     .execute();</pre>
	 * 
	 * <p>You may also want to pass in a connection without exceptions being thrown,
	 * in which case use the following:</p>
	 * 
	 * <pre>AllTypes.findByTestFloat(...)
	 *     .withConnection(connection)
	 *     .executeSilent();</pre>
	 * 
	 * <p>Additionally, you can limit and offset this query (with or without a connection)</p>
	 * 
	 * <pre>AllTypes.findByTestFloat(...)
	 *     .withLimit(limit)
	 *     .withOffset(offset)
	 *     .executeSilent();</pre>
	 * 
	 * @param testFloat - maps to the test_float field
	 * 
	 * @return the parameterised MultiFinder()
	 * 
	 */
	public static MultiFinder<AllTypes> findByTestFloat(Float testFloat) {
		return(
				new MultiFinder<AllTypes>(
				LOGGER,
				SQL_FIND_BY_TEST_FLOAT,
				resultSet -> { try {return list(resultSet);} catch (SQLException e) { return(null); }},
				new Object[] {testFloat}
		));
	}
	/**
	 * This is the <code>findByTestInt</code> finder.
	 * 
	 * <p><em>(This finder was generated through the '<code>fieldFinders</code>' JSON key)</em></p>
	 * 
	 * <p>Create a MultiFinder<AllTypes> Finder
	 * that can be invoked through:</p>
	 * 
	 * <ul>
	 *   <li><code>finder.execute();</code> to execute the finder with exceptions thrown</li>
	 *   <li><code>finder.executeSilent();</code> to execute the finder no exceptions (i.e. they are caught, swallowed and logged)</li>
	 * </ul>
	 * 
	 * <p>You may also want to pass in a connection, in which case use the following:</p>
	 * 
	 * <pre>AllTypes.findByTestInt(...)
	 *     .withConnection(connection)
	 *     .execute();</pre>
	 * 
	 * <p>You may also want to pass in a connection without exceptions being thrown,
	 * in which case use the following:</p>
	 * 
	 * <pre>AllTypes.findByTestInt(...)
	 *     .withConnection(connection)
	 *     .executeSilent();</pre>
	 * 
	 * <p>Additionally, you can limit and offset this query (with or without a connection)</p>
	 * 
	 * <pre>AllTypes.findByTestInt(...)
	 *     .withLimit(limit)
	 *     .withOffset(offset)
	 *     .executeSilent();</pre>
	 * 
	 * @param testInt - maps to the test_int field
	 * 
	 * @return the parameterised MultiFinder()
	 * 
	 */
	public static MultiFinder<AllTypes> findByTestInt(Integer testInt) {
		return(
				new MultiFinder<AllTypes>(
				LOGGER,
				SQL_FIND_BY_TEST_INT,
				resultSet -> { try {return list(resultSet);} catch (SQLException e) { return(null); }},
				new Object[] {testInt}
		));
	}
	/**
	 * This is the <code>findByTestInteger</code> finder.
	 * 
	 * <p><em>(This finder was generated through the '<code>fieldFinders</code>' JSON key)</em></p>
	 * 
	 * <p>Create a MultiFinder<AllTypes> Finder
	 * that can be invoked through:</p>
	 * 
	 * <ul>
	 *   <li><code>finder.execute();</code> to execute the finder with exceptions thrown</li>
	 *   <li><code>finder.executeSilent();</code> to execute the finder no exceptions (i.e. they are caught, swallowed and logged)</li>
	 * </ul>
	 * 
	 * <p>You may also want to pass in a connection, in which case use the following:</p>
	 * 
	 * <pre>AllTypes.findByTestInteger(...)
	 *     .withConnection(connection)
	 *     .execute();</pre>
	 * 
	 * <p>You may also want to pass in a connection without exceptions being thrown,
	 * in which case use the following:</p>
	 * 
	 * <pre>AllTypes.findByTestInteger(...)
	 *     .withConnection(connection)
	 *     .executeSilent();</pre>
	 * 
	 * <p>Additionally, you can limit and offset this query (with or without a connection)</p>
	 * 
	 * <pre>AllTypes.findByTestInteger(...)
	 *     .withLimit(limit)
	 *     .withOffset(offset)
	 *     .executeSilent();</pre>
	 * 
	 * @param testInteger - maps to the test_integer field
	 * 
	 * @return the parameterised MultiFinder()
	 * 
	 */
	public static MultiFinder<AllTypes> findByTestInteger(Integer testInteger) {
		return(
				new MultiFinder<AllTypes>(
				LOGGER,
				SQL_FIND_BY_TEST_INTEGER,
				resultSet -> { try {return list(resultSet);} catch (SQLException e) { return(null); }},
				new Object[] {testInteger}
		));
	}
	/**
	 * This is the <code>findByTestLongtext</code> finder.
	 * 
	 * <p><em>(This finder was generated through the '<code>fieldFinders</code>' JSON key)</em></p>
	 * 
	 * <p>Create a MultiFinder<AllTypes> Finder
	 * that can be invoked through:</p>
	 * 
	 * <ul>
	 *   <li><code>finder.execute();</code> to execute the finder with exceptions thrown</li>
	 *   <li><code>finder.executeSilent();</code> to execute the finder no exceptions (i.e. they are caught, swallowed and logged)</li>
	 * </ul>
	 * 
	 * <p>You may also want to pass in a connection, in which case use the following:</p>
	 * 
	 * <pre>AllTypes.findByTestLongtext(...)
	 *     .withConnection(connection)
	 *     .execute();</pre>
	 * 
	 * <p>You may also want to pass in a connection without exceptions being thrown,
	 * in which case use the following:</p>
	 * 
	 * <pre>AllTypes.findByTestLongtext(...)
	 *     .withConnection(connection)
	 *     .executeSilent();</pre>
	 * 
	 * <p>Additionally, you can limit and offset this query (with or without a connection)</p>
	 * 
	 * <pre>AllTypes.findByTestLongtext(...)
	 *     .withLimit(limit)
	 *     .withOffset(offset)
	 *     .executeSilent();</pre>
	 * 
	 * @param testLongtext - maps to the test_longtext field
	 * 
	 * @return the parameterised MultiFinder()
	 * 
	 */
	public static MultiFinder<AllTypes> findByTestLongtext(String testLongtext) {
		return(
				new MultiFinder<AllTypes>(
				LOGGER,
				SQL_FIND_BY_TEST_LONGTEXT,
				resultSet -> { try {return list(resultSet);} catch (SQLException e) { return(null); }},
				new Object[] {testLongtext}
		));
	}
	/**
	 * This is the <code>findByTestMediumint</code> finder.
	 * 
	 * <p><em>(This finder was generated through the '<code>fieldFinders</code>' JSON key)</em></p>
	 * 
	 * <p>Create a MultiFinder<AllTypes> Finder
	 * that can be invoked through:</p>
	 * 
	 * <ul>
	 *   <li><code>finder.execute();</code> to execute the finder with exceptions thrown</li>
	 *   <li><code>finder.executeSilent();</code> to execute the finder no exceptions (i.e. they are caught, swallowed and logged)</li>
	 * </ul>
	 * 
	 * <p>You may also want to pass in a connection, in which case use the following:</p>
	 * 
	 * <pre>AllTypes.findByTestMediumint(...)
	 *     .withConnection(connection)
	 *     .execute();</pre>
	 * 
	 * <p>You may also want to pass in a connection without exceptions being thrown,
	 * in which case use the following:</p>
	 * 
	 * <pre>AllTypes.findByTestMediumint(...)
	 *     .withConnection(connection)
	 *     .executeSilent();</pre>
	 * 
	 * <p>Additionally, you can limit and offset this query (with or without a connection)</p>
	 * 
	 * <pre>AllTypes.findByTestMediumint(...)
	 *     .withLimit(limit)
	 *     .withOffset(offset)
	 *     .executeSilent();</pre>
	 * 
	 * @param testMediumint - maps to the test_mediumint field
	 * 
	 * @return the parameterised MultiFinder()
	 * 
	 */
	public static MultiFinder<AllTypes> findByTestMediumint(Integer testMediumint) {
		return(
				new MultiFinder<AllTypes>(
				LOGGER,
				SQL_FIND_BY_TEST_MEDIUMINT,
				resultSet -> { try {return list(resultSet);} catch (SQLException e) { return(null); }},
				new Object[] {testMediumint}
		));
	}
	/**
	 * This is the <code>findByTestMediumtext</code> finder.
	 * 
	 * <p><em>(This finder was generated through the '<code>fieldFinders</code>' JSON key)</em></p>
	 * 
	 * <p>Create a MultiFinder<AllTypes> Finder
	 * that can be invoked through:</p>
	 * 
	 * <ul>
	 *   <li><code>finder.execute();</code> to execute the finder with exceptions thrown</li>
	 *   <li><code>finder.executeSilent();</code> to execute the finder no exceptions (i.e. they are caught, swallowed and logged)</li>
	 * </ul>
	 * 
	 * <p>You may also want to pass in a connection, in which case use the following:</p>
	 * 
	 * <pre>AllTypes.findByTestMediumtext(...)
	 *     .withConnection(connection)
	 *     .execute();</pre>
	 * 
	 * <p>You may also want to pass in a connection without exceptions being thrown,
	 * in which case use the following:</p>
	 * 
	 * <pre>AllTypes.findByTestMediumtext(...)
	 *     .withConnection(connection)
	 *     .executeSilent();</pre>
	 * 
	 * <p>Additionally, you can limit and offset this query (with or without a connection)</p>
	 * 
	 * <pre>AllTypes.findByTestMediumtext(...)
	 *     .withLimit(limit)
	 *     .withOffset(offset)
	 *     .executeSilent();</pre>
	 * 
	 * @param testMediumtext - maps to the test_mediumtext field
	 * 
	 * @return the parameterised MultiFinder()
	 * 
	 */
	public static MultiFinder<AllTypes> findByTestMediumtext(String testMediumtext) {
		return(
				new MultiFinder<AllTypes>(
				LOGGER,
				SQL_FIND_BY_TEST_MEDIUMTEXT,
				resultSet -> { try {return list(resultSet);} catch (SQLException e) { return(null); }},
				new Object[] {testMediumtext}
		));
	}
	/**
	 * This is the <code>findByTestNumeric</code> finder.
	 * 
	 * <p><em>(This finder was generated through the '<code>fieldFinders</code>' JSON key)</em></p>
	 * 
	 * <p>Create a MultiFinder<AllTypes> Finder
	 * that can be invoked through:</p>
	 * 
	 * <ul>
	 *   <li><code>finder.execute();</code> to execute the finder with exceptions thrown</li>
	 *   <li><code>finder.executeSilent();</code> to execute the finder no exceptions (i.e. they are caught, swallowed and logged)</li>
	 * </ul>
	 * 
	 * <p>You may also want to pass in a connection, in which case use the following:</p>
	 * 
	 * <pre>AllTypes.findByTestNumeric(...)
	 *     .withConnection(connection)
	 *     .execute();</pre>
	 * 
	 * <p>You may also want to pass in a connection without exceptions being thrown,
	 * in which case use the following:</p>
	 * 
	 * <pre>AllTypes.findByTestNumeric(...)
	 *     .withConnection(connection)
	 *     .executeSilent();</pre>
	 * 
	 * <p>Additionally, you can limit and offset this query (with or without a connection)</p>
	 * 
	 * <pre>AllTypes.findByTestNumeric(...)
	 *     .withLimit(limit)
	 *     .withOffset(offset)
	 *     .executeSilent();</pre>
	 * 
	 * @param testNumeric - maps to the test_numeric field
	 * 
	 * @return the parameterised MultiFinder()
	 * 
	 */
	public static MultiFinder<AllTypes> findByTestNumeric(BigDecimal testNumeric) {
		return(
				new MultiFinder<AllTypes>(
				LOGGER,
				SQL_FIND_BY_TEST_NUMERIC,
				resultSet -> { try {return list(resultSet);} catch (SQLException e) { return(null); }},
				new Object[] {testNumeric}
		));
	}
	/**
	 * This is the <code>findByTestSmallint</code> finder.
	 * 
	 * <p><em>(This finder was generated through the '<code>fieldFinders</code>' JSON key)</em></p>
	 * 
	 * <p>Create a MultiFinder<AllTypes> Finder
	 * that can be invoked through:</p>
	 * 
	 * <ul>
	 *   <li><code>finder.execute();</code> to execute the finder with exceptions thrown</li>
	 *   <li><code>finder.executeSilent();</code> to execute the finder no exceptions (i.e. they are caught, swallowed and logged)</li>
	 * </ul>
	 * 
	 * <p>You may also want to pass in a connection, in which case use the following:</p>
	 * 
	 * <pre>AllTypes.findByTestSmallint(...)
	 *     .withConnection(connection)
	 *     .execute();</pre>
	 * 
	 * <p>You may also want to pass in a connection without exceptions being thrown,
	 * in which case use the following:</p>
	 * 
	 * <pre>AllTypes.findByTestSmallint(...)
	 *     .withConnection(connection)
	 *     .executeSilent();</pre>
	 * 
	 * <p>Additionally, you can limit and offset this query (with or without a connection)</p>
	 * 
	 * <pre>AllTypes.findByTestSmallint(...)
	 *     .withLimit(limit)
	 *     .withOffset(offset)
	 *     .executeSilent();</pre>
	 * 
	 * @param testSmallint - maps to the test_smallint field
	 * 
	 * @return the parameterised MultiFinder()
	 * 
	 */
	public static MultiFinder<AllTypes> findByTestSmallint(Short testSmallint) {
		return(
				new MultiFinder<AllTypes>(
				LOGGER,
				SQL_FIND_BY_TEST_SMALLINT,
				resultSet -> { try {return list(resultSet);} catch (SQLException e) { return(null); }},
				new Object[] {testSmallint}
		));
	}
	/**
	 * This is the <code>findByTestTime</code> finder.
	 * 
	 * <p><em>(This finder was generated through the '<code>fieldFinders</code>' JSON key)</em></p>
	 * 
	 * <p>Create a MultiFinder<AllTypes> Finder
	 * that can be invoked through:</p>
	 * 
	 * <ul>
	 *   <li><code>finder.execute();</code> to execute the finder with exceptions thrown</li>
	 *   <li><code>finder.executeSilent();</code> to execute the finder no exceptions (i.e. they are caught, swallowed and logged)</li>
	 * </ul>
	 * 
	 * <p>You may also want to pass in a connection, in which case use the following:</p>
	 * 
	 * <pre>AllTypes.findByTestTime(...)
	 *     .withConnection(connection)
	 *     .execute();</pre>
	 * 
	 * <p>You may also want to pass in a connection without exceptions being thrown,
	 * in which case use the following:</p>
	 * 
	 * <pre>AllTypes.findByTestTime(...)
	 *     .withConnection(connection)
	 *     .executeSilent();</pre>
	 * 
	 * <p>Additionally, you can limit and offset this query (with or without a connection)</p>
	 * 
	 * <pre>AllTypes.findByTestTime(...)
	 *     .withLimit(limit)
	 *     .withOffset(offset)
	 *     .executeSilent();</pre>
	 * 
	 * @param testTime - maps to the test_time field
	 * 
	 * @return the parameterised MultiFinder()
	 * 
	 */
	public static MultiFinder<AllTypes> findByTestTime(Time testTime) {
		return(
				new MultiFinder<AllTypes>(
				LOGGER,
				SQL_FIND_BY_TEST_TIME,
				resultSet -> { try {return list(resultSet);} catch (SQLException e) { return(null); }},
				new Object[] {testTime}
		));
	}
	/**
	 * This is the <code>findByTestText</code> finder.
	 * 
	 * <p><em>(This finder was generated through the '<code>fieldFinders</code>' JSON key)</em></p>
	 * 
	 * <p>Create a MultiFinder<AllTypes> Finder
	 * that can be invoked through:</p>
	 * 
	 * <ul>
	 *   <li><code>finder.execute();</code> to execute the finder with exceptions thrown</li>
	 *   <li><code>finder.executeSilent();</code> to execute the finder no exceptions (i.e. they are caught, swallowed and logged)</li>
	 * </ul>
	 * 
	 * <p>You may also want to pass in a connection, in which case use the following:</p>
	 * 
	 * <pre>AllTypes.findByTestText(...)
	 *     .withConnection(connection)
	 *     .execute();</pre>
	 * 
	 * <p>You may also want to pass in a connection without exceptions being thrown,
	 * in which case use the following:</p>
	 * 
	 * <pre>AllTypes.findByTestText(...)
	 *     .withConnection(connection)
	 *     .executeSilent();</pre>
	 * 
	 * <p>Additionally, you can limit and offset this query (with or without a connection)</p>
	 * 
	 * <pre>AllTypes.findByTestText(...)
	 *     .withLimit(limit)
	 *     .withOffset(offset)
	 *     .executeSilent();</pre>
	 * 
	 * @param testText - maps to the test_text field
	 * 
	 * @return the parameterised MultiFinder()
	 * 
	 */
	public static MultiFinder<AllTypes> findByTestText(String testText) {
		return(
				new MultiFinder<AllTypes>(
				LOGGER,
				SQL_FIND_BY_TEST_TEXT,
				resultSet -> { try {return list(resultSet);} catch (SQLException e) { return(null); }},
				new Object[] {testText}
		));
	}
	/**
	 * This is the <code>findByTestTimestamp</code> finder.
	 * 
	 * <p><em>(This finder was generated through the '<code>fieldFinders</code>' JSON key)</em></p>
	 * 
	 * <p>Create a MultiFinder<AllTypes> Finder
	 * that can be invoked through:</p>
	 * 
	 * <ul>
	 *   <li><code>finder.execute();</code> to execute the finder with exceptions thrown</li>
	 *   <li><code>finder.executeSilent();</code> to execute the finder no exceptions (i.e. they are caught, swallowed and logged)</li>
	 * </ul>
	 * 
	 * <p>You may also want to pass in a connection, in which case use the following:</p>
	 * 
	 * <pre>AllTypes.findByTestTimestamp(...)
	 *     .withConnection(connection)
	 *     .execute();</pre>
	 * 
	 * <p>You may also want to pass in a connection without exceptions being thrown,
	 * in which case use the following:</p>
	 * 
	 * <pre>AllTypes.findByTestTimestamp(...)
	 *     .withConnection(connection)
	 *     .executeSilent();</pre>
	 * 
	 * <p>Additionally, you can limit and offset this query (with or without a connection)</p>
	 * 
	 * <pre>AllTypes.findByTestTimestamp(...)
	 *     .withLimit(limit)
	 *     .withOffset(offset)
	 *     .executeSilent();</pre>
	 * 
	 * @param testTimestamp - maps to the test_timestamp field
	 * 
	 * @return the parameterised MultiFinder()
	 * 
	 */
	public static MultiFinder<AllTypes> findByTestTimestamp(Timestamp testTimestamp) {
		return(
				new MultiFinder<AllTypes>(
				LOGGER,
				SQL_FIND_BY_TEST_TIMESTAMP,
				resultSet -> { try {return list(resultSet);} catch (SQLException e) { return(null); }},
				new Object[] {testTimestamp}
		));
	}
	/**
	 * This is the <code>findByTestTinyint</code> finder.
	 * 
	 * <p><em>(This finder was generated through the '<code>fieldFinders</code>' JSON key)</em></p>
	 * 
	 * <p>Create a MultiFinder<AllTypes> Finder
	 * that can be invoked through:</p>
	 * 
	 * <ul>
	 *   <li><code>finder.execute();</code> to execute the finder with exceptions thrown</li>
	 *   <li><code>finder.executeSilent();</code> to execute the finder no exceptions (i.e. they are caught, swallowed and logged)</li>
	 * </ul>
	 * 
	 * <p>You may also want to pass in a connection, in which case use the following:</p>
	 * 
	 * <pre>AllTypes.findByTestTinyint(...)
	 *     .withConnection(connection)
	 *     .execute();</pre>
	 * 
	 * <p>You may also want to pass in a connection without exceptions being thrown,
	 * in which case use the following:</p>
	 * 
	 * <pre>AllTypes.findByTestTinyint(...)
	 *     .withConnection(connection)
	 *     .executeSilent();</pre>
	 * 
	 * <p>Additionally, you can limit and offset this query (with or without a connection)</p>
	 * 
	 * <pre>AllTypes.findByTestTinyint(...)
	 *     .withLimit(limit)
	 *     .withOffset(offset)
	 *     .executeSilent();</pre>
	 * 
	 * @param testTinyint - maps to the test_tinyint field
	 * 
	 * @return the parameterised MultiFinder()
	 * 
	 */
	public static MultiFinder<AllTypes> findByTestTinyint(Boolean testTinyint) {
		return(
				new MultiFinder<AllTypes>(
				LOGGER,
				SQL_FIND_BY_TEST_TINYINT,
				resultSet -> { try {return list(resultSet);} catch (SQLException e) { return(null); }},
				new Object[] {testTinyint}
		));
	}
	/**
	 * This is the <code>findByTestTinytext</code> finder.
	 * 
	 * <p><em>(This finder was generated through the '<code>fieldFinders</code>' JSON key)</em></p>
	 * 
	 * <p>Create a MultiFinder<AllTypes> Finder
	 * that can be invoked through:</p>
	 * 
	 * <ul>
	 *   <li><code>finder.execute();</code> to execute the finder with exceptions thrown</li>
	 *   <li><code>finder.executeSilent();</code> to execute the finder no exceptions (i.e. they are caught, swallowed and logged)</li>
	 * </ul>
	 * 
	 * <p>You may also want to pass in a connection, in which case use the following:</p>
	 * 
	 * <pre>AllTypes.findByTestTinytext(...)
	 *     .withConnection(connection)
	 *     .execute();</pre>
	 * 
	 * <p>You may also want to pass in a connection without exceptions being thrown,
	 * in which case use the following:</p>
	 * 
	 * <pre>AllTypes.findByTestTinytext(...)
	 *     .withConnection(connection)
	 *     .executeSilent();</pre>
	 * 
	 * <p>Additionally, you can limit and offset this query (with or without a connection)</p>
	 * 
	 * <pre>AllTypes.findByTestTinytext(...)
	 *     .withLimit(limit)
	 *     .withOffset(offset)
	 *     .executeSilent();</pre>
	 * 
	 * @param testTinytext - maps to the test_tinytext field
	 * 
	 * @return the parameterised MultiFinder()
	 * 
	 */
	public static MultiFinder<AllTypes> findByTestTinytext(String testTinytext) {
		return(
				new MultiFinder<AllTypes>(
				LOGGER,
				SQL_FIND_BY_TEST_TINYTEXT,
				resultSet -> { try {return list(resultSet);} catch (SQLException e) { return(null); }},
				new Object[] {testTinytext}
		));
	}
	/**
	 * This is the <code>findByTestVarchar</code> finder.
	 * 
	 * <p><em>(This finder was generated through the '<code>fieldFinders</code>' JSON key)</em></p>
	 * 
	 * <p>Create a MultiFinder<AllTypes> Finder
	 * that can be invoked through:</p>
	 * 
	 * <ul>
	 *   <li><code>finder.execute();</code> to execute the finder with exceptions thrown</li>
	 *   <li><code>finder.executeSilent();</code> to execute the finder no exceptions (i.e. they are caught, swallowed and logged)</li>
	 * </ul>
	 * 
	 * <p>You may also want to pass in a connection, in which case use the following:</p>
	 * 
	 * <pre>AllTypes.findByTestVarchar(...)
	 *     .withConnection(connection)
	 *     .execute();</pre>
	 * 
	 * <p>You may also want to pass in a connection without exceptions being thrown,
	 * in which case use the following:</p>
	 * 
	 * <pre>AllTypes.findByTestVarchar(...)
	 *     .withConnection(connection)
	 *     .executeSilent();</pre>
	 * 
	 * <p>Additionally, you can limit and offset this query (with or without a connection)</p>
	 * 
	 * <pre>AllTypes.findByTestVarchar(...)
	 *     .withLimit(limit)
	 *     .withOffset(offset)
	 *     .executeSilent();</pre>
	 * 
	 * @param testVarchar - maps to the test_varchar field
	 * 
	 * @return the parameterised MultiFinder()
	 * 
	 */
	public static MultiFinder<AllTypes> findByTestVarchar(String testVarchar) {
		return(
				new MultiFinder<AllTypes>(
				LOGGER,
				SQL_FIND_BY_TEST_VARCHAR,
				resultSet -> { try {return list(resultSet);} catch (SQLException e) { return(null); }},
				new Object[] {testVarchar}
		));
	}
	/**
	 * This is the <code>findByTestYear</code> finder.
	 * 
	 * <p><em>(This finder was generated through the '<code>fieldFinders</code>' JSON key)</em></p>
	 * 
	 * <p>Create a MultiFinder<AllTypes> Finder
	 * that can be invoked through:</p>
	 * 
	 * <ul>
	 *   <li><code>finder.execute();</code> to execute the finder with exceptions thrown</li>
	 *   <li><code>finder.executeSilent();</code> to execute the finder no exceptions (i.e. they are caught, swallowed and logged)</li>
	 * </ul>
	 * 
	 * <p>You may also want to pass in a connection, in which case use the following:</p>
	 * 
	 * <pre>AllTypes.findByTestYear(...)
	 *     .withConnection(connection)
	 *     .execute();</pre>
	 * 
	 * <p>You may also want to pass in a connection without exceptions being thrown,
	 * in which case use the following:</p>
	 * 
	 * <pre>AllTypes.findByTestYear(...)
	 *     .withConnection(connection)
	 *     .executeSilent();</pre>
	 * 
	 * <p>Additionally, you can limit and offset this query (with or without a connection)</p>
	 * 
	 * <pre>AllTypes.findByTestYear(...)
	 *     .withLimit(limit)
	 *     .withOffset(offset)
	 *     .executeSilent();</pre>
	 * 
	 * @param testYear - maps to the test_year field
	 * 
	 * @return the parameterised MultiFinder()
	 * 
	 */
	public static MultiFinder<AllTypes> findByTestYear(Integer testYear) {
		return(
				new MultiFinder<AllTypes>(
				LOGGER,
				SQL_FIND_BY_TEST_YEAR,
				resultSet -> { try {return list(resultSet);} catch (SQLException e) { return(null); }},
				new Object[] {testYear}
		));
	}
	/**
	 * Return the results as a list of AllTypes, this will be empty if
	 * none are found.
	 * 
	 * @param resultSet the results as a list of AllTypes
	 * 
	 * @return the list of results
	 * 
	 * @throws SQLException if there was a problem retrieving the results
	 */
	private static List<AllTypes> list(ResultSet resultSet) throws SQLException {
		List<AllTypes> arrayList = new ArrayList<AllTypes>();
		while(resultSet.next()) {
			arrayList.add(new AllTypes(
					ConnectionManager.getNullableResultLong(resultSet, 1),
					ConnectionManager.getNullableResultLong(resultSet, 2),
					ConnectionManager.getNullableResultBlob(resultSet, 3),
					ConnectionManager.getNullableResultBoolean(resultSet, 4),
					ConnectionManager.getNullableResultString(resultSet, 5),
					ConnectionManager.getNullableResultBoolean(resultSet, 6),
					ConnectionManager.getNullableResultString(resultSet, 7),
					ConnectionManager.getNullableResultString(resultSet, 8),
					ConnectionManager.getNullableResultDate(resultSet, 9),
					ConnectionManager.getNullableResultTimestamp(resultSet, 10),
					ConnectionManager.getNullableResultBigDecimal(resultSet, 11),
					ConnectionManager.getNullableResultBigDecimal(resultSet, 12),
					ConnectionManager.getNullableResultDouble(resultSet, 13),
					ConnectionManager.getNullableResultFloat(resultSet, 14),
					ConnectionManager.getNullableResultInt(resultSet, 15),
					ConnectionManager.getNullableResultInt(resultSet, 16),
					ConnectionManager.getNullableResultString(resultSet, 17),
					ConnectionManager.getNullableResultBlob(resultSet, 18),
					ConnectionManager.getNullableResultInt(resultSet, 19),
					ConnectionManager.getNullableResultString(resultSet, 20),
					ConnectionManager.getNullableResultBigDecimal(resultSet, 21),
					ConnectionManager.getNullableResultShort(resultSet, 22),
					ConnectionManager.getNullableResultTime(resultSet, 23),
					ConnectionManager.getNullableResultString(resultSet, 24),
					ConnectionManager.getNullableResultTimestamp(resultSet, 25),
					ConnectionManager.getNullableResultBoolean(resultSet, 26),
					ConnectionManager.getNullableResultString(resultSet, 27),
					ConnectionManager.getNullableResultString(resultSet, 28),
					ConnectionManager.getNullableResultInt(resultSet, 29)));
		}
		return(arrayList);
	}

	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * 
	 * This is the start of the user defined select clause finders which are 
	 * generated through the "finders" JSON key, with a 'selectClause' 
	 * key on the finder.
	 * 
	 * All selectClause finders return a subset of the data from a row of the 
	 * database table (or tables if there is a join statement) as a generated
	 * bean
	 * 
	 * There are 25 defined finders on the all_types table, of those finders
	 * the following are the select clause finders:
	 * 
	 * 
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

}