package com.synapticloop.sample.h2zero.mariadb.test.counter;

//        - - - - thoughtfully generated by synapticloop h2zero - - - -        
//          with the use of synapticloop templar templating language
//                     (java/test/java-counter-test.templar)


import static org.junit.Assert.*;

import org.junit.Assert;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;
import com.synapticloop.sample.h2zero.mariadb.ConnectionManagerInitialiserOverride;
import com.synapticloop.h2zero.base.manager.mariadb.ConnectionManager;
import com.synapticloop.sample.h2zero.mariadb.test.DatabaseSetupTest;


import java.math.*;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.sql.*;
import java.util.List;


import com.synapticloop.sample.h2zero.mariadb.counter.UserCounter;

/**
 * <p><strong>WARNING NOTE:</strong> these tests are designed to test the generated SQL statements
 * <strong>__NOT__<strong> whether the database actually returns sane results.<p>
 */

public class UserTest extends DatabaseSetupTest {

	@Test
	public void testUsercountAll() throws SQLException {
		UserCounter.countAll()
				.execute();
	}

	@Test
	public void testUsercountAllSilent() {
		UserCounter.countAll()
				.executeSilent();
	}

	@Test
	public void testUsercountAllWithConnection() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			UserCounter.countAll()
					.withConnection(connection)
					.execute();
		}
	}

	@Test
	public void testUsercountAllWithConnectionSilent() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			UserCounter.countAll()
					.withConnection(connection)
					.executeSilent();
		}
	}

	@Test
	public void testUsercountAllWithNullConnection() throws SQLException {
		UserCounter.countAll()
				.withConnection(null)
				.execute();
	}

	@Test
	public void testUsercountAllWithNullConnectionSilent() {
		UserCounter.countAll()
				.withConnection(null)
				.executeSilent();
	}

	@Test
	public void testUsercountNumberOfUsers() throws SQLException {
		UserCounter.countNumberOfUsers()
				.execute();
	}

	@Test
	public void testUsercountNumberOfUsersSilent() {
		UserCounter.countNumberOfUsers()
				.executeSilent();
	}

	@Test
	public void testUsercountNumberOfUsersWithConnection() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			UserCounter.countNumberOfUsers()
					.withConnection(connection)
					.execute();
		}
	}

	@Test
	public void testUsercountNumberOfUsersWithConnectionSilent() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			UserCounter.countNumberOfUsers()
					.withConnection(connection)
					.executeSilent();
		}
	}

	@Test
	public void testUsercountNumberOfUsersWithNullConnection() throws SQLException {
			UserCounter.countNumberOfUsers()
				.withConnection(null)
				.execute();
	}

	@Test
	public void testUsercountNumberOfUsersWithNullConnectionSilent() {
		UserCounter.countNumberOfUsers()
				.withConnection(null)
				.executeSilent();
	}

	@Test
	public void testUsercountNumberOfUsersOverAge() throws SQLException {
		UserCounter.countNumberOfUsersOverAge(1)
				.execute();
	}

	@Test
	public void testUsercountNumberOfUsersOverAgeSilent() {
		UserCounter.countNumberOfUsersOverAge(1)
				.executeSilent();
	}

	@Test
	public void testUsercountNumberOfUsersOverAgeWithConnection() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			UserCounter.countNumberOfUsersOverAge(1)
					.withConnection(connection)
					.execute();
		}
	}

	@Test
	public void testUsercountNumberOfUsersOverAgeWithConnectionSilent() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			UserCounter.countNumberOfUsersOverAge(1)
					.withConnection(connection)
					.executeSilent();
		}
	}

	@Test
	public void testUsercountNumberOfUsersOverAgeWithNullConnection() throws SQLException {
			UserCounter.countNumberOfUsersOverAge(1)
				.withConnection(null)
				.execute();
	}

	@Test
	public void testUsercountNumberOfUsersOverAgeWithNullConnectionSilent() {
		UserCounter.countNumberOfUsersOverAge(1)
				.withConnection(null)
				.executeSilent();
	}

	@Test
	public void testUsercountNumberOfUsersBetweenAge() throws SQLException {
		UserCounter.countNumberOfUsersBetweenAge(1, 1)
				.execute();
	}

	@Test
	public void testUsercountNumberOfUsersBetweenAgeSilent() {
		UserCounter.countNumberOfUsersBetweenAge(1, 1)
				.executeSilent();
	}

	@Test
	public void testUsercountNumberOfUsersBetweenAgeWithConnection() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			UserCounter.countNumberOfUsersBetweenAge(1, 1)
					.withConnection(connection)
					.execute();
		}
	}

	@Test
	public void testUsercountNumberOfUsersBetweenAgeWithConnectionSilent() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			UserCounter.countNumberOfUsersBetweenAge(1, 1)
					.withConnection(connection)
					.executeSilent();
		}
	}

	@Test
	public void testUsercountNumberOfUsersBetweenAgeWithNullConnection() throws SQLException {
			UserCounter.countNumberOfUsersBetweenAge(1, 1)
				.withConnection(null)
				.execute();
	}

	@Test
	public void testUsercountNumberOfUsersBetweenAgeWithNullConnectionSilent() {
		UserCounter.countNumberOfUsersBetweenAge(1, 1)
				.withConnection(null)
				.executeSilent();
	}

	@Test
	public void testUsercountUsersInAges() throws SQLException {
		UserCounter.countUsersInAges(List.of(1))
				.execute();
	}

	@Test
	public void testUsercountUsersInAgesSilent() {
		UserCounter.countUsersInAges(List.of(1))
				.executeSilent();
	}

	@Test
	public void testUsercountUsersInAgesWithConnection() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			UserCounter.countUsersInAges(List.of(1))
					.withConnection(connection)
					.execute();
		}
	}

	@Test
	public void testUsercountUsersInAgesWithConnectionSilent() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			UserCounter.countUsersInAges(List.of(1))
					.withConnection(connection)
					.executeSilent();
		}
	}

	@Test
	public void testUsercountUsersInAgesWithNullConnection() throws SQLException {
			UserCounter.countUsersInAges(List.of(1))
				.withConnection(null)
				.execute();
	}

	@Test
	public void testUsercountUsersInAgesWithNullConnectionSilent() {
		UserCounter.countUsersInAges(List.of(1))
				.withConnection(null)
				.executeSilent();
	}

}
