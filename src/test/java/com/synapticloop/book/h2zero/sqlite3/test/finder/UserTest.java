package com.synapticloop.book.h2zero.sqlite3.test.finder;

//        - - - - thoughtfully generated by synapticloop h2zero - - - -        
//          with the use of synapticloop templar templating language
//                    (/java/test/java-finder-test.templar)


import static org.junit.Assert.*;

import org.junit.Assert;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;
import com.synapticloop.book.h2zero.sqlite3.ConnectionManagerInitialiserOverride;
import com.synapticloop.h2zero.base.manager.sqlite3.ConnectionManager;
import com.synapticloop.book.h2zero.sqlite3.test.DatabaseSetupTest;


import java.math.*;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.sql.*;
import java.util.List;


import com.synapticloop.book.h2zero.sqlite3.finder.UserFinder;

/**
 * WARNING NOTE: these tests are designed to test the generated SQL statements
 * __NOT__ whether the database actually returns sane results.
 * 
 * These will also test to ensure that connections are setting closed properly
 * so that there are no resource leakages.
 */

public class UserTest extends DatabaseSetupTest {

	@Test
	public void testUserFindByPrimaryKey() throws SQLException {
		UserFinder.findByPrimaryKey(1L)
				.execute();

	}

	@Test
	public void testUserFindByPrimaryKeySilent() throws SQLException {
		Assert.assertNull(UserFinder.findByPrimaryKey(-831486134981L)
				.executeSilent());

	}

	@Test
	public void testUserFindByPrimaryKeyWithConnection() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			UserFinder.findByPrimaryKey(1L)
				.withConnection(connection)
				.execute();
		}
	}

	@Test
	public void testUserFindByPrimaryKeyWithConnectionSilent() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			Assert.assertNull(UserFinder.findByPrimaryKey(-831486134981L)
				.withConnection(connection)
				.executeSilent());
		}
	}

	@Test
	public void testUserFindAll() throws SQLException {
		Assert.assertEquals(0, UserFinder.findAll()
				.execute()
				.size());

	}

	@Test
	public void testUserFindAllLimitOffset() throws SQLException {
		Assert.assertEquals(0, UserFinder.findAll()
			.withLimit(1)
			.withOffset(0)
			.execute()
			.size());
	}

	@Test
	public void testUserFindAllSilent() throws SQLException {
		Assert.assertEquals(0, UserFinder.findAll()
				.executeSilent()
				.size());

	}

	@Test
	public void testUserFindAllLimitOffsetSilent() throws SQLException {
		Assert.assertEquals(0, UserFinder.findAll()
				.withLimit(1)
				.withOffset(0)
				.executeSilent()
				.size());
	}

	@Test
	public void testUserFindAllWithConnection() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			Assert.assertEquals(0, UserFinder.findAll()
				.withConnection(connection)
				.execute()
				.size());

		}
	}

	@Test
	public void testUserFindAllWithConnectionSilent() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			Assert.assertEquals(0, UserFinder.findAll()
				.withConnection(connection)
				.executeSilent()
				.size());
		}
	}

	@Test
	public void testUserFindAllWithConnectionLimit() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			UserFinder.findAll().withConnection(connection)
				.withLimit(1)
				.withOffset(0)
				.execute();
		}

	}

	@Test
	public void testUserFindAllWithConnectionLimitSilent() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			Assert.assertEquals(0, UserFinder.findAll()
				.withConnection(connection)
				.withLimit(1)
				.withOffset(0)
				.executeSilent()
				.size());
		}
	}

	@Test
	public void testUserFindAllWithConnectionOffset() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			UserFinder.findAll()
				.withConnection(connection)
				.withLimit(null)
				.withOffset(1)
				.execute();
			Assert.fail("A SQL Exception should have been thrown as there was an offset without a limit set.");		} catch(SQLException ignored) {
		}
	}

	@Test
	public void testUserFindAllWithConnectionOffsetSilent() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			UserFinder.findAll()
				.withConnection(connection)
				.withLimit(null)
				.withOffset(0)
				.executeSilent();
		}
	}

	@Test
	public void testUserFindAllWithConnectionLimitOffset() throws SQLException {
		try (Connection connection = ConnectionManager.getConnection()) {
			UserFinder.findAll()
				.withConnection(connection)
				.withLimit(1)
				.withOffset(0)
				.execute();
		}
	}

	@Test
	public void testUserFindAllWithNullConnectionLimitOffset() throws SQLException {
		UserFinder.findAll()
				.withConnection(null)
				.withLimit(1)
				.withOffset(0)
				.execute();

	}

}
